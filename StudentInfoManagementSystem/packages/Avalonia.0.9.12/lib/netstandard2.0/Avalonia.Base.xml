<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Avalonia.Base</name>
    </assembly>
    <members>
        <member name="T:Avalonia.AttachedProperty`1">
            <summary>
            An attached avalonia property.
            </summary>
            <typeparam name="TValue">The type of the property's value.</typeparam>
        </member>
        <member name="M:Avalonia.AttachedProperty`1.#ctor(System.String,System.Type,Avalonia.StyledPropertyMetadata{`0},System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Avalonia.AttachedProperty`1"/> class.
            </summary>
            <param name="name">The name of the property.</param>
            <param name="ownerType">The class that is registering the property.</param>
            <param name="metadata">The property metadata.</param>
            <param name="inherits">Whether the property inherits its value.</param>
        </member>
        <member name="P:Avalonia.AttachedProperty`1.IsAttached">
            <inheritdoc/>
        </member>
        <member name="M:Avalonia.AttachedProperty`1.AddOwner``1">
            <summary>
            Attaches the property as a non-attached property on the specified type.
            </summary>
            <typeparam name="TOwner">The owner type.</typeparam>
            <returns>The property.</returns>
        </member>
        <member name="T:Avalonia.AvaloniaInternalException">
            <summary>
            Exception signifying an internal logic error in Avalonia.
            </summary>
        </member>
        <member name="M:Avalonia.AvaloniaInternalException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Avalonia.AvaloniaInternalException"/> class.
            </summary>
            <param name="message">The exception message.</param>
        </member>
        <member name="T:Avalonia.AvaloniaObject">
            <summary>
            An object with <see cref="T:Avalonia.AvaloniaProperty"/> support.
            </summary>
            <remarks>
            This class is analogous to DependencyObject in WPF.
            </remarks>
        </member>
        <member name="M:Avalonia.AvaloniaObject.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Avalonia.AvaloniaObject"/> class.
            </summary>
        </member>
        <member name="E:Avalonia.AvaloniaObject.PropertyChanged">
            <summary>
            Raised when a <see cref="T:Avalonia.AvaloniaProperty"/> value changes on this object.
            </summary>
        </member>
        <member name="E:Avalonia.AvaloniaObject.System#ComponentModel#INotifyPropertyChanged#PropertyChanged">
            <summary>
            Raised when a <see cref="T:Avalonia.AvaloniaProperty"/> value changes on this object.
            </summary>
        </member>
        <member name="E:Avalonia.AvaloniaObject.Avalonia#IAvaloniaObject#InheritablePropertyChanged">
            <summary>
            Raised when an inheritable <see cref="T:Avalonia.AvaloniaProperty"/> value changes on this object.
            </summary>
        </member>
        <member name="P:Avalonia.AvaloniaObject.InheritanceParent">
            <summary>
            Gets or sets the parent object that inherited <see cref="T:Avalonia.AvaloniaProperty"/> values
            are inherited from.
            </summary>
            <value>
            The inheritance parent.
            </value>
        </member>
        <member name="P:Avalonia.AvaloniaObject.Item(Avalonia.AvaloniaProperty)">
            <summary>
            Gets or sets the value of a <see cref="T:Avalonia.AvaloniaProperty"/>.
            </summary>
            <param name="property">The property.</param>
        </member>
        <member name="P:Avalonia.AvaloniaObject.Item(Avalonia.Data.IndexerDescriptor)">
            <summary>
            Gets or sets a binding for a <see cref="T:Avalonia.AvaloniaProperty"/>.
            </summary>
            <param name="binding">The binding information.</param>
        </member>
        <member name="M:Avalonia.AvaloniaObject.ClearValue(Avalonia.AvaloniaProperty)">
            <summary>
            Clears a <see cref="T:Avalonia.AvaloniaProperty"/>'s local value.
            </summary>
            <param name="property">The property.</param>
        </member>
        <member name="M:Avalonia.AvaloniaObject.Equals(System.Object)">
            <summary>
            Compares two objects using reference equality.
            </summary>
            <param name="obj">The object to compare.</param>
            <remarks>
            Overriding Equals and GetHashCode on an AvaloniaObject is disallowed for two reasons:
            
            - AvaloniaObjects are by their nature mutable
            - The presence of attached properties means that the semantics of equality are
              difficult to define
            
            See https://github.com/AvaloniaUI/Avalonia/pull/2747 for the discussion that prompted
            this.
            </remarks>
        </member>
        <member name="M:Avalonia.AvaloniaObject.GetHashCode">
            <summary>
            Gets the hash code for the object.
            </summary>
            <remarks>
            Overriding Equals and GetHashCode on an AvaloniaObject is disallowed for two reasons:
            
            - AvaloniaObjects are by their nature mutable
            - The presence of attached properties means that the semantics of equality are
              difficult to define
            
            See https://github.com/AvaloniaUI/Avalonia/pull/2747 for the discussion that prompted
            this.
            </remarks>
        </member>
        <member name="M:Avalonia.AvaloniaObject.GetValue(Avalonia.AvaloniaProperty)">
            <summary>
            Gets a <see cref="T:Avalonia.AvaloniaProperty"/> value.
            </summary>
            <param name="property">The property.</param>
            <returns>The value.</returns>
        </member>
        <member name="M:Avalonia.AvaloniaObject.GetValue``1(Avalonia.AvaloniaProperty{``0})">
            <summary>
            Gets a <see cref="T:Avalonia.AvaloniaProperty"/> value.
            </summary>
            <typeparam name="T">The type of the property.</typeparam>
            <param name="property">The property.</param>
            <returns>The value.</returns>
        </member>
        <member name="M:Avalonia.AvaloniaObject.IsAnimating(Avalonia.AvaloniaProperty)">
            <summary>
            Checks whether a <see cref="T:Avalonia.AvaloniaProperty"/> is animating.
            </summary>
            <param name="property">The property.</param>
            <returns>True if the property is animating, otherwise false.</returns>
        </member>
        <member name="M:Avalonia.AvaloniaObject.IsSet(Avalonia.AvaloniaProperty)">
            <summary>
            Checks whether a <see cref="T:Avalonia.AvaloniaProperty"/> is set on this object.
            </summary>
            <param name="property">The property.</param>
            <returns>True if the property is set, otherwise false.</returns>
            <remarks>
            Checks whether a value is assigned to the property, or that there is a binding to the
            property that is producing a value other than <see cref="F:Avalonia.AvaloniaProperty.UnsetValue"/>.
            </remarks>
        </member>
        <member name="M:Avalonia.AvaloniaObject.SetValue(Avalonia.AvaloniaProperty,System.Object,Avalonia.Data.BindingPriority)">
            <summary>
            Sets a <see cref="T:Avalonia.AvaloniaProperty"/> value.
            </summary>
            <param name="property">The property.</param>
            <param name="value">The value.</param>
            <param name="priority">The priority of the value.</param>
        </member>
        <member name="M:Avalonia.AvaloniaObject.SetValue``1(Avalonia.AvaloniaProperty{``0},``0,Avalonia.Data.BindingPriority)">
            <summary>
            Sets a <see cref="T:Avalonia.AvaloniaProperty"/> value.
            </summary>
            <typeparam name="T">The type of the property.</typeparam>
            <param name="property">The property.</param>
            <param name="value">The value.</param>
            <param name="priority">The priority of the value.</param>
        </member>
        <member name="M:Avalonia.AvaloniaObject.Bind(Avalonia.AvaloniaProperty,System.IObservable{System.Object},Avalonia.Data.BindingPriority)">
            <summary>
            Binds a <see cref="T:Avalonia.AvaloniaProperty"/> to an observable.
            </summary>
            <param name="property">The property.</param>
            <param name="source">The observable.</param>
            <param name="priority">The priority of the binding.</param>
            <returns>
            A disposable which can be used to terminate the binding.
            </returns>
        </member>
        <member name="M:Avalonia.AvaloniaObject.Bind``1(Avalonia.AvaloniaProperty{``0},System.IObservable{``0},Avalonia.Data.BindingPriority)">
            <summary>
            Binds a <see cref="T:Avalonia.AvaloniaProperty"/> to an observable.
            </summary>
            <typeparam name="T">The type of the property.</typeparam>
            <param name="property">The property.</param>
            <param name="source">The observable.</param>
            <param name="priority">The priority of the binding.</param>
            <returns>
            A disposable which can be used to terminate the binding.
            </returns>
        </member>
        <member name="M:Avalonia.AvaloniaObject.Revalidate(Avalonia.AvaloniaProperty)">
            <summary>
            Forces the specified property to be revalidated.
            </summary>
            <param name="property">The property.</param>
        </member>
        <member name="M:Avalonia.AvaloniaObject.Avalonia#Diagnostics#IAvaloniaObjectDebug#GetPropertyChangedSubscribers">
            <inheritdoc/>
        </member>
        <member name="M:Avalonia.AvaloniaObject.GetSetValues">
            <summary>
            Gets all priority values set on the object.
            </summary>
            <returns>A collection of property/value tuples.</returns>
        </member>
        <member name="M:Avalonia.AvaloniaObject.AffectsValidation(Avalonia.AvaloniaProperty,Avalonia.AvaloniaProperty[])">
            <summary>
            Forces revalidation of properties when a property value changes.
            </summary>
            <param name="property">The property to that affects validation.</param>
            <param name="affected">The affected properties.</param>
        </member>
        <member name="M:Avalonia.AvaloniaObject.LogBindingError(Avalonia.AvaloniaProperty,System.Exception)">
            <summary>
            Logs a binding error for a property.
            </summary>
            <param name="property">The property that the error occurred on.</param>
            <param name="e">The binding error.</param>
        </member>
        <member name="M:Avalonia.AvaloniaObject.UpdateDataValidation(Avalonia.AvaloniaProperty,Avalonia.Data.BindingNotification)">
            <summary>
            Called to update the validation state for properties for which data validation is
            enabled.
            </summary>
            <param name="property">The property.</param>
            <param name="status">The new validation status.</param>
        </member>
        <member name="M:Avalonia.AvaloniaObject.OnPropertyChanged(Avalonia.AvaloniaPropertyChangedEventArgs)">
            <summary>
            Called when a avalonia property changes on the object.
            </summary>
            <param name="e">The event arguments.</param>
        </member>
        <member name="M:Avalonia.AvaloniaObject.RaisePropertyChanged(Avalonia.AvaloniaProperty,System.Object,System.Object,Avalonia.Data.BindingPriority)">
            <summary>
            Raises the <see cref="E:Avalonia.AvaloniaObject.PropertyChanged"/> event.
            </summary>
            <param name="property">The property that has changed.</param>
            <param name="oldValue">The old property value.</param>
            <param name="newValue">The new property value.</param>
            <param name="priority">The priority of the binding that produced the value.</param>
        </member>
        <member name="M:Avalonia.AvaloniaObject.SetAndRaise``1(Avalonia.AvaloniaProperty{``0},``0@,``0)">
            <summary>
            Sets the backing field for a direct avalonia property, raising the 
            <see cref="E:Avalonia.AvaloniaObject.PropertyChanged"/> event if the value has changed.
            </summary>
            <typeparam name="T">The type of the property.</typeparam>
            <param name="property">The property.</param>
            <param name="field">The backing field.</param>
            <param name="value">The value.</param>
            <returns>
            True if the value changed, otherwise false.
            </returns>
        </member>
        <member name="M:Avalonia.AvaloniaObject.CastOrDefault(System.Object,System.Type)">
            <summary>
            Tries to cast a value to a type, taking into account that the value may be a
            <see cref="T:Avalonia.Data.BindingNotification"/>.
            </summary>
            <param name="value">The value.</param>
            <param name="type">The type.</param>
            <returns>The cast value, or a <see cref="T:Avalonia.Data.BindingNotification"/>.</returns>
        </member>
        <member name="M:Avalonia.AvaloniaObject.GetDefaultValue(Avalonia.AvaloniaProperty)">
            <summary>
            Gets the default value for a property.
            </summary>
            <param name="property">The property.</param>
            <returns>The default value.</returns>
        </member>
        <member name="M:Avalonia.AvaloniaObject.GetValueOrDefaultUnchecked(Avalonia.AvaloniaProperty)">
            <summary>
            Gets the value or default value for a property.
            </summary>
            <param name="property">The property.</param>
            <returns>The default value.</returns>
        </member>
        <member name="M:Avalonia.AvaloniaObject.SetDirectValue(Avalonia.AvaloniaProperty,System.Object)">
            <summary>
            Sets the value of a direct property.
            </summary>
            <param name="property">The property.</param>
            <param name="value">The value.</param>
        </member>
        <member name="M:Avalonia.AvaloniaObject.SetStyledValue(Avalonia.AvaloniaProperty,System.Object,Avalonia.Data.BindingPriority)">
            <summary>
            Sets the value of a styled property.
            </summary>
            <param name="property">The property.</param>
            <param name="value">The value.</param>
            <param name="priority">The priority of the value.</param>
        </member>
        <member name="M:Avalonia.AvaloniaObject.GetRegistered(Avalonia.AvaloniaProperty)">
            <summary>
            Given a direct property, returns a registered avalonia property that is equivalent or
            throws if not found.
            </summary>
            <param name="property">The property.</param>
            <returns>The registered property.</returns>
        </member>
        <member name="M:Avalonia.AvaloniaObject.ParentPropertyChanged(System.Object,Avalonia.AvaloniaPropertyChangedEventArgs)">
            <summary>
            Called when a property is changed on the current <see cref="P:Avalonia.AvaloniaObject.InheritanceParent"/>.
            </summary>
            <param name="sender">The event sender.</param>
            <param name="e">The event args.</param>
            <remarks>
            Checks for changes in an inherited property value.
            </remarks>
        </member>
        <member name="M:Avalonia.AvaloniaObject.GetDescription(System.IObservable{System.Object})">
            <summary>
            Gets a description of an observable that van be used in logs.
            </summary>
            <param name="o">The observable.</param>
            <returns>The description.</returns>
        </member>
        <member name="M:Avalonia.AvaloniaObject.LogIfError(Avalonia.AvaloniaProperty,Avalonia.Data.BindingNotification)">
            <summary>
            Logs a mesage if the notification represents a binding error.
            </summary>
            <param name="property">The property being bound.</param>
            <param name="notification">The binding notification.</param>
        </member>
        <member name="M:Avalonia.AvaloniaObject.LogPropertySet(Avalonia.AvaloniaProperty,System.Object,Avalonia.Data.BindingPriority)">
            <summary>
            Logs a property set message.
            </summary>
            <param name="property">The property.</param>
            <param name="value">The new value.</param>
            <param name="priority">The priority.</param>
        </member>
        <member name="T:Avalonia.AvaloniaObjectExtensions">
            <summary>
            Provides extension methods for <see cref="T:Avalonia.AvaloniaObject"/> and related classes.
            </summary>
        </member>
        <member name="M:Avalonia.AvaloniaObjectExtensions.ToBinding``1(System.IObservable{``0})">
            <summary>
            Converts an <see cref="T:System.IObservable`1"/> to an <see cref="T:Avalonia.Data.IBinding"/>.
            </summary>
            <typeparam name="T">The type produced by the observable.</typeparam>
            <param name="source">The observable</param>
            <returns>An <see cref="T:Avalonia.Data.IBinding"/>.</returns>
        </member>
        <member name="M:Avalonia.AvaloniaObjectExtensions.GetObservable(Avalonia.IAvaloniaObject,Avalonia.AvaloniaProperty)">
            <summary>
            Gets an observable for a <see cref="T:Avalonia.AvaloniaProperty"/>.
            </summary>
            <param name="o">The object.</param>
            <param name="property">The property.</param>
            <returns>
            An observable which fires immediately with the current value of the property on the
            object and subsequently each time the property value changes.
            </returns>
            <remarks>
            The subscription to <paramref name="o"/> is created using a weak reference.
            </remarks>
        </member>
        <member name="M:Avalonia.AvaloniaObjectExtensions.GetObservable``1(Avalonia.IAvaloniaObject,Avalonia.AvaloniaProperty{``0})">
            <summary>
            Gets an observable for a <see cref="T:Avalonia.AvaloniaProperty"/>.
            </summary>
            <param name="o">The object.</param>
            <typeparam name="T">The property type.</typeparam>
            <param name="property">The property.</param>
            <returns>
            An observable which fires immediately with the current value of the property on the
            object and subsequently each time the property value changes.
            </returns>
            <remarks>
            The subscription to <paramref name="o"/> is created using a weak reference.
            </remarks>
        </member>
        <member name="M:Avalonia.AvaloniaObjectExtensions.GetPropertyChangedObservable(Avalonia.IAvaloniaObject,Avalonia.AvaloniaProperty)">
            <summary>
            Gets an observable that listens for property changed events for an
            <see cref="T:Avalonia.AvaloniaProperty"/>.
            </summary>
            <param name="o">The object.</param>
            <param name="property">The property.</param>
            <returns>
            An observable which when subscribed pushes the property changed event args
            each time a <see cref="E:Avalonia.IAvaloniaObject.PropertyChanged"/> event is raised
            for the specified property.
            </returns>
        </member>
        <member name="M:Avalonia.AvaloniaObjectExtensions.GetSubject(Avalonia.IAvaloniaObject,Avalonia.AvaloniaProperty,Avalonia.Data.BindingPriority)">
            <summary>
            Gets a subject for a <see cref="T:Avalonia.AvaloniaProperty"/>.
            </summary>
            <param name="o">The object.</param>
            <param name="property">The property.</param>
            <param name="priority">
            The priority with which binding values are written to the object.
            </param>
            <returns>
            An <see cref="T:System.Reactive.Subjects.ISubject`1"/> which can be used for two-way binding to/from the 
            property.
            </returns>
        </member>
        <member name="M:Avalonia.AvaloniaObjectExtensions.GetSubject``1(Avalonia.IAvaloniaObject,Avalonia.AvaloniaProperty{``0},Avalonia.Data.BindingPriority)">
            <summary>
            Gets a subject for a <see cref="T:Avalonia.AvaloniaProperty"/>.
            </summary>
            <typeparam name="T">The property type.</typeparam>
            <param name="o">The object.</param>
            <param name="property">The property.</param>
            <param name="priority">
            The priority with which binding values are written to the object.
            </param>
            <returns>
            An <see cref="T:System.Reactive.Subjects.ISubject`1"/> which can be used for two-way binding to/from the 
            property.
            </returns>
        </member>
        <member name="M:Avalonia.AvaloniaObjectExtensions.Bind(Avalonia.IAvaloniaObject,Avalonia.AvaloniaProperty,Avalonia.Data.IBinding,System.Object)">
            <summary>
            Binds a property on an <see cref="T:Avalonia.IAvaloniaObject"/> to an <see cref="T:Avalonia.Data.IBinding"/>.
            </summary>
            <param name="target">The object.</param>
            <param name="property">The property to bind.</param>
            <param name="binding">The binding.</param>
            <param name="anchor">
            An optional anchor from which to locate required context. When binding to objects that
            are not in the logical tree, certain types of binding need an anchor into the tree in 
            order to locate named controls or resources. The <paramref name="anchor"/> parameter 
            can be used to provice this context.
            </param>
            <returns>An <see cref="T:System.IDisposable"/> which can be used to cancel the binding.</returns>
        </member>
        <member name="M:Avalonia.AvaloniaObjectExtensions.AddClassHandler``1(System.IObservable{Avalonia.AvaloniaPropertyChangedEventArgs},System.Action{``0,Avalonia.AvaloniaPropertyChangedEventArgs})">
            <summary>
            Subscribes to a property changed notifications for changes that originate from a
            <typeparamref name="TTarget"/>.
            </summary>
            <typeparam name="TTarget">The type of the property change sender.</typeparam>
            <param name="observable">The property changed observable.</param>
            <param name="action">
            The method to call. The parameters are the sender and the event args.
            </param>
            <returns>A disposable that can be used to terminate the subscription.</returns>
        </member>
        <member name="M:Avalonia.AvaloniaObjectExtensions.AddClassHandler``1(System.IObservable{Avalonia.AvaloniaPropertyChangedEventArgs},System.Func{``0,System.Action{Avalonia.AvaloniaPropertyChangedEventArgs}})">
            <summary>
            Subscribes to a property changed notifications for changes that originate from a
            <typeparamref name="TTarget"/>.
            </summary>
            <typeparam name="TTarget">The type of the property change sender.</typeparam>
            <param name="observable">The property changed observable.</param>
            <param name="handler">Given a TTarget, returns the handler.</param>
            <returns>A disposable that can be used to terminate the subscription.</returns>
        </member>
        <member name="M:Avalonia.AvaloniaObjectExtensions.GetDescription(Avalonia.IAvaloniaObject,Avalonia.AvaloniaProperty)">
            <summary>
            Gets a description of a property that van be used in observables.
            </summary>
            <param name="o">The object.</param>
            <param name="property">The property</param>
            <returns>The description.</returns>
        </member>
        <member name="M:Avalonia.AvaloniaObjectExtensions.SubscribeAdapter``1(Avalonia.AvaloniaPropertyChangedEventArgs,System.Func{``0,System.Action{Avalonia.AvaloniaPropertyChangedEventArgs}})">
            <summary>
            Observer method for <see cref="M:Avalonia.AvaloniaObjectExtensions.AddClassHandler``1(System.IObservable{Avalonia.AvaloniaPropertyChangedEventArgs},System.Func{``0,System.Action{Avalonia.AvaloniaPropertyChangedEventArgs}})"/>.
            </summary>
            <typeparam name="TTarget">The sender type to accept.</typeparam>
            <param name="e">The event args.</param>
            <param name="handler">Given a TTarget, returns the handler.</param>
        </member>
        <member name="T:Avalonia.AvaloniaProperty">
            <summary>
            Base class for avalonia properties.
            </summary>
        </member>
        <member name="F:Avalonia.AvaloniaProperty.UnsetValue">
            <summary>
            Represents an unset property value.
            </summary>
        </member>
        <member name="M:Avalonia.AvaloniaProperty.#ctor(System.String,System.Type,System.Type,Avalonia.PropertyMetadata,System.Action{Avalonia.IAvaloniaObject,System.Boolean})">
            <summary>
            Initializes a new instance of the <see cref="T:Avalonia.AvaloniaProperty"/> class.
            </summary>
            <param name="name">The name of the property.</param>
            <param name="valueType">The type of the property's value.</param>
            <param name="ownerType">The type of the class that registers the property.</param>
            <param name="metadata">The property metadata.</param>
            <param name="notifying">A <see cref="P:Avalonia.AvaloniaProperty.Notifying"/> callback.</param>
        </member>
        <member name="M:Avalonia.AvaloniaProperty.#ctor(Avalonia.AvaloniaProperty,System.Type,Avalonia.PropertyMetadata)">
            <summary>
            Initializes a new instance of the <see cref="T:Avalonia.AvaloniaProperty"/> class.
            </summary>
            <param name="source">The direct property to copy.</param>
            <param name="ownerType">The new owner type.</param>
            <param name="metadata">Optional overridden metadata.</param>
        </member>
        <member name="P:Avalonia.AvaloniaProperty.Name">
            <summary>
            Gets the name of the property.
            </summary>
        </member>
        <member name="P:Avalonia.AvaloniaProperty.PropertyType">
            <summary>
            Gets the type of the property's value.
            </summary>
        </member>
        <member name="P:Avalonia.AvaloniaProperty.OwnerType">
            <summary>
            Gets the type of the class that registered the property.
            </summary>
        </member>
        <member name="P:Avalonia.AvaloniaProperty.Inherits">
            <summary>
            Gets a value indicating whether the property inherits its value.
            </summary>
        </member>
        <member name="P:Avalonia.AvaloniaProperty.IsAttached">
            <summary>
            Gets a value indicating whether this is an attached property.
            </summary>
        </member>
        <member name="P:Avalonia.AvaloniaProperty.IsDirect">
            <summary>
            Gets a value indicating whether this is a direct property.
            </summary>
        </member>
        <member name="P:Avalonia.AvaloniaProperty.IsReadOnly">
            <summary>
            Gets a value indicating whether this is a readonly property.
            </summary>
        </member>
        <member name="P:Avalonia.AvaloniaProperty.Initialized">
            <summary>
            Gets an observable that is fired when this property is initialized on a
            new <see cref="T:Avalonia.AvaloniaObject"/> instance.
            </summary>
            <remarks>
            This observable is fired each time a new <see cref="T:Avalonia.AvaloniaObject"/> is constructed
            for all properties registered on the object's type. The default value of the property
            for the object is passed in the args' NewValue (OldValue will always be
            <see cref="F:Avalonia.AvaloniaProperty.UnsetValue"/>.
            </remarks>
            <value>
            An observable that is fired when this property is initialized on a new
            <see cref="T:Avalonia.AvaloniaObject"/> instance.
            </value>
        </member>
        <member name="P:Avalonia.AvaloniaProperty.Changed">
            <summary>
            Gets an observable that is fired when this property changes on any
            <see cref="T:Avalonia.AvaloniaObject"/> instance.
            </summary>
            <value>
            An observable that is fired when this property changes on any
            <see cref="T:Avalonia.AvaloniaObject"/> instance.
            </value>
        </member>
        <member name="P:Avalonia.AvaloniaProperty.Notifying">
            <summary>
            Gets a method that gets called before and after the property starts being notified on an
            object.
            </summary>
            <remarks>
            When a property changes, change notifications are sent to all property subscribers;
            for example via the <see cref="P:Avalonia.AvaloniaProperty.Changed"/> observable and and the
            <see cref="E:Avalonia.AvaloniaObject.PropertyChanged"/> event. If this callback is set for a property,
            then it will be called before and after these notifications take place. The bool argument
            will be true before the property change notifications are sent and false afterwards. This
            callback is intended to support Control.IsDataContextChanging.
            </remarks>
        </member>
        <member name="P:Avalonia.AvaloniaProperty.Id">
            <summary>
            Gets the integer ID that represents this property.
            </summary>
        </member>
        <member name="M:Avalonia.AvaloniaProperty.op_LogicalNot(Avalonia.AvaloniaProperty)">
            <summary>
            Provides access to a property's binding via the <see cref="T:Avalonia.AvaloniaObject"/>
            indexer.
            </summary>
            <param name="property">The property.</param>
            <returns>A <see cref="T:Avalonia.Data.IndexerDescriptor"/> describing the binding.</returns>
        </member>
        <member name="M:Avalonia.AvaloniaProperty.op_OnesComplement(Avalonia.AvaloniaProperty)">
            <summary>
            Provides access to a property's template binding via the <see cref="T:Avalonia.AvaloniaObject"/>
            indexer.
            </summary>
            <param name="property">The property.</param>
            <returns>A <see cref="T:Avalonia.Data.IndexerDescriptor"/> describing the binding.</returns>
        </member>
        <member name="M:Avalonia.AvaloniaProperty.op_Equality(Avalonia.AvaloniaProperty,Avalonia.AvaloniaProperty)">
            <summary>
            Tests two <see cref="T:Avalonia.AvaloniaProperty"/>s for equality.
            </summary>
            <param name="a">The first property.</param>
            <param name="b">The second property.</param>
            <returns>True if the properties are equal, otherwise false.</returns>
        </member>
        <member name="M:Avalonia.AvaloniaProperty.op_Inequality(Avalonia.AvaloniaProperty,Avalonia.AvaloniaProperty)">
            <summary>
            Tests two <see cref="T:Avalonia.AvaloniaProperty"/>s for inequality.
            </summary>
            <param name="a">The first property.</param>
            <param name="b">The second property.</param>
            <returns>True if the properties are equal, otherwise false.</returns>
        </member>
        <member name="M:Avalonia.AvaloniaProperty.Register``2(System.String,``1,System.Boolean,Avalonia.Data.BindingMode,System.Func{``0,``1,``1},System.Action{Avalonia.IAvaloniaObject,System.Boolean})">
            <summary>
            Registers a <see cref="T:Avalonia.AvaloniaProperty"/>.
            </summary>
            <typeparam name="TOwner">The type of the class that is registering the property.</typeparam>
            <typeparam name="TValue">The type of the property's value.</typeparam>
            <param name="name">The name of the property.</param>
            <param name="defaultValue">The default value of the property.</param>
            <param name="inherits">Whether the property inherits its value.</param>
            <param name="defaultBindingMode">The default binding mode for the property.</param>
            <param name="validate">A validation function.</param>
            <param name="notifying">
            A method that gets called before and after the property starts being notified on an
            object; the bool argument will be true before and false afterwards. This callback is
            intended to support IsDataContextChanging.
            </param>
            <returns>A <see cref="T:Avalonia.StyledProperty`1"/></returns>
        </member>
        <member name="M:Avalonia.AvaloniaProperty.RegisterAttached``3(System.String,``2,System.Boolean,Avalonia.Data.BindingMode,System.Func{``1,``2,``2})">
            <summary>
            Registers an attached <see cref="T:Avalonia.AvaloniaProperty"/>.
            </summary>
            <typeparam name="TOwner">The type of the class that is registering the property.</typeparam>
            <typeparam name="THost">The type of the class that the property is to be registered on.</typeparam>
            <typeparam name="TValue">The type of the property's value.</typeparam>
            <param name="name">The name of the property.</param>
            <param name="defaultValue">The default value of the property.</param>
            <param name="inherits">Whether the property inherits its value.</param>
            <param name="defaultBindingMode">The default binding mode for the property.</param>
            <param name="validate">A validation function.</param>
            <returns>A <see cref="T:Avalonia.AvaloniaProperty`1"/></returns>
        </member>
        <member name="M:Avalonia.AvaloniaProperty.RegisterAttached``2(System.String,System.Type,``1,System.Boolean,Avalonia.Data.BindingMode,System.Func{``0,``1,``1})">
            <summary>
            Registers an attached <see cref="T:Avalonia.AvaloniaProperty"/>.
            </summary>
            <typeparam name="THost">The type of the class that the property is to be registered on.</typeparam>
            <typeparam name="TValue">The type of the property's value.</typeparam>
            <param name="name">The name of the property.</param>
            <param name="ownerType">The type of the class that is registering the property.</param>
            <param name="defaultValue">The default value of the property.</param>
            <param name="inherits">Whether the property inherits its value.</param>
            <param name="defaultBindingMode">The default binding mode for the property.</param>
            <param name="validate">A validation function.</param>
            <returns>A <see cref="T:Avalonia.AvaloniaProperty`1"/></returns>
        </member>
        <member name="M:Avalonia.AvaloniaProperty.RegisterDirect``2(System.String,System.Func{``0,``1},System.Action{``0,``1},``1,Avalonia.Data.BindingMode,System.Boolean)">
            <summary>
            Registers a direct <see cref="T:Avalonia.AvaloniaProperty"/>.
            </summary>
            <typeparam name="TOwner">The type of the class that is registering the property.</typeparam>
            <typeparam name="TValue">The type of the property's value.</typeparam>
            <param name="name">The name of the property.</param>
            <param name="getter">Gets the current value of the property.</param>
            <param name="setter">Sets the value of the property.</param>
            <param name="unsetValue">
            The value to use when the property is set to <see cref="F:Avalonia.AvaloniaProperty.UnsetValue"/>
            </param>
            <param name="defaultBindingMode">The default binding mode for the property.</param>
            <param name="enableDataValidation">
            Whether the property is interested in data validation.
            </param>
            <returns>A <see cref="T:Avalonia.AvaloniaProperty`1"/></returns>
        </member>
        <member name="M:Avalonia.AvaloniaProperty.Bind">
            <summary>
            Returns a binding accessor that can be passed to <see cref="T:Avalonia.AvaloniaObject"/>'s []
            operator to initiate a binding.
            </summary>
            <returns>A <see cref="T:Avalonia.Data.IndexerDescriptor"/>.</returns>
            <remarks>
            The ! and ~ operators are short forms of this.
            </remarks>
        </member>
        <member name="M:Avalonia.AvaloniaProperty.Equals(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:Avalonia.AvaloniaProperty.Equals(Avalonia.AvaloniaProperty)">
            <inheritdoc/>
        </member>
        <member name="M:Avalonia.AvaloniaProperty.GetHashCode">
            <inheritdoc/>
        </member>
        <member name="M:Avalonia.AvaloniaProperty.GetMetadata``1">
            <summary>
            Gets the property metadata for the specified type.
            </summary>
            <typeparam name="T">The type.</typeparam>
            <returns>
            The property metadata.
            </returns>
        </member>
        <member name="M:Avalonia.AvaloniaProperty.GetMetadata(System.Type)">
             <summary>
             Gets the property metadata for the specified type.
             </summary>
             <param name="type">The type.</param>
             <returns>
             The property metadata.
             </returns>
            
        </member>
        <member name="M:Avalonia.AvaloniaProperty.IsValidValue(System.Object)">
            <summary>
            Checks whether the <paramref name="value"/> is valid for the property.
            </summary>
            <param name="value">The value.</param>
            <returns>True if the value is valid, otherwise false.</returns>
        </member>
        <member name="M:Avalonia.AvaloniaProperty.ToString">
            <summary>
            Gets the string representation of the property.
            </summary>
            <returns>The property's string representation.</returns>
        </member>
        <member name="P:Avalonia.AvaloniaProperty.HasNotifyInitializedObservers">
            <summary>
            True if <see cref="P:Avalonia.AvaloniaProperty.Initialized"/> has any observers.
            </summary>
        </member>
        <member name="M:Avalonia.AvaloniaProperty.NotifyInitialized(Avalonia.AvaloniaPropertyChangedEventArgs)">
            <summary>
            Notifies the <see cref="P:Avalonia.AvaloniaProperty.Initialized"/> observable.
            </summary>
            <param name="e">The observable arguments.</param>
        </member>
        <member name="M:Avalonia.AvaloniaProperty.NotifyChanged(Avalonia.AvaloniaPropertyChangedEventArgs)">
            <summary>
            Notifies the <see cref="P:Avalonia.AvaloniaProperty.Changed"/> observable.
            </summary>
            <param name="e">The observable arguments.</param>
        </member>
        <member name="M:Avalonia.AvaloniaProperty.OverrideMetadata(System.Type,Avalonia.PropertyMetadata)">
            <summary>
            Overrides the metadata for the property on the specified type.
            </summary>
            <param name="type">The type.</param>
            <param name="metadata">The metadata.</param>
        </member>
        <member name="T:Avalonia.UnsetValueType">
            <summary>
            Class representing the <see cref="F:Avalonia.AvaloniaProperty.UnsetValue"/>.
            </summary>
        </member>
        <member name="M:Avalonia.UnsetValueType.ToString">
            <summary>
            Returns the string representation of the <see cref="F:Avalonia.AvaloniaProperty.UnsetValue"/>.
            </summary>
            <returns>The string "(unset)".</returns>
        </member>
        <member name="T:Avalonia.AvaloniaPropertyChangedEventArgs">
            <summary>
            Provides information for a avalonia property change.
            </summary>
        </member>
        <member name="M:Avalonia.AvaloniaPropertyChangedEventArgs.#ctor(Avalonia.AvaloniaObject,Avalonia.AvaloniaProperty,System.Object,System.Object,Avalonia.Data.BindingPriority)">
            <summary>
            Initializes a new instance of the <see cref="T:Avalonia.AvaloniaPropertyChangedEventArgs"/> class.
            </summary>
            <param name="sender">The object that the property changed on.</param>
            <param name="property">The property that changed.</param>
            <param name="oldValue">The old value of the property.</param>
            <param name="newValue">The new value of the property.</param>
            <param name="priority">The priority of the binding that produced the value.</param>
        </member>
        <member name="P:Avalonia.AvaloniaPropertyChangedEventArgs.Sender">
            <summary>
            Gets the <see cref="T:Avalonia.AvaloniaObject"/> that the property changed on.
            </summary>
            <value>The sender object.</value>
        </member>
        <member name="P:Avalonia.AvaloniaPropertyChangedEventArgs.Property">
            <summary>
            Gets the property that changed.
            </summary>
            <value>
            The property that changed.
            </value>
        </member>
        <member name="P:Avalonia.AvaloniaPropertyChangedEventArgs.OldValue">
            <summary>
            Gets the old value of the property.
            </summary>
            <value>
            The old value of the property.
            </value>
        </member>
        <member name="P:Avalonia.AvaloniaPropertyChangedEventArgs.NewValue">
            <summary>
            Gets the new value of the property.
            </summary>
            <value>
            The new value of the property.
            </value>
        </member>
        <member name="P:Avalonia.AvaloniaPropertyChangedEventArgs.Priority">
            <summary>
            Gets the priority of the binding that produced the value.
            </summary>
            <value>
            The priority of the binding that produced the value.
            </value>
        </member>
        <member name="T:Avalonia.AvaloniaPropertyRegistry">
            <summary>
            Tracks registered <see cref="T:Avalonia.AvaloniaProperty"/> instances.
            </summary>
        </member>
        <member name="P:Avalonia.AvaloniaPropertyRegistry.Instance">
            <summary>
            Gets the <see cref="T:Avalonia.AvaloniaPropertyRegistry"/> instance
            </summary>
        </member>
        <member name="P:Avalonia.AvaloniaPropertyRegistry.Properties">
            <summary>
            Gets a list of all registered properties.
            </summary>
        </member>
        <member name="M:Avalonia.AvaloniaPropertyRegistry.GetRegistered(System.Type)">
            <summary>
            Gets all non-attached <see cref="T:Avalonia.AvaloniaProperty"/>s registered on a type.
            </summary>
            <param name="type">The type.</param>
            <returns>A collection of <see cref="T:Avalonia.AvaloniaProperty"/> definitions.</returns>
        </member>
        <member name="M:Avalonia.AvaloniaPropertyRegistry.GetRegisteredAttached(System.Type)">
            <summary>
            Gets all attached <see cref="T:Avalonia.AvaloniaProperty"/>s registered on a type.
            </summary>
            <param name="type">The type.</param>
            <returns>A collection of <see cref="T:Avalonia.AvaloniaProperty"/> definitions.</returns>
        </member>
        <member name="M:Avalonia.AvaloniaPropertyRegistry.GetRegisteredInherited(System.Type)">
            <summary>
            Gets all inherited <see cref="T:Avalonia.AvaloniaProperty"/>s registered on a type.
            </summary>
            <param name="type">The type.</param>
            <returns>A collection of <see cref="T:Avalonia.AvaloniaProperty"/> definitions.</returns>
        </member>
        <member name="M:Avalonia.AvaloniaPropertyRegistry.GetRegistered(Avalonia.AvaloniaObject)">
            <summary>
            Gets all <see cref="T:Avalonia.AvaloniaProperty"/>s registered on a object.
            </summary>
            <param name="o">The object.</param>
            <returns>A collection of <see cref="T:Avalonia.AvaloniaProperty"/> definitions.</returns>
        </member>
        <member name="M:Avalonia.AvaloniaPropertyRegistry.FindRegistered(System.Type,System.String)">
            <summary>
            Finds a registered property on a type by name.
            </summary>
            <param name="type">The type.</param>
            <param name="name">The property name.</param>
            <returns>
            The registered property or null if no matching property found.
            </returns>
            <exception cref="T:System.InvalidOperationException">
            The property name contains a '.'.
            </exception>
        </member>
        <member name="M:Avalonia.AvaloniaPropertyRegistry.FindRegistered(Avalonia.AvaloniaObject,System.String)">
            <summary>
            Finds a registered property on an object by name.
            </summary>
            <param name="o">The object.</param>
            <param name="name">The property name.</param>
            <returns>
            The registered property or null if no matching property found.
            </returns>
            <exception cref="T:System.InvalidOperationException">
            The property name contains a '.'.
            </exception>
        </member>
        <member name="M:Avalonia.AvaloniaPropertyRegistry.FindRegistered(System.Int32)">
            <summary>
            Finds a registered property by Id.
            </summary>
            <param name="id">The property Id.</param>
            <returns>The registered property or null if no matching property found.</returns>
        </member>
        <member name="M:Avalonia.AvaloniaPropertyRegistry.IsRegistered(System.Type,Avalonia.AvaloniaProperty)">
            <summary>
            Checks whether a <see cref="T:Avalonia.AvaloniaProperty"/> is registered on a type.
            </summary>
            <param name="type">The type.</param>
            <param name="property">The property.</param>
            <returns>True if the property is registered, otherwise false.</returns>
        </member>
        <member name="M:Avalonia.AvaloniaPropertyRegistry.IsRegistered(System.Object,Avalonia.AvaloniaProperty)">
            <summary>
            Checks whether a <see cref="T:Avalonia.AvaloniaProperty"/> is registered on a object.
            </summary>
            <param name="o">The object.</param>
            <param name="property">The property.</param>
            <returns>True if the property is registered, otherwise false.</returns>
        </member>
        <member name="M:Avalonia.AvaloniaPropertyRegistry.Register(System.Type,Avalonia.AvaloniaProperty)">
            <summary>
            Registers a <see cref="T:Avalonia.AvaloniaProperty"/> on a type.
            </summary>
            <param name="type">The type.</param>
            <param name="property">The property.</param>
            <remarks>
            You won't usually want to call this method directly, instead use the
            <see cref="M:Avalonia.AvaloniaProperty.Register``2(System.String,``1,System.Boolean,Avalonia.Data.BindingMode,System.Func{``0,``1,``1},System.Action{Avalonia.IAvaloniaObject,System.Boolean})"/>
            method.
            </remarks>
        </member>
        <member name="M:Avalonia.AvaloniaPropertyRegistry.RegisterAttached(System.Type,Avalonia.AvaloniaProperty)">
            <summary>
            Registers an attached <see cref="T:Avalonia.AvaloniaProperty"/> on a type.
            </summary>
            <param name="type">The type.</param>
            <param name="property">The property.</param>
            <remarks>
            You won't usually want to call this method directly, instead use the
            <see cref="M:Avalonia.AvaloniaProperty.RegisterAttached``2(System.String,System.Type,``1,System.Boolean,Avalonia.Data.BindingMode,System.Func{``0,``1,``1})"/>
            method.
            </remarks>
        </member>
        <member name="T:Avalonia.AvaloniaProperty`1">
            <summary>
            A typed avalonia property.
            </summary>
            <typeparam name="TValue">The value type of the property.</typeparam>
        </member>
        <member name="M:Avalonia.AvaloniaProperty`1.#ctor(System.String,System.Type,Avalonia.PropertyMetadata,System.Action{Avalonia.IAvaloniaObject,System.Boolean})">
            <summary>
            Initializes a new instance of the <see cref="T:Avalonia.AvaloniaProperty`1"/> class.
            </summary>
            <param name="name">The name of the property.</param>
            <param name="ownerType">The type of the class that registers the property.</param>
            <param name="metadata">The property metadata.</param>
            <param name="notifying">A <see cref="P:Avalonia.AvaloniaProperty.Notifying"/> callback.</param>
        </member>
        <member name="M:Avalonia.AvaloniaProperty`1.#ctor(Avalonia.AvaloniaProperty,System.Type,Avalonia.PropertyMetadata)">
            <summary>
            Initializes a new instance of the <see cref="T:Avalonia.AvaloniaProperty"/> class.
            </summary>
            <param name="source">The property to copy.</param>
            <param name="ownerType">The new owner type.</param>
            <param name="metadata">Optional overridden metadata.</param>
        </member>
        <member name="T:Avalonia.BoxedValue`1">
            <summary>
            Represents boxed value of type <typeparamref name="T"/>.
            </summary>
            <typeparam name="T">Type of stored value.</typeparam>
        </member>
        <member name="P:Avalonia.BoxedValue`1.Boxed">
            <summary>
            Boxed value.
            </summary>
        </member>
        <member name="P:Avalonia.BoxedValue`1.Typed">
            <summary>
            Typed value.
            </summary>
        </member>
        <member name="T:Avalonia.Collections.AvaloniaDictionary`2">
            <summary>
            A notifying dictionary.
            </summary>
            <typeparam name="TKey">The type of the dictionary key.</typeparam>
            <typeparam name="TValue">The type of the dictionary value.</typeparam>
        </member>
        <member name="M:Avalonia.Collections.AvaloniaDictionary`2.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Avalonia.Collections.AvaloniaDictionary`2"/> class.
            </summary>
        </member>
        <member name="E:Avalonia.Collections.AvaloniaDictionary`2.CollectionChanged">
            <summary>
            Occurs when the collection changes.
            </summary>
        </member>
        <member name="E:Avalonia.Collections.AvaloniaDictionary`2.PropertyChanged">
            <summary>
            Raised when a property on the collection changes.
            </summary>
        </member>
        <member name="P:Avalonia.Collections.AvaloniaDictionary`2.Count">
            <inheritdoc/>
        </member>
        <member name="P:Avalonia.Collections.AvaloniaDictionary`2.IsReadOnly">
            <inheritdoc/>
        </member>
        <member name="P:Avalonia.Collections.AvaloniaDictionary`2.Keys">
            <inheritdoc/>
        </member>
        <member name="P:Avalonia.Collections.AvaloniaDictionary`2.Values">
            <inheritdoc/>
        </member>
        <member name="P:Avalonia.Collections.AvaloniaDictionary`2.Item(`0)">
            <summary>
            Gets or sets the named resource.
            </summary>
            <param name="key">The resource key.</param>
            <returns>The resource, or null if not found.</returns>
        </member>
        <member name="M:Avalonia.Collections.AvaloniaDictionary`2.Add(`0,`1)">
            <inheritdoc/>
        </member>
        <member name="M:Avalonia.Collections.AvaloniaDictionary`2.Clear">
            <inheritdoc/>
        </member>
        <member name="M:Avalonia.Collections.AvaloniaDictionary`2.ContainsKey(`0)">
            <inheritdoc/>
        </member>
        <member name="M:Avalonia.Collections.AvaloniaDictionary`2.CopyTo(System.Collections.Generic.KeyValuePair{`0,`1}[],System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:Avalonia.Collections.AvaloniaDictionary`2.GetEnumerator">
            <inheritdoc/>
        </member>
        <member name="M:Avalonia.Collections.AvaloniaDictionary`2.Remove(`0)">
            <inheritdoc/>
        </member>
        <member name="M:Avalonia.Collections.AvaloniaDictionary`2.TryGetValue(`0,`1@)">
            <inheritdoc/>
        </member>
        <member name="M:Avalonia.Collections.AvaloniaDictionary`2.System#Collections#IEnumerable#GetEnumerator">
            <inheritdoc/>
        </member>
        <member name="M:Avalonia.Collections.AvaloniaDictionary`2.System#Collections#ICollection#CopyTo(System.Array,System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:Avalonia.Collections.AvaloniaDictionary`2.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{TKey,TValue}}#Add(System.Collections.Generic.KeyValuePair{`0,`1})">
            <inheritdoc/>
        </member>
        <member name="M:Avalonia.Collections.AvaloniaDictionary`2.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{TKey,TValue}}#Contains(System.Collections.Generic.KeyValuePair{`0,`1})">
            <inheritdoc/>
        </member>
        <member name="M:Avalonia.Collections.AvaloniaDictionary`2.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{TKey,TValue}}#Remove(System.Collections.Generic.KeyValuePair{`0,`1})">
            <inheritdoc/>
        </member>
        <member name="M:Avalonia.Collections.AvaloniaDictionary`2.System#Collections#IDictionary#Add(System.Object,System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:Avalonia.Collections.AvaloniaDictionary`2.System#Collections#IDictionary#Contains(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:Avalonia.Collections.AvaloniaDictionary`2.System#Collections#IDictionary#GetEnumerator">
            <inheritdoc/>
        </member>
        <member name="M:Avalonia.Collections.AvaloniaDictionary`2.System#Collections#IDictionary#Remove(System.Object)">
            <inheritdoc/>
        </member>
        <member name="T:Avalonia.Collections.ResetBehavior">
            <summary>
            Describes the action notified on a clear of a <see cref="T:Avalonia.Collections.AvaloniaList`1"/>.
            </summary>
        </member>
        <member name="F:Avalonia.Collections.ResetBehavior.Reset">
            <summary>
            Clearing the list notifies a with a 
            <see cref="F:System.Collections.Specialized.NotifyCollectionChangedAction.Reset"/>.
            </summary>
        </member>
        <member name="F:Avalonia.Collections.ResetBehavior.Remove">
            <summary>
            Clearing the list notifies a with a
            <see cref="F:System.Collections.Specialized.NotifyCollectionChangedAction.Remove"/>.
            </summary>
        </member>
        <member name="T:Avalonia.Collections.AvaloniaList`1">
            <summary>
            A notifying list.
            </summary>
            <typeparam name="T">The type of the list items.</typeparam>
            <remarks>
            <para>
            AvaloniaList is similar to <see cref="T:System.Collections.ObjectModel.ObservableCollection`1"/>
            with a few added features:
            </para>
            
            <list type="bullet">
            <item>
            It can be configured to notify the <see cref="E:Avalonia.Collections.AvaloniaList`1.CollectionChanged"/> event with a
            <see cref="F:System.Collections.Specialized.NotifyCollectionChangedAction.Remove"/> action instead of a
            <see cref="F:System.Collections.Specialized.NotifyCollectionChangedAction.Reset"/> when the list is cleared by
            setting <see cref="P:Avalonia.Collections.AvaloniaList`1.ResetBehavior"/> to <see cref="F:Avalonia.Collections.ResetBehavior.Remove"/>.
            removed
            </item>
            <item>
            A <see cref="P:Avalonia.Collections.AvaloniaList`1.Validate"/> function can be used to validate each item before insertion.
            removed
            </item>
            </list>
            </remarks>
        </member>
        <member name="M:Avalonia.Collections.AvaloniaList`1.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Avalonia.Collections.AvaloniaList`1"/> class.
            </summary>
        </member>
        <member name="M:Avalonia.Collections.AvaloniaList`1.#ctor(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:Avalonia.Collections.AvaloniaList`1"/> class.
            </summary>
            <param name="items">The initial items for the collection.</param>
        </member>
        <member name="M:Avalonia.Collections.AvaloniaList`1.#ctor(`0[])">
            <summary>
            Initializes a new instance of the <see cref="T:Avalonia.Collections.AvaloniaList`1"/> class.
            </summary>
            <param name="items">The initial items for the collection.</param>
        </member>
        <member name="E:Avalonia.Collections.AvaloniaList`1.CollectionChanged">
            <summary>
            Raised when a change is made to the collection's items.
            </summary>
        </member>
        <member name="E:Avalonia.Collections.AvaloniaList`1.PropertyChanged">
            <summary>
            Raised when a property on the collection changes.
            </summary>
        </member>
        <member name="P:Avalonia.Collections.AvaloniaList`1.Count">
            <summary>
            Gets the number of items in the collection.
            </summary>
        </member>
        <member name="P:Avalonia.Collections.AvaloniaList`1.ResetBehavior">
            <summary>
            Gets or sets the reset behavior of the list.
            </summary>
        </member>
        <member name="P:Avalonia.Collections.AvaloniaList`1.Validate">
            <summary>
            Gets or sets a validation routine that can be used to validate items before they are
            added.
            </summary>
        </member>
        <member name="P:Avalonia.Collections.AvaloniaList`1.System#Collections#IList#IsFixedSize">
            <inheritdoc/>
        </member>
        <member name="P:Avalonia.Collections.AvaloniaList`1.System#Collections#IList#IsReadOnly">
            <inheritdoc/>
        </member>
        <member name="P:Avalonia.Collections.AvaloniaList`1.System#Collections#ICollection#Count">
            <inheritdoc/>
        </member>
        <member name="P:Avalonia.Collections.AvaloniaList`1.System#Collections#ICollection#IsSynchronized">
            <inheritdoc/>
        </member>
        <member name="P:Avalonia.Collections.AvaloniaList`1.System#Collections#ICollection#SyncRoot">
            <inheritdoc/>
        </member>
        <member name="P:Avalonia.Collections.AvaloniaList`1.System#Collections#Generic#ICollection{T}#IsReadOnly">
            <inheritdoc/>
        </member>
        <member name="P:Avalonia.Collections.AvaloniaList`1.Item(System.Int32)">
            <summary>
            Gets or sets the item at the specified index.
            </summary>
            <param name="index">The index.</param>
            <returns>The item.</returns>
        </member>
        <member name="P:Avalonia.Collections.AvaloniaList`1.System#Collections#IList#Item(System.Int32)">
            <summary>
            Gets or sets the item at the specified index.
            </summary>
            <param name="index">The index.</param>
            <returns>The item.</returns>
        </member>
        <member name="M:Avalonia.Collections.AvaloniaList`1.Add(`0)">
            <summary>
            Adds an item to the collection.
            </summary>
            <param name="item">The item.</param>
        </member>
        <member name="M:Avalonia.Collections.AvaloniaList`1.AddRange(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Adds multiple items to the collection.
            </summary>
            <param name="items">The items.</param>
        </member>
        <member name="M:Avalonia.Collections.AvaloniaList`1.Clear">
            <summary>
            Removes all items from the collection.
            </summary>
        </member>
        <member name="M:Avalonia.Collections.AvaloniaList`1.Contains(`0)">
            <summary>
            Tests if the collection contains the specified item.
            </summary>
            <param name="item">The item.</param>
            <returns>True if the collection contains the item; otherwise false.</returns>
        </member>
        <member name="M:Avalonia.Collections.AvaloniaList`1.CopyTo(`0[],System.Int32)">
            <summary>
            Copies the collection's contents to an array.
            </summary>
            <param name="array">The array.</param>
            <param name="arrayIndex">The first index of the array to copy to.</param>
        </member>
        <member name="M:Avalonia.Collections.AvaloniaList`1.System#Collections#Generic#IEnumerable{T}#GetEnumerator">
            <summary>
            Returns an enumerator that enumerates the items in the collection.
            </summary>
            <returns>An <see cref="T:System.Collections.Generic.IEnumerator`1"/>.</returns>
        </member>
        <member name="M:Avalonia.Collections.AvaloniaList`1.System#Collections#IEnumerable#GetEnumerator">
            <inheritdoc/>
        </member>
        <member name="M:Avalonia.Collections.AvaloniaList`1.GetRange(System.Int32,System.Int32)">
            <summary>
            Gets a range of items from the collection.
            </summary>
            <param name="index">The first index to remove.</param>
            <param name="count">The number of items to remove.</param>
        </member>
        <member name="M:Avalonia.Collections.AvaloniaList`1.IndexOf(`0)">
            <summary>
            Gets the index of the specified item in the collection.
            </summary>
            <param name="item">The item.</param>
            <returns>
            The index of the item or -1 if the item is not contained in the collection.
            </returns>
        </member>
        <member name="M:Avalonia.Collections.AvaloniaList`1.Insert(System.Int32,`0)">
            <summary>
            Inserts an item at the specified index.
            </summary>
            <param name="index">The index.</param>
            <param name="item">The item.</param>
        </member>
        <member name="M:Avalonia.Collections.AvaloniaList`1.InsertRange(System.Int32,System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Inserts multiple items at the specified index.
            </summary>
            <param name="index">The index.</param>
            <param name="items">The items.</param>
        </member>
        <member name="M:Avalonia.Collections.AvaloniaList`1.Move(System.Int32,System.Int32)">
            <summary>
            Moves an item to a new index.
            </summary>
            <param name="oldIndex">The index of the item to move.</param>
            <param name="newIndex">The index to move the item to.</param>
        </member>
        <member name="M:Avalonia.Collections.AvaloniaList`1.MoveRange(System.Int32,System.Int32,System.Int32)">
            <summary>
            Moves multiple items to a new index.
            </summary>
            <param name="oldIndex">The first index of the items to move.</param>
            <param name="count">The number of items to move.</param>
            <param name="newIndex">The index to move the items to.</param>
        </member>
        <member name="M:Avalonia.Collections.AvaloniaList`1.Remove(`0)">
            <summary>
            Removes an item from the collection.
            </summary>
            <param name="item">The item.</param>
            <returns>True if the item was found and removed, otherwise false.</returns>
        </member>
        <member name="M:Avalonia.Collections.AvaloniaList`1.RemoveAll(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Removes multiple items from the collection.
            </summary>
            <param name="items">The items.</param>
        </member>
        <member name="M:Avalonia.Collections.AvaloniaList`1.RemoveAt(System.Int32)">
            <summary>
            Removes the item at the specified index.
            </summary>
            <param name="index">The index.</param>
        </member>
        <member name="M:Avalonia.Collections.AvaloniaList`1.RemoveRange(System.Int32,System.Int32)">
            <summary>
            Removes a range of elements from the collection.
            </summary>
            <param name="index">The first index to remove.</param>
            <param name="count">The number of items to remove.</param>
        </member>
        <member name="M:Avalonia.Collections.AvaloniaList`1.System#Collections#IList#Add(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:Avalonia.Collections.AvaloniaList`1.System#Collections#IList#Contains(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:Avalonia.Collections.AvaloniaList`1.System#Collections#IList#Clear">
            <inheritdoc/>
        </member>
        <member name="M:Avalonia.Collections.AvaloniaList`1.System#Collections#IList#IndexOf(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:Avalonia.Collections.AvaloniaList`1.System#Collections#IList#Insert(System.Int32,System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:Avalonia.Collections.AvaloniaList`1.System#Collections#IList#Remove(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:Avalonia.Collections.AvaloniaList`1.System#Collections#IList#RemoveAt(System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:Avalonia.Collections.AvaloniaList`1.System#Collections#ICollection#CopyTo(System.Array,System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:Avalonia.Collections.AvaloniaList`1.Avalonia#Diagnostics#INotifyCollectionChangedDebug#GetCollectionChangedSubscribers">
            <inheritdoc/>
        </member>
        <member name="M:Avalonia.Collections.AvaloniaList`1.NotifyAdd(System.Collections.IList,System.Int32)">
            <summary>
            Raises the <see cref="E:Avalonia.Collections.AvaloniaList`1.CollectionChanged"/> event with an add action.
            </summary>
            <param name="t">The items that were added.</param>
            <param name="index">The starting index.</param>
        </member>
        <member name="M:Avalonia.Collections.AvaloniaList`1.NotifyAdd(`0,System.Int32)">
            <summary>
            Raises the <see cref="E:Avalonia.Collections.AvaloniaList`1.CollectionChanged"/> event with a add action.
            </summary>
            <param name="item">The item that was added.</param>
            <param name="index">The starting index.</param>
        </member>
        <member name="M:Avalonia.Collections.AvaloniaList`1.NotifyCountChanged">
            <summary>
            Raises the <see cref="E:Avalonia.Collections.AvaloniaList`1.PropertyChanged"/> event when the <see cref="P:Avalonia.Collections.AvaloniaList`1.Count"/> property
            changes.
            </summary>
        </member>
        <member name="M:Avalonia.Collections.AvaloniaList`1.NotifyRemove(System.Collections.IList,System.Int32)">
            <summary>
            Raises the <see cref="E:Avalonia.Collections.AvaloniaList`1.CollectionChanged"/> event with a remove action.
            </summary>
            <param name="t">The items that were removed.</param>
            <param name="index">The starting index.</param>
        </member>
        <member name="M:Avalonia.Collections.AvaloniaList`1.NotifyRemove(`0,System.Int32)">
            <summary>
            Raises the <see cref="E:Avalonia.Collections.AvaloniaList`1.CollectionChanged"/> event with a remove action.
            </summary>
            <param name="item">The item that was removed.</param>
            <param name="index">The starting index.</param>
        </member>
        <member name="T:Avalonia.Collections.AvaloniaList`1.Enumerator">
            <summary>
            Enumerates the elements of a <see cref="T:Avalonia.Collections.AvaloniaList`1"/>.
            </summary>
        </member>
        <member name="T:Avalonia.Collections.AvaloniaListConverter`1">
            <summary>
            Creates an <see cref="T:Avalonia.Collections.AvaloniaList`1"/> from a string representation.
            </summary>
        </member>
        <member name="T:Avalonia.Collections.AvaloniaListExtensions">
            <summary>
            Defines extension methods for working with <see cref="T:Avalonia.Collections.AvaloniaList`1"/>s.
            </summary>
        </member>
        <member name="M:Avalonia.Collections.AvaloniaListExtensions.ForEachItem``1(Avalonia.Collections.IAvaloniaReadOnlyList{``0},System.Action{``0},System.Action{``0},System.Action,System.Boolean)">
            <summary>
            Invokes an action for each item in a collection and subsequently each item added or
            removed from the collection.
            </summary>
            <typeparam name="T">The type of the collection items.</typeparam>
            <param name="collection">The collection.</param>
            <param name="added">
            An action called initially for each item in the collection and subsequently for each
            item added to the collection. The parameters passed are the index in the collection and
            the item.
            </param>
            <param name="removed">
            An action called for each item removed from the collection. The parameters passed are
            the index in the collection and the item.
            </param>
            <param name="reset">
            An action called when the collection is reset.
            </param>
            <param name="weakSubscription">
            Indicates if a weak subscription should be used to track changes to the collection.
            </param>
            <returns>A disposable used to terminate the subscription.</returns>
        </member>
        <member name="M:Avalonia.Collections.AvaloniaListExtensions.ForEachItem``1(Avalonia.Collections.IAvaloniaReadOnlyList{``0},System.Action{System.Int32,``0},System.Action{System.Int32,``0},System.Action,System.Boolean)">
            <summary>
            Invokes an action for each item in a collection and subsequently each item added or
            removed from the collection.
            </summary>
            <typeparam name="T">The type of the collection items.</typeparam>
            <param name="collection">The collection.</param>
            <param name="added">
            An action called initially for each item in the collection and subsequently for each
            item added to the collection. The parameters passed are the index in the collection and
            the item.
            </param>
            <param name="removed">
            An action called for each item removed from the collection. The parameters passed are
            the index in the collection and the item.
            </param>
            <param name="reset">
            An action called when the collection is reset. This will be followed by calls to 
            <paramref name="added"/> for each item present in the collection after the reset.
            </param>
            <param name="weakSubscription">
            Indicates if a weak subscription should be used to track changes to the collection.
            </param>
            <returns>A disposable used to terminate the subscription.</returns>
        </member>
        <member name="M:Avalonia.Collections.AvaloniaListExtensions.TrackItemPropertyChanged``1(Avalonia.Collections.IAvaloniaReadOnlyList{``0},System.Action{System.Tuple{System.Object,System.ComponentModel.PropertyChangedEventArgs}})">
            <summary>
            Listens for property changed events from all items in a collection.
            </summary>
            <typeparam name="T">The type of the collection items.</typeparam>
            <param name="collection">The collection.</param>
            <param name="callback">A callback to call for each property changed event.</param>
            <returns>A disposable used to terminate the subscription.</returns>
        </member>
        <member name="T:Avalonia.Collections.IAvaloniaList`1">
            <summary>
            A notifying list.
            </summary>
            <typeparam name="T">The type of the items in the list.</typeparam>
        </member>
        <member name="P:Avalonia.Collections.IAvaloniaList`1.Count">
            <summary>
            Gets the number of items in the list.
            </summary>
        </member>
        <member name="P:Avalonia.Collections.IAvaloniaList`1.Item(System.Int32)">
            <summary>
            Gets or sets the element at the specified index.
            </summary>
            <param name="index">The index.</param>
            <returns>The element at the requested index.</returns>
        </member>
        <member name="M:Avalonia.Collections.IAvaloniaList`1.AddRange(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Adds multiple items to the collection.
            </summary>
            <param name="items">The items.</param>
        </member>
        <member name="M:Avalonia.Collections.IAvaloniaList`1.InsertRange(System.Int32,System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Inserts multiple items at the specified index.
            </summary>
            <param name="index">The index.</param>
            <param name="items">The items.</param>
        </member>
        <member name="M:Avalonia.Collections.IAvaloniaList`1.Move(System.Int32,System.Int32)">
            <summary>
            Moves an item to a new index.
            </summary>
            <param name="oldIndex">The index of the item to move.</param>
            <param name="newIndex">The index to move the item to.</param>
        </member>
        <member name="M:Avalonia.Collections.IAvaloniaList`1.MoveRange(System.Int32,System.Int32,System.Int32)">
            <summary>
            Moves multiple items to a new index.
            </summary>
            <param name="oldIndex">The first index of the items to move.</param>
            <param name="count">The number of items to move.</param>
            <param name="newIndex">The index to move the items to.</param>
        </member>
        <member name="M:Avalonia.Collections.IAvaloniaList`1.RemoveAll(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Removes multiple items from the collection.
            </summary>
            <param name="items">The items.</param>
        </member>
        <member name="M:Avalonia.Collections.IAvaloniaList`1.RemoveRange(System.Int32,System.Int32)">
            <summary>
            Removes a range of elements from the collection.
            </summary>
            <param name="index">The first index to remove.</param>
            <param name="count">The number of items to remove.</param>
        </member>
        <member name="T:Avalonia.Collections.IAvaloniaReadOnlyList`1">
            <summary>
            A read-only notifying list.
            </summary>
            <typeparam name="T">The type of the items in the list.</typeparam>
        </member>
        <member name="M:Avalonia.Collections.NotifyCollectionChangedExtensions.GetWeakCollectionChangedObservable(System.Collections.Specialized.INotifyCollectionChanged)">
            <summary>
            Gets a weak observable for the CollectionChanged event.
            </summary>
            <param name="collection">The collection.</param>
            <returns>An observable.</returns>
        </member>
        <member name="M:Avalonia.Collections.NotifyCollectionChangedExtensions.WeakSubscribe(System.Collections.Specialized.INotifyCollectionChanged,System.Collections.Specialized.NotifyCollectionChangedEventHandler)">
            <summary>
            Subscribes to the CollectionChanged event using a weak subscription.
            </summary>
            <param name="collection">The collection.</param>
            <param name="handler">
            An action called when the collection event is raised.
            </param>
            <returns>A disposable used to terminate the subscription.</returns>
        </member>
        <member name="M:Avalonia.Collections.NotifyCollectionChangedExtensions.WeakSubscribe(System.Collections.Specialized.INotifyCollectionChanged,System.Action{System.Collections.Specialized.NotifyCollectionChangedEventArgs})">
            <summary>
            Subscribes to the CollectionChanged event using a weak subscription.
            </summary>
            <param name="collection">The collection.</param>
            <param name="handler">
            An action called when the collection event is raised.
            </param>
            <returns>A disposable used to terminate the subscription.</returns>
        </member>
        <member name="T:Avalonia.Contract">
            <summary>
            A stub of Code Contract's Contract class.
            </summary>
            <remarks>
            It would be nice to use Code Contracts on Avalonia but last time I tried it slowed things
            to a crawl and often crashed. Instead use the same signature for checking preconditions
            in the hope that it might become usable at some point.
            </remarks>
        </member>
        <member name="M:Avalonia.Contract.Requires``1(System.Boolean)">
            <summary>
            Specifies a precondition.
            </summary>
            <typeparam name="TException">
            The exception to throw if <paramref name="condition"/> is false.
            </typeparam>
            <param name="condition">The precondition.</param>
        </member>
        <member name="T:Avalonia.Data.AssignBindingAttribute">
            <summary>
            Signifies that a binding can be assigned to a property.
            </summary>
            <remarks>
            Usually in markup, when a binding is set for a property that property will be bound. 
            Applying this attribute to a property indicates that the binding should be assigned to 
            the property rather than bound.
            </remarks>
        </member>
        <member name="T:Avalonia.Data.BindingChainException">
            <summary>
            An exception returned through <see cref="T:Avalonia.Data.BindingNotification"/> signaling that a
            requested binding expression could not be evaluated because of a null in one of the links
            of the binding chain.
            </summary>
        </member>
        <member name="M:Avalonia.Data.BindingChainException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Avalonia.Data.BindingChainException"/> class.
            </summary>
        </member>
        <member name="M:Avalonia.Data.BindingChainException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Avalonia.Data.BindingChainException"/> class.
            </summary>
            <param name="message">The error message.</param>
        </member>
        <member name="M:Avalonia.Data.BindingChainException.#ctor(System.String,System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Avalonia.Data.BindingChainException"/> class.
            </summary>
            <param name="message">The error message.</param>
            <param name="expression">The expression.</param>
            <param name="errorPoint">
            The point in the expression at which the error was encountered.
            </param>
        </member>
        <member name="P:Avalonia.Data.BindingChainException.Expression">
            <summary>
            Gets the expression that could not be evaluated.
            </summary>
        </member>
        <member name="P:Avalonia.Data.BindingChainException.ExpressionErrorPoint">
            <summary>
            Gets the point in the expression at which the error occurred.
            </summary>
        </member>
        <member name="P:Avalonia.Data.BindingChainException.Message">
            <inheritdoc/>
        </member>
        <member name="T:Avalonia.Data.BindingMode">
            <summary>
            Defines possible binding modes.
            </summary>
        </member>
        <member name="F:Avalonia.Data.BindingMode.Default">
            <summary>
            Uses the default binding mode specified for the property.
            </summary>
        </member>
        <member name="F:Avalonia.Data.BindingMode.OneWay">
            <summary>
            Binds one way from source to target.
            </summary>
        </member>
        <member name="F:Avalonia.Data.BindingMode.TwoWay">
            <summary>
            Binds two-way with the initial value coming from the target.
            </summary>
        </member>
        <member name="F:Avalonia.Data.BindingMode.OneTime">
            <summary>
            Updates the target when the application starts or when the data context changes.
            </summary>
        </member>
        <member name="F:Avalonia.Data.BindingMode.OneWayToSource">
            <summary>
            Binds one way from target to source.
            </summary>
        </member>
        <member name="T:Avalonia.Data.BindingErrorType">
            <summary>
            Defines the types of binding errors for a <see cref="T:Avalonia.Data.BindingNotification"/>.
            </summary>
        </member>
        <member name="F:Avalonia.Data.BindingErrorType.None">
            <summary>
            There was no error.
            </summary>
        </member>
        <member name="F:Avalonia.Data.BindingErrorType.Error">
            <summary>
            There was a binding error.
            </summary>
        </member>
        <member name="F:Avalonia.Data.BindingErrorType.DataValidationError">
            <summary>
            There was a data validation error.
            </summary>
        </member>
        <member name="T:Avalonia.Data.BindingNotification">
            <summary>
            Represents a binding notification that can be a valid binding value, or a binding or
            data validation error.
            </summary>
        </member>
        <member name="F:Avalonia.Data.BindingNotification.Null">
            <summary>
            A binding notification representing the null value.
            </summary>
        </member>
        <member name="F:Avalonia.Data.BindingNotification.UnsetValue">
            <summary>
            A binding notification representing <see cref="F:Avalonia.AvaloniaProperty.UnsetValue"/>.
            </summary>
        </member>
        <member name="M:Avalonia.Data.BindingNotification.#ctor(System.Object)">
            <summary>
            Initializes a new instance of the <see cref="T:Avalonia.Data.BindingNotification"/> class.
            </summary>
            <param name="value">The binding value.</param>
        </member>
        <member name="M:Avalonia.Data.BindingNotification.#ctor(System.Exception,Avalonia.Data.BindingErrorType)">
            <summary>
            Initializes a new instance of the <see cref="T:Avalonia.Data.BindingNotification"/> class.
            </summary>
            <param name="error">The binding error.</param>
            <param name="errorType">The type of the binding error.</param>
        </member>
        <member name="M:Avalonia.Data.BindingNotification.#ctor(System.Exception,Avalonia.Data.BindingErrorType,System.Object)">
            <summary>
            Initializes a new instance of the <see cref="T:Avalonia.Data.BindingNotification"/> class.
            </summary>
            <param name="error">The binding error.</param>
            <param name="errorType">The type of the binding error.</param>
            <param name="fallbackValue">The fallback value.</param>
        </member>
        <member name="P:Avalonia.Data.BindingNotification.Value">
            <summary>
            Gets the value that should be passed to the target when <see cref="P:Avalonia.Data.BindingNotification.HasValue"/>
            is true.
            </summary>
            <remarks>
            If this property is read when <see cref="P:Avalonia.Data.BindingNotification.HasValue"/> is false then it will return
            <see cref="F:Avalonia.AvaloniaProperty.UnsetValue"/>.
            </remarks>
        </member>
        <member name="P:Avalonia.Data.BindingNotification.HasValue">
            <summary>
            Gets a value indicating whether <see cref="P:Avalonia.Data.BindingNotification.Value"/> should be pushed to the target.
            </summary>
        </member>
        <member name="P:Avalonia.Data.BindingNotification.Error">
            <summary>
            Gets the error that occurred on the source, if any.
            </summary>
        </member>
        <member name="P:Avalonia.Data.BindingNotification.ErrorType">
            <summary>
            Gets the type of error that <see cref="P:Avalonia.Data.BindingNotification.Error"/> represents, if any.
            </summary>
        </member>
        <member name="M:Avalonia.Data.BindingNotification.op_Equality(Avalonia.Data.BindingNotification,Avalonia.Data.BindingNotification)">
            <summary>
            Compares two instances of <see cref="T:Avalonia.Data.BindingNotification"/> for equality.
            </summary>
            <param name="a">The first instance.</param>
            <param name="b">The second instance.</param>
            <returns>true if the two instances are equal; otherwise false.</returns>
        </member>
        <member name="M:Avalonia.Data.BindingNotification.op_Inequality(Avalonia.Data.BindingNotification,Avalonia.Data.BindingNotification)">
            <summary>
            Compares two instances of <see cref="T:Avalonia.Data.BindingNotification"/> for inequality.
            </summary>
            <param name="a">The first instance.</param>
            <param name="b">The second instance.</param>
            <returns>true if the two instances are unequal; otherwise false.</returns>
        </member>
        <member name="M:Avalonia.Data.BindingNotification.ExtractValue(System.Object)">
            <summary>
            Gets a value from an object that may be a <see cref="T:Avalonia.Data.BindingNotification"/>.
            </summary>
            <param name="o">The object.</param>
            <returns>The value.</returns>
            <remarks>
            If <paramref name="o"/> is a <see cref="T:Avalonia.Data.BindingNotification"/> then returns the binding
            notification's <see cref="P:Avalonia.Data.BindingNotification.Value"/>. If not, returns the object unchanged.
            </remarks>
        </member>
        <member name="M:Avalonia.Data.BindingNotification.ExtractError(System.Object)">
            <summary>
            Gets an exception from an object that may be a <see cref="T:Avalonia.Data.BindingNotification"/>.
            </summary>
            <param name="o">The object.</param>
            <returns>The value.</returns>
            <remarks>
            If <paramref name="o"/> is a <see cref="T:Avalonia.Data.BindingNotification"/> then returns the binding
            notification's <see cref="P:Avalonia.Data.BindingNotification.Error"/>. If not, returns the object unchanged.
            </remarks>
        </member>
        <member name="M:Avalonia.Data.BindingNotification.Equals(System.Object)">
            <summary>
            Compares an object to an instance of <see cref="T:Avalonia.Data.BindingNotification"/> for equality.
            </summary>
            <param name="obj">The object to compare.</param>
            <returns>true if the two instances are equal; otherwise false.</returns>
        </member>
        <member name="M:Avalonia.Data.BindingNotification.Equals(Avalonia.Data.BindingNotification)">
            <summary>
            Compares a value to an instance of <see cref="T:Avalonia.Data.BindingNotification"/> for equality.
            </summary>
            <param name="other">The value to compare.</param>
            <returns>true if the two instances are equal; otherwise false.</returns>
        </member>
        <member name="M:Avalonia.Data.BindingNotification.GetHashCode">
            <summary>
            Gets the hash code for this instance of <see cref="T:Avalonia.Data.BindingNotification"/>. 
            </summary>
            <returns>A hash code.</returns>
        </member>
        <member name="M:Avalonia.Data.BindingNotification.AddError(System.Exception,Avalonia.Data.BindingErrorType)">
            <summary>
            Adds an error to the <see cref="T:Avalonia.Data.BindingNotification"/>.
            </summary>
            <param name="e">The error to add.</param>
            <param name="type">The error type.</param>
        </member>
        <member name="M:Avalonia.Data.BindingNotification.ClearValue">
            <summary>
            Removes the <see cref="P:Avalonia.Data.BindingNotification.Value"/> and makes <see cref="P:Avalonia.Data.BindingNotification.HasValue"/> return null.
            </summary>
        </member>
        <member name="M:Avalonia.Data.BindingNotification.SetValue(System.Object)">
            <summary>
            Sets the <see cref="P:Avalonia.Data.BindingNotification.Value"/>.
            </summary>
        </member>
        <member name="M:Avalonia.Data.BindingNotification.ToString">
            <inheritdoc/>
        </member>
        <member name="M:Avalonia.Data.BindingOperations.Apply(Avalonia.IAvaloniaObject,Avalonia.AvaloniaProperty,Avalonia.Data.InstancedBinding,System.Object)">
            <summary>
            Applies an <see cref="T:Avalonia.Data.InstancedBinding"/> a property on an <see cref="T:Avalonia.IAvaloniaObject"/>.
            </summary>
            <param name="target">The target object.</param>
            <param name="property">The property to bind.</param>
            <param name="binding">The instanced binding.</param>
            <param name="anchor">
            An optional anchor from which to locate required context. When binding to objects that
            are not in the logical tree, certain types of binding need an anchor into the tree in 
            order to locate named controls or resources. The <paramref name="anchor"/> parameter 
            can be used to provide this context.
            </param>
            <returns>An <see cref="T:System.IDisposable"/> which can be used to cancel the binding.</returns>
        </member>
        <member name="T:Avalonia.Data.BindingPriority">
            <summary>
            The priority of a binding.
            </summary>
        </member>
        <member name="F:Avalonia.Data.BindingPriority.Animation">
            <summary>
            A value that comes from an animation.
            </summary>
        </member>
        <member name="F:Avalonia.Data.BindingPriority.LocalValue">
            <summary>
            A local value.
            </summary>
        </member>
        <member name="F:Avalonia.Data.BindingPriority.StyleTrigger">
            <summary>
            A triggered style binding.
            </summary>
            <remarks>
            A style trigger is a selector such as .class which overrides a
            <see cref="F:Avalonia.Data.BindingPriority.TemplatedParent"/> binding. In this way, a basic control can have
            for example a Background from the templated parent which changes when the
            control has the :pointerover class.
            </remarks>
        </member>
        <member name="F:Avalonia.Data.BindingPriority.TemplatedParent">
            <summary>
            A binding to a property on the templated parent.
            </summary>
        </member>
        <member name="F:Avalonia.Data.BindingPriority.Style">
            <summary>
            A style binding.
            </summary>
        </member>
        <member name="F:Avalonia.Data.BindingPriority.Unset">
            <summary>
            The binding is uninitialized.
            </summary>
        </member>
        <member name="T:Avalonia.Data.Converters.BoolConverters">
            <summary>
            Provides a set of useful <see cref="T:Avalonia.Data.Converters.IValueConverter"/>s for working with string values.
            </summary>
        </member>
        <member name="F:Avalonia.Data.Converters.BoolConverters.And">
            <summary>
            A multi-value converter that returns true if all inputs are true.
            </summary>
        </member>
        <member name="T:Avalonia.Data.Converters.DefaultValueConverter">
            <summary>
            Provides a default set of value conversions for bindings that do not specify a value
            converter.
            </summary>
        </member>
        <member name="F:Avalonia.Data.Converters.DefaultValueConverter.Instance">
            <summary>
            Gets an instance of a <see cref="T:Avalonia.Data.Converters.DefaultValueConverter"/>.
            </summary>
        </member>
        <member name="M:Avalonia.Data.Converters.DefaultValueConverter.Convert(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Converts a value.
            </summary>
            <param name="value">The value to convert.</param>
            <param name="targetType">The type of the target.</param>
            <param name="parameter">A user-defined parameter.</param>
            <param name="culture">The culture to use.</param>
            <returns>The converted value.</returns>
        </member>
        <member name="M:Avalonia.Data.Converters.DefaultValueConverter.ConvertBack(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Converts a value.
            </summary>
            <param name="value">The value to convert.</param>
            <param name="targetType">The type of the target.</param>
            <param name="parameter">A user-defined parameter.</param>
            <param name="culture">The culture to use.</param>
            <returns>The converted value.</returns>
        </member>
        <member name="T:Avalonia.Data.Converters.FuncMultiValueConverter`2">
            <summary>
            A general purpose <see cref="T:Avalonia.Data.Converters.IValueConverter"/> that uses a <see cref="T:System.Func`2"/>
            to provide the converter logic.
            </summary>
            <typeparam name="TIn">The type of the inputs.</typeparam>
            <typeparam name="TOut">The output type.</typeparam>
        </member>
        <member name="M:Avalonia.Data.Converters.FuncMultiValueConverter`2.#ctor(System.Func{System.Collections.Generic.IEnumerable{`0},`1})">
            <summary>
            Initializes a new instance of the <see cref="T:Avalonia.Data.Converters.FuncValueConverter`2"/> class.
            </summary>
            <param name="convert">The convert function.</param>
        </member>
        <member name="M:Avalonia.Data.Converters.FuncMultiValueConverter`2.Convert(System.Collections.Generic.IList{System.Object},System.Type,System.Object,System.Globalization.CultureInfo)">
            <inheritdoc/>
        </member>
        <member name="T:Avalonia.Data.Converters.FuncValueConverter`2">
            <summary>
            A general purpose <see cref="T:Avalonia.Data.Converters.IValueConverter"/> that uses a <see cref="T:System.Func`2"/>
            to provide the converter logic.
            </summary>
            <typeparam name="TIn">The input type.</typeparam>
            <typeparam name="TOut">The output type.</typeparam>
        </member>
        <member name="M:Avalonia.Data.Converters.FuncValueConverter`2.#ctor(System.Func{`0,`1})">
            <summary>
            Initializes a new instance of the <see cref="T:Avalonia.Data.Converters.FuncValueConverter`2"/> class.
            </summary>
            <param name="convert">The convert function.</param>
        </member>
        <member name="M:Avalonia.Data.Converters.FuncValueConverter`2.Convert(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <inheritdoc/>
        </member>
        <member name="M:Avalonia.Data.Converters.FuncValueConverter`2.ConvertBack(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <inheritdoc/>
        </member>
        <member name="T:Avalonia.Data.Converters.IMultiValueConverter">
            <summary>
            Converts multi-binding inputs to a final value.
            </summary>
        </member>
        <member name="M:Avalonia.Data.Converters.IMultiValueConverter.Convert(System.Collections.Generic.IList{System.Object},System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Converts multi-binding inputs to a final value.
            </summary>
            <param name="values">The values to convert.</param>
            <param name="targetType">The type of the target.</param>
            <param name="parameter">A user-defined parameter.</param>
            <param name="culture">The culture to use.</param>
            <returns>The converted value.</returns>
            <remarks>
            This method should not throw exceptions. If the value is not convertible, return
            <see cref="F:Avalonia.AvaloniaProperty.UnsetValue"/>. Any exception thrown will be treated as
            an application exception.
            </remarks>
        </member>
        <member name="T:Avalonia.Data.Converters.IValueConverter">
            <summary>
            Converts a binding value.
            </summary>
        </member>
        <member name="M:Avalonia.Data.Converters.IValueConverter.Convert(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Converts a value.
            </summary>
            <param name="value">The value to convert.</param>
            <param name="targetType">The type of the target.</param>
            <param name="parameter">A user-defined parameter.</param>
            <param name="culture">The culture to use.</param>
            <returns>The converted value.</returns>
            <remarks>
            This method should not throw exceptions. If the value is not convertible, return
            a <see cref="T:Avalonia.Data.BindingNotification"/> in an error state. Any exceptions thrown will be
            treated as an application exception.
            </remarks>
        </member>
        <member name="M:Avalonia.Data.Converters.IValueConverter.ConvertBack(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Converts a value.
            </summary>
            <param name="value">The value to convert.</param>
            <param name="targetType">The type of the target.</param>
            <param name="parameter">A user-defined parameter.</param>
            <param name="culture">The culture to use.</param>
            <returns>The converted value.</returns>
            <remarks>
            This method should not throw exceptions. If the value is not convertible, return
            a <see cref="T:Avalonia.Data.BindingNotification"/> in an error state. Any exceptions thrown will be
            treated as an application exception.
            </remarks>
        </member>
        <member name="T:Avalonia.Data.Converters.ObjectConverters">
            <summary>
            Provides a set of useful <see cref="T:Avalonia.Data.Converters.IValueConverter"/>s for working with objects.
            </summary>
        </member>
        <member name="F:Avalonia.Data.Converters.ObjectConverters.IsNull">
            <summary>
            A value converter that returns true if the input object is a null reference.
            </summary>
        </member>
        <member name="F:Avalonia.Data.Converters.ObjectConverters.IsNotNull">
            <summary>
            A value converter that returns true if the input object is not null.
            </summary>
        </member>
        <member name="T:Avalonia.Data.Converters.StringConverters">
            <summary>
            Provides a set of useful <see cref="T:Avalonia.Data.Converters.IValueConverter"/>s for working with string values.
            </summary>
        </member>
        <member name="F:Avalonia.Data.Converters.StringConverters.IsNullOrEmpty">
            <summary>
            A value converter that returns true if the input string is null or an empty string.
            </summary>
        </member>
        <member name="F:Avalonia.Data.Converters.StringConverters.IsNotNullOrEmpty">
            <summary>
            A value converter that returns true if the input string is not null or empty.
            </summary>
        </member>
        <member name="T:Avalonia.Data.Converters.StringFormatMultiValueConverter">
            <summary>
            A multi-value converter which calls <see cref="M:System.String.Format(System.String,System.Object)"/>
            </summary>
        </member>
        <member name="M:Avalonia.Data.Converters.StringFormatMultiValueConverter.#ctor(System.String,Avalonia.Data.Converters.IMultiValueConverter)">
            <summary>
            Initializes a new instance of the <see cref="T:Avalonia.Data.Converters.StringFormatMultiValueConverter"/> class.
            </summary>
            <param name="format">The format string.</param>
            <param name="inner">
            An optional inner converter to be called before the format takes place.
            </param>
        </member>
        <member name="P:Avalonia.Data.Converters.StringFormatMultiValueConverter.Inner">
            <summary>
            Gets an inner value converter which will be called before the string format takes place.
            </summary>
        </member>
        <member name="P:Avalonia.Data.Converters.StringFormatMultiValueConverter.Format">
            <summary>
            Gets the format string.
            </summary>
        </member>
        <member name="M:Avalonia.Data.Converters.StringFormatMultiValueConverter.Convert(System.Collections.Generic.IList{System.Object},System.Type,System.Object,System.Globalization.CultureInfo)">
            <inheritdoc/>
        </member>
        <member name="T:Avalonia.Data.Converters.StringFormatValueConverter">
            <summary>
            A value converter which calls <see cref="M:System.String.Format(System.String,System.Object)"/>
            </summary>
        </member>
        <member name="M:Avalonia.Data.Converters.StringFormatValueConverter.#ctor(System.String,Avalonia.Data.Converters.IValueConverter)">
            <summary>
            Initializes a new instance of the <see cref="T:Avalonia.Data.Converters.StringFormatValueConverter"/> class.
            </summary>
            <param name="format">The format string.</param>
            <param name="inner">
            An optional inner converter to be called before the format takes place.
            </param>
        </member>
        <member name="P:Avalonia.Data.Converters.StringFormatValueConverter.Inner">
            <summary>
            Gets an inner value converter which will be called before the string format takes place.
            </summary>
        </member>
        <member name="P:Avalonia.Data.Converters.StringFormatValueConverter.Format">
            <summary>
            Gets the format string.
            </summary>
        </member>
        <member name="M:Avalonia.Data.Converters.StringFormatValueConverter.Convert(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <inheritdoc/>
        </member>
        <member name="M:Avalonia.Data.Converters.StringFormatValueConverter.ConvertBack(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <inheritdoc/>
        </member>
        <member name="T:Avalonia.Data.Core.BindingExpression">
            <summary>
            Binds to an expression on an object using a type value converter to convert the values
            that are sent and received.
            </summary>
        </member>
        <member name="M:Avalonia.Data.Core.BindingExpression.#ctor(Avalonia.Data.Core.ExpressionObserver,System.Type)">
            <summary>
            Initializes a new instance of the <see cref="T:Avalonia.Data.Core.ExpressionObserver"/> class.
            </summary>
            <param name="inner">The <see cref="T:Avalonia.Data.Core.ExpressionObserver"/>.</param>
            <param name="targetType">The type to convert the value to.</param>
        </member>
        <member name="M:Avalonia.Data.Core.BindingExpression.#ctor(Avalonia.Data.Core.ExpressionObserver,System.Type,Avalonia.Data.Converters.IValueConverter,System.Object,Avalonia.Data.BindingPriority)">
            <summary>
            Initializes a new instance of the <see cref="T:Avalonia.Data.Core.ExpressionObserver"/> class.
            </summary>
            <param name="inner">The <see cref="T:Avalonia.Data.Core.ExpressionObserver"/>.</param>
            <param name="targetType">The type to convert the value to.</param>
            <param name="converter">The value converter to use.</param>
            <param name="converterParameter">
            A parameter to pass to <paramref name="converter"/>.
            </param>
            <param name="priority">The binding priority.</param>
        </member>
        <member name="M:Avalonia.Data.Core.BindingExpression.#ctor(Avalonia.Data.Core.ExpressionObserver,System.Type,System.Object,Avalonia.Data.Converters.IValueConverter,System.Object,Avalonia.Data.BindingPriority)">
            <summary>
            Initializes a new instance of the <see cref="T:Avalonia.Data.Core.ExpressionObserver"/> class.
            </summary>
            <param name="inner">The <see cref="T:Avalonia.Data.Core.ExpressionObserver"/>.</param>
            <param name="targetType">The type to convert the value to.</param>
            <param name="fallbackValue">
            The value to use when the binding is unable to produce a value.
            </param>
            <param name="converter">The value converter to use.</param>
            <param name="converterParameter">
            A parameter to pass to <paramref name="converter"/>.
            </param>
            <param name="priority">The binding priority.</param>
        </member>
        <member name="P:Avalonia.Data.Core.BindingExpression.Converter">
            <summary>
            Gets the converter to use on the expression.
            </summary>
        </member>
        <member name="P:Avalonia.Data.Core.BindingExpression.ConverterParameter">
            <summary>
            Gets a parameter to pass to <see cref="P:Avalonia.Data.Core.BindingExpression.Converter"/>.
            </summary>
        </member>
        <member name="P:Avalonia.Data.Core.BindingExpression.Avalonia#IDescription#Description">
            <inheritdoc/>
        </member>
        <member name="M:Avalonia.Data.Core.BindingExpression.OnCompleted">
            <inheritdoc/>
        </member>
        <member name="M:Avalonia.Data.Core.BindingExpression.OnError(System.Exception)">
            <inheritdoc/>
        </member>
        <member name="M:Avalonia.Data.Core.BindingExpression.OnNext(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:Avalonia.Data.Core.BindingExpression.ConvertValue(System.Object)">
            <inheritdoc/>
        </member>
        <member name="T:Avalonia.Data.Core.ExpressionObserver">
            <summary>
            Observes and sets the value of an expression on an object.
            </summary>
        </member>
        <member name="F:Avalonia.Data.Core.ExpressionObserver.PropertyAccessors">
            <summary>
            An ordered collection of property accessor plugins that can be used to customize
            the reading and subscription of property values on a type.
            </summary>
        </member>
        <member name="F:Avalonia.Data.Core.ExpressionObserver.DataValidators">
            <summary>
            An ordered collection of validation checker plugins that can be used to customize
            the validation of view model and model data.
            </summary>
        </member>
        <member name="F:Avalonia.Data.Core.ExpressionObserver.StreamHandlers">
            <summary>
            An ordered collection of stream plugins that can be used to customize the behavior
            of the '^' stream binding operator.
            </summary>
        </member>
        <member name="M:Avalonia.Data.Core.ExpressionObserver.#ctor(System.Object,Avalonia.Data.Core.ExpressionNode,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Avalonia.Data.Core.ExpressionObserver"/> class.
            </summary>
            <param name="root">The root object.</param>
            <param name="node">The expression.</param>
            <param name="description">
            A description of the expression.
            </param>
        </member>
        <member name="M:Avalonia.Data.Core.ExpressionObserver.#ctor(System.IObservable{System.Object},Avalonia.Data.Core.ExpressionNode,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Avalonia.Data.Core.ExpressionObserver"/> class.
            </summary>
            <param name="rootObservable">An observable which provides the root object.</param>
            <param name="node">The expression.</param>
            <param name="description">
            A description of the expression.
            </param>
        </member>
        <member name="M:Avalonia.Data.Core.ExpressionObserver.#ctor(System.Func{System.Object},Avalonia.Data.Core.ExpressionNode,System.IObservable{System.Reactive.Unit},System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Avalonia.Data.Core.ExpressionObserver"/> class.
            </summary>
            <param name="rootGetter">A function which gets the root object.</param>
            <param name="node">The expression.</param>
            <param name="update">An observable which triggers a re-read of the getter.</param>
            <param name="description">
            A description of the expression.
            </param>
        </member>
        <member name="M:Avalonia.Data.Core.ExpressionObserver.Create``2(``0,System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Boolean,System.String)">
            <summary>
            Creates a new instance of the <see cref="T:Avalonia.Data.Core.ExpressionObserver"/> class.
            </summary>
            <param name="root">The root object.</param>
            <param name="expression">The expression.</param>
            <param name="enableDataValidation">Whether or not to track data validation</param>
            <param name="description">
            A description of the expression. If null, <paramref name="expression"/>'s string representation will be used.
            </param>
        </member>
        <member name="M:Avalonia.Data.Core.ExpressionObserver.Create``2(System.IObservable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Boolean,System.String)">
            <summary>
            Creates a new instance of the <see cref="T:Avalonia.Data.Core.ExpressionObserver"/> class.
            </summary>
            <param name="rootObservable">An observable which provides the root object.</param>
            <param name="expression">The expression.</param>
            <param name="enableDataValidation">Whether or not to track data validation</param>
            <param name="description">
            A description of the expression. If null, <paramref name="expression"/>'s string representation will be used.
            </param>
        </member>
        <member name="M:Avalonia.Data.Core.ExpressionObserver.Create``2(System.Func{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.IObservable{System.Reactive.Unit},System.Boolean,System.String)">
            <summary>
            Creates a new instance of the <see cref="T:Avalonia.Data.Core.ExpressionObserver"/> class.
            </summary>
            <param name="rootGetter">A function which gets the root object.</param>
            <param name="expression">The expression.</param>
            <param name="update">An observable which triggers a re-read of the getter.</param>
            <param name="enableDataValidation">Whether or not to track data validation</param>
            <param name="description">
            A description of the expression. If null, <paramref name="expression"/>'s string representation will be used.
            </param>
        </member>
        <member name="M:Avalonia.Data.Core.ExpressionObserver.SetValue(System.Object,Avalonia.Data.BindingPriority)">
            <summary>
            Attempts to set the value of a property expression.
            </summary>
            <param name="value">The value to set.</param>
            <param name="priority">The binding priority to use.</param>
            <returns>
            True if the value could be set; false if the expression does not evaluate to a 
            property. Note that the <see cref="T:Avalonia.Data.Core.ExpressionObserver"/> must be subscribed to
            before setting the target value can work, as setting the value requires the
            expression to be evaluated.
            </returns>
        </member>
        <member name="P:Avalonia.Data.Core.ExpressionObserver.Description">
            <summary>
            Gets a description of the expression being observed.
            </summary>
        </member>
        <member name="P:Avalonia.Data.Core.ExpressionObserver.Expression">
            <summary>
            Gets the expression being observed.
            </summary>
        </member>
        <member name="P:Avalonia.Data.Core.ExpressionObserver.ResultType">
            <summary>
            Gets the type of the expression result or null if the expression could not be 
            evaluated.
            </summary>
        </member>
        <member name="P:Avalonia.Data.Core.ExpressionObserver.Leaf">
            <summary>
            Gets the leaf node.
            </summary>
        </member>
        <member name="T:Avalonia.Data.Core.ExpressionParseException">
            <summary>
            Exception thrown when <see cref="T:Avalonia.Data.Core.ExpressionObserver"/> could not parse the provided
            expression string.
            </summary>
        </member>
        <member name="M:Avalonia.Data.Core.ExpressionParseException.#ctor(System.Int32,System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:Avalonia.Data.Core.ExpressionParseException"/> class.
            </summary>
            <param name="column">The column position of the error.</param>
            <param name="message">The exception message.</param>
            <param name="innerException">The exception that caused the parsing failure.</param>
        </member>
        <member name="P:Avalonia.Data.Core.ExpressionParseException.Column">
            <summary>
            Gets the column position at which the error occurred.
            </summary>
        </member>
        <member name="T:Avalonia.Data.Core.Plugins.AvaloniaPropertyAccessorPlugin">
            <summary>
            Reads a property from a <see cref="T:Avalonia.AvaloniaObject"/>.
            </summary>
        </member>
        <member name="M:Avalonia.Data.Core.Plugins.AvaloniaPropertyAccessorPlugin.Match(System.Object,System.String)">
            <inheritdoc/>
        </member>
        <member name="M:Avalonia.Data.Core.Plugins.AvaloniaPropertyAccessorPlugin.Start(System.WeakReference{System.Object},System.String)">
            <summary>
            Starts monitoring the value of a property on an object.
            </summary>
            <param name="reference">A weak reference to the object.</param>
            <param name="propertyName">The property name.</param>
            <returns>
            An <see cref="T:Avalonia.Data.Core.Plugins.IPropertyAccessor"/> interface through which future interactions with the 
            property will be made.
            </returns>
        </member>
        <member name="T:Avalonia.Data.Core.Plugins.DataAnnotationsValidationPlugin">
            <summary>
            Validates properties on that have <see cref="T:System.ComponentModel.DataAnnotations.ValidationAttribute"/>s.
            </summary>
        </member>
        <member name="M:Avalonia.Data.Core.Plugins.DataAnnotationsValidationPlugin.Match(System.WeakReference{System.Object},System.String)">
            <inheritdoc/>
        </member>
        <member name="M:Avalonia.Data.Core.Plugins.DataAnnotationsValidationPlugin.Start(System.WeakReference{System.Object},System.String,Avalonia.Data.Core.Plugins.IPropertyAccessor)">
            <inheritdoc/>
        </member>
        <member name="T:Avalonia.Data.Core.Plugins.DataValidationBase">
            <summary>
            Base class for data validators.
            </summary>
            <remarks>
            Data validators are <see cref="T:Avalonia.Data.Core.Plugins.IPropertyAccessor"/>s that are returned from an 
            <see cref="T:Avalonia.Data.Core.Plugins.IDataValidationPlugin"/>. They wrap an inner <see cref="T:Avalonia.Data.Core.Plugins.IPropertyAccessor"/>
            and convert any values received from the inner property accessor into
            <see cref="T:Avalonia.Data.BindingNotification"/>s.
            </remarks>
        </member>
        <member name="M:Avalonia.Data.Core.Plugins.DataValidationBase.#ctor(Avalonia.Data.Core.Plugins.IPropertyAccessor)">
            <summary>
            Initializes a new instance of the <see cref="T:Avalonia.Data.Core.Plugins.DataValidationBase"/> class.
            </summary>
            <param name="inner">The inner property accessor.</param>
        </member>
        <member name="P:Avalonia.Data.Core.Plugins.DataValidationBase.PropertyType">
            <inheritdoc/>
        </member>
        <member name="P:Avalonia.Data.Core.Plugins.DataValidationBase.Value">
            <inheritdoc/>
        </member>
        <member name="M:Avalonia.Data.Core.Plugins.DataValidationBase.SetValue(System.Object,Avalonia.Data.BindingPriority)">
            <inheritdoc/>
        </member>
        <member name="M:Avalonia.Data.Core.Plugins.DataValidationBase.System#IObserver{System#Object}#OnCompleted">
            <summary>
            Should never be called: the inner <see cref="T:Avalonia.Data.Core.Plugins.IPropertyAccessor"/> should never notify
            completion.
            </summary>
        </member>
        <member name="M:Avalonia.Data.Core.Plugins.DataValidationBase.System#IObserver{System#Object}#OnError(System.Exception)">
            <summary>
            Should never be called: the inner <see cref="T:Avalonia.Data.Core.Plugins.IPropertyAccessor"/> should never notify
            an error.
            </summary>
        </member>
        <member name="M:Avalonia.Data.Core.Plugins.DataValidationBase.System#IObserver{System#Object}#OnNext(System.Object)">
            <summary>
            Called when the inner <see cref="T:Avalonia.Data.Core.Plugins.IPropertyAccessor"/> notifies with a new value.
            </summary>
            <param name="value">The value.</param>
        </member>
        <member name="M:Avalonia.Data.Core.Plugins.DataValidationBase.SubscribeCore">
            <summary>
            Begins listening to the inner <see cref="T:Avalonia.Data.Core.Plugins.IPropertyAccessor"/>.
            </summary>
        </member>
        <member name="M:Avalonia.Data.Core.Plugins.DataValidationBase.UnsubscribeCore">
            <inheritdoc/>
        </member>
        <member name="M:Avalonia.Data.Core.Plugins.DataValidationBase.InnerValueChanged(System.Object)">
            <summary>
            Called when the inner <see cref="T:Avalonia.Data.Core.Plugins.IPropertyAccessor"/> notifies with a new value.
            </summary>
            <param name="value">The value.</param>
            <remarks>
            Notifies the observer that the value has changed. The value will be wrapped in a
            <see cref="T:Avalonia.Data.BindingNotification"/> if it is not already a binding notification.
            </remarks>
        </member>
        <member name="T:Avalonia.Data.Core.Plugins.ExceptionValidationPlugin">
            <summary>
            Validates properties that report errors by throwing exceptions.
            </summary>
        </member>
        <member name="M:Avalonia.Data.Core.Plugins.ExceptionValidationPlugin.Match(System.WeakReference{System.Object},System.String)">
            <inheritdoc/>
        </member>
        <member name="M:Avalonia.Data.Core.Plugins.ExceptionValidationPlugin.Start(System.WeakReference{System.Object},System.String,Avalonia.Data.Core.Plugins.IPropertyAccessor)">
            <inheritdoc/>
        </member>
        <member name="T:Avalonia.Data.Core.Plugins.IDataValidationPlugin">
            <summary>
            Defines how data validation is observed by an <see cref="T:Avalonia.Data.Core.ExpressionObserver"/>.
            </summary>
        </member>
        <member name="M:Avalonia.Data.Core.Plugins.IDataValidationPlugin.Match(System.WeakReference{System.Object},System.String)">
            <summary>
            Checks whether this plugin can handle data validation on the specified object.
            </summary>
            <param name="reference">A weak reference to the object.</param>
            <param name="memberName">The name of the member to validate.</param>
            <returns>True if the plugin can handle the object; otherwise false.</returns>
        </member>
        <member name="M:Avalonia.Data.Core.Plugins.IDataValidationPlugin.Start(System.WeakReference{System.Object},System.String,Avalonia.Data.Core.Plugins.IPropertyAccessor)">
            <summary>
            Starts monitoring the data validation state of a property on an object.
            </summary>
            <param name="reference">A weak reference to the object.</param>
            <param name="propertyName">The property name.</param>
            <param name="inner">The inner property accessor used to aceess the property.</param>
            <returns>
            An <see cref="T:Avalonia.Data.Core.Plugins.IPropertyAccessor"/> interface through which future interactions with the 
            property will be made.
            </returns>
        </member>
        <member name="T:Avalonia.Data.Core.Plugins.IndeiValidationPlugin">
            <summary>
            Validates properties on objects that implement <see cref="T:System.ComponentModel.INotifyDataErrorInfo"/>.
            </summary>
        </member>
        <member name="M:Avalonia.Data.Core.Plugins.IndeiValidationPlugin.Match(System.WeakReference{System.Object},System.String)">
            <inheritdoc/>
        </member>
        <member name="M:Avalonia.Data.Core.Plugins.IndeiValidationPlugin.Start(System.WeakReference{System.Object},System.String,Avalonia.Data.Core.Plugins.IPropertyAccessor)">
            <inheritdoc/>
        </member>
        <member name="T:Avalonia.Data.Core.Plugins.InpcPropertyAccessorPlugin">
            <summary>
            Reads a property from a standard C# object that optionally supports the
            <see cref="T:System.ComponentModel.INotifyPropertyChanged"/> interface.
            </summary>
        </member>
        <member name="M:Avalonia.Data.Core.Plugins.InpcPropertyAccessorPlugin.Match(System.Object,System.String)">
            <inheritdoc/>
        </member>
        <member name="M:Avalonia.Data.Core.Plugins.InpcPropertyAccessorPlugin.Start(System.WeakReference{System.Object},System.String)">
            <summary>
            Starts monitoring the value of a property on an object.
            </summary>
            <param name="reference">The object.</param>
            <param name="propertyName">The property name.</param>
            <returns>
            An <see cref="T:Avalonia.Data.Core.Plugins.IPropertyAccessor"/> interface through which future interactions with the 
            property will be made.
            </returns>
        </member>
        <member name="T:Avalonia.Data.Core.Plugins.IPropertyAccessor">
            <summary>
            Defines an accessor to a property on an object returned by a 
            <see cref="T:Avalonia.Data.Core.Plugins.IPropertyAccessorPlugin"/>
            </summary>
        </member>
        <member name="P:Avalonia.Data.Core.Plugins.IPropertyAccessor.PropertyType">
            <summary>
            Gets the type of the property.
            </summary>
            <exception cref="T:System.InvalidOperationException">
            The accessor has not been subscribed to yet.
            </exception>
        </member>
        <member name="P:Avalonia.Data.Core.Plugins.IPropertyAccessor.Value">
            <summary>
            Gets the current value of the property.
            </summary>
        </member>
        <member name="M:Avalonia.Data.Core.Plugins.IPropertyAccessor.SetValue(System.Object,Avalonia.Data.BindingPriority)">
            <summary>
            Sets the property value.
            </summary>
            <param name="value">
            The value to set. Guaranteed to be of a valid type for the property.
            </param>
            <param name="priority">
            The priority with which to set the value.
            </param>
            <returns>
            True if the property was set; false if the property could not be set.
            </returns>
        </member>
        <member name="M:Avalonia.Data.Core.Plugins.IPropertyAccessor.Subscribe(System.Action{System.Object})">
            <summary>
            Subscribes to the value of the member.
            </summary>
            <param name="listener">A method that receives the values.</param>
        </member>
        <member name="M:Avalonia.Data.Core.Plugins.IPropertyAccessor.Unsubscribe">
            <summary>
            Unsubscribes to the value of the member.
            </summary>
        </member>
        <member name="T:Avalonia.Data.Core.Plugins.IPropertyAccessorPlugin">
            <summary>
            Defines how a member is read, written and observed by an
            <see cref="T:Avalonia.Data.Core.ExpressionObserver"/>.
            </summary>
        </member>
        <member name="M:Avalonia.Data.Core.Plugins.IPropertyAccessorPlugin.Match(System.Object,System.String)">
            <summary>
            Checks whether this plugin can handle accessing the properties of the specified object.
            </summary>
            <param name="obj">The object.</param>
            <param name="propertyName">The property name.</param>
            <returns>True if the plugin can handle the property on the object; otherwise false.</returns>
        </member>
        <member name="M:Avalonia.Data.Core.Plugins.IPropertyAccessorPlugin.Start(System.WeakReference{System.Object},System.String)">
            <summary>
            Starts monitoring the value of a property on an object.
            </summary>
            <param name="reference">A weak reference to the object.</param>
            <param name="propertyName">The property name.</param>
            <returns>
            An <see cref="T:Avalonia.Data.Core.Plugins.IPropertyAccessor"/> interface through which future interactions with the 
            property will be made.
            </returns>
        </member>
        <member name="T:Avalonia.Data.Core.Plugins.IStreamPlugin">
            <summary>
            Defines a plugin that handles the '^' stream binding operator.
            </summary>
        </member>
        <member name="M:Avalonia.Data.Core.Plugins.IStreamPlugin.Match(System.WeakReference{System.Object})">
            <summary>
            Checks whether this plugin handles the specified value.
            </summary>
            <param name="reference">A weak reference to the value.</param>
            <returns>True if the plugin can handle the value; otherwise false.</returns>
        </member>
        <member name="M:Avalonia.Data.Core.Plugins.IStreamPlugin.Start(System.WeakReference{System.Object})">
            <summary>
            Starts producing output based on the specified value.
            </summary>
            <param name="reference">A weak reference to the object.</param>
            <returns>
            An observable that produces the output for the value.
            </returns>
        </member>
        <member name="T:Avalonia.Data.Core.Plugins.ObservableStreamPlugin">
            <summary>
            Handles binding to <see cref="T:System.IObservable`1"/>s for the '^' stream binding operator.
            </summary>
        </member>
        <member name="M:Avalonia.Data.Core.Plugins.ObservableStreamPlugin.Match(System.WeakReference{System.Object})">
            <summary>
            Checks whether this plugin handles the specified value.
            </summary>
            <param name="reference">A weak reference to the value.</param>
            <returns>True if the plugin can handle the value; otherwise false.</returns>
        </member>
        <member name="M:Avalonia.Data.Core.Plugins.ObservableStreamPlugin.Start(System.WeakReference{System.Object})">
            <summary>
            Starts producing output based on the specified value.
            </summary>
            <param name="reference">A weak reference to the object.</param>
            <returns>
            An observable that produces the output for the value.
            </returns>
        </member>
        <member name="T:Avalonia.Data.Core.Plugins.PropertyAccessorBase">
            <summary>
            Defines a default base implementation for a <see cref="T:Avalonia.Data.Core.Plugins.IPropertyAccessor"/>.
            </summary>
        </member>
        <member name="P:Avalonia.Data.Core.Plugins.PropertyAccessorBase.PropertyType">
            <inheritdoc/>
        </member>
        <member name="P:Avalonia.Data.Core.Plugins.PropertyAccessorBase.Value">
            <inheritdoc/>
        </member>
        <member name="M:Avalonia.Data.Core.Plugins.PropertyAccessorBase.Dispose">
            <inheritdoc/>
        </member>
        <member name="M:Avalonia.Data.Core.Plugins.PropertyAccessorBase.SetValue(System.Object,Avalonia.Data.BindingPriority)">
            <inheritdoc/>
        </member>
        <member name="M:Avalonia.Data.Core.Plugins.PropertyAccessorBase.Subscribe(System.Action{System.Object})">
            <inheritdoc/>
        </member>
        <member name="M:Avalonia.Data.Core.Plugins.PropertyAccessorBase.PublishValue(System.Object)">
            <summary>
            Publishes a value to the listener.
            </summary>
            <param name="value">The value.</param>
        </member>
        <member name="M:Avalonia.Data.Core.Plugins.PropertyAccessorBase.SubscribeCore">
            <summary>
            When overridden in a derived class, begins listening to the member.
            </summary>
        </member>
        <member name="M:Avalonia.Data.Core.Plugins.PropertyAccessorBase.UnsubscribeCore">
            <summary>
            When overridden in a derived class, stops listening to the member.
            </summary>
        </member>
        <member name="T:Avalonia.Data.Core.Plugins.PropertyError">
            <summary>
            An <see cref="T:Avalonia.Data.Core.Plugins.IPropertyAccessor"/> that represents an error.
            </summary>
        </member>
        <member name="M:Avalonia.Data.Core.Plugins.PropertyError.#ctor(Avalonia.Data.BindingNotification)">
            <summary>
            Initializes a new instance of the <see cref="T:Avalonia.Data.Core.Plugins.PropertyError"/> class.
            </summary>
            <param name="error">The error to report.</param>
        </member>
        <member name="P:Avalonia.Data.Core.Plugins.PropertyError.PropertyType">
            <inheritdoc/>
        </member>
        <member name="P:Avalonia.Data.Core.Plugins.PropertyError.Value">
            <inheritdoc/>
        </member>
        <member name="M:Avalonia.Data.Core.Plugins.PropertyError.Dispose">
            <inheritdoc/>
        </member>
        <member name="M:Avalonia.Data.Core.Plugins.PropertyError.SetValue(System.Object,Avalonia.Data.BindingPriority)">
            <inheritdoc/>
        </member>
        <member name="T:Avalonia.Data.Core.Plugins.TaskStreamPlugin">
            <summary>
            Handles binding to <see cref="T:System.Threading.Tasks.Task"/>s for the '^' stream binding operator.
            </summary>
        </member>
        <member name="M:Avalonia.Data.Core.Plugins.TaskStreamPlugin.Match(System.WeakReference{System.Object})">
            <summary>
            Checks whether this plugin handles the specified value.
            </summary>
            <param name="reference">A weak reference to the value.</param>
            <returns>True if the plugin can handle the value; otherwise false.</returns>
        </member>
        <member name="M:Avalonia.Data.Core.Plugins.TaskStreamPlugin.Start(System.WeakReference{System.Object})">
            <summary>
            Starts producing output based on the specified value.
            </summary>
            <param name="reference">A weak reference to the object.</param>
            <returns>
            An observable that produces the output for the value.
            </returns>
        </member>
        <member name="T:Avalonia.Data.DataValidationException">
            <summary>
            Exception, which wrap validation errors.
            </summary>
        </member>
        <member name="M:Avalonia.Data.DataValidationException.#ctor(System.Object)">
            <summary>
            Initializes a new instance of the <see cref="T:Avalonia.Data.DataValidationException"/> class.
            </summary>
            <param name="errorData">Data of validation error.</param>
        </member>
        <member name="T:Avalonia.Data.IBinding">
            <summary>
            Holds a binding that can be applied to a property on an object.
            </summary>
        </member>
        <member name="M:Avalonia.Data.IBinding.Initiate(Avalonia.IAvaloniaObject,Avalonia.AvaloniaProperty,System.Object,System.Boolean)">
            <summary>
            Initiates the binding on a target object.
            </summary>
            <param name="target">The target instance.</param>
            <param name="targetProperty">The target property. May be null.</param>
            <param name="anchor">
            An optional anchor from which to locate required context. When binding to objects that
            are not in the logical tree, certain types of binding need an anchor into the tree in 
            order to locate named controls or resources. The <paramref name="anchor"/> parameter 
            can be used to provide this context.
            </param>
            <param name="enableDataValidation">Whether data validation should be enabled.</param>
            <returns>
            A <see cref="T:Avalonia.Data.InstancedBinding"/> or null if the binding could not be resolved.
            </returns>
        </member>
        <member name="T:Avalonia.Data.IndexerDescriptor">
            <summary>
            Holds a description of a binding for <see cref="T:Avalonia.AvaloniaObject"/>'s [] operator.
            </summary>
        </member>
        <member name="P:Avalonia.Data.IndexerDescriptor.Mode">
            <summary>
            Gets or sets the binding mode.
            </summary>
        </member>
        <member name="P:Avalonia.Data.IndexerDescriptor.Priority">
            <summary>
            Gets or sets the binding priority.
            </summary>
        </member>
        <member name="P:Avalonia.Data.IndexerDescriptor.Property">
            <summary>
            Gets or sets the source property.
            </summary>
        </member>
        <member name="P:Avalonia.Data.IndexerDescriptor.Source">
            <summary>
            Gets or sets the source object.
            </summary>
        </member>
        <member name="P:Avalonia.Data.IndexerDescriptor.SourceObservable">
            <summary>
            Gets or sets the source observable.
            </summary>
            <remarks>
            If null, then <see cref="P:Avalonia.Data.IndexerDescriptor.Source"/>.<see cref="P:Avalonia.Data.IndexerDescriptor.Property"/> will be used.
            </remarks>
        </member>
        <member name="P:Avalonia.Data.IndexerDescriptor.Description">
            <summary>
            Gets a description of the binding.
            </summary>
        </member>
        <member name="M:Avalonia.Data.IndexerDescriptor.op_LogicalNot(Avalonia.Data.IndexerDescriptor)">
            <summary>
            Makes a two-way binding.
            </summary>
            <param name="binding">The current binding.</param>
            <returns>A two-way binding.</returns>
        </member>
        <member name="M:Avalonia.Data.IndexerDescriptor.op_OnesComplement(Avalonia.Data.IndexerDescriptor)">
            <summary>
            Makes a two-way binding.
            </summary>
            <param name="binding">The current binding.</param>
            <returns>A two-way binding.</returns>
        </member>
        <member name="M:Avalonia.Data.IndexerDescriptor.WithMode(Avalonia.Data.BindingMode)">
            <summary>
            Modifies the binding mode.
            </summary>
            <param name="mode">The binding mode.</param>
            <returns>The object that the method was called on.</returns>
        </member>
        <member name="M:Avalonia.Data.IndexerDescriptor.WithPriority(Avalonia.Data.BindingPriority)">
            <summary>
            Modifies the binding priority.
            </summary>
            <param name="priority">The binding priority.</param>
            <returns>The object that the method was called on.</returns>
        </member>
        <member name="M:Avalonia.Data.IndexerDescriptor.SubscribeCore(System.IObserver{System.Object})">
            <inheritdoc/>
        </member>
        <member name="T:Avalonia.Data.InstancedBinding">
            <summary>
            Holds the result of calling <see cref="M:Avalonia.Data.IBinding.Initiate(Avalonia.IAvaloniaObject,Avalonia.AvaloniaProperty,System.Object,System.Boolean)"/>.
            </summary>
            <remarks>
            Whereas an <see cref="T:Avalonia.Data.IBinding"/> holds a description of a binding such as "Bind to the X
            property on a control's DataContext"; this class represents a binding that has been 
            *instanced* by calling <see cref="M:Avalonia.Data.IBinding.Initiate(Avalonia.IAvaloniaObject,Avalonia.AvaloniaProperty,System.Object,System.Boolean)"/>
            on a target object.
            </remarks>
        </member>
        <member name="M:Avalonia.Data.InstancedBinding.#ctor(System.Reactive.Subjects.ISubject{System.Object},Avalonia.Data.BindingMode,Avalonia.Data.BindingPriority)">
            <summary>
            Initializes a new instance of the <see cref="T:Avalonia.Data.InstancedBinding"/> class.
            </summary>
            <param name="subject">The binding source.</param>
            <param name="mode">The binding mode.</param>
            <param name="priority">The priority of the binding.</param>
            <remarks>
            This constructor can be used to create any type of binding and as such requires an
            <see cref="T:System.Reactive.Subjects.ISubject`1"/> as the binding source because this is the only binding
            source which can be used for all binding modes. If you wish to create an instance with
            something other than a subject, use one of the static creation methods on this class.
            </remarks>
        </member>
        <member name="P:Avalonia.Data.InstancedBinding.Mode">
            <summary>
            Gets the binding mode with which the binding was initiated.
            </summary>
        </member>
        <member name="P:Avalonia.Data.InstancedBinding.Priority">
            <summary>
            Gets the binding priority.
            </summary>
        </member>
        <member name="P:Avalonia.Data.InstancedBinding.Value">
            <summary>
            Gets the value or source of the binding.
            </summary>
        </member>
        <member name="P:Avalonia.Data.InstancedBinding.Observable">
            <summary>
            Gets the <see cref="P:Avalonia.Data.InstancedBinding.Value"/> as an observable.
            </summary>
        </member>
        <member name="P:Avalonia.Data.InstancedBinding.Subject">
            <summary>
            Gets the <see cref="P:Avalonia.Data.InstancedBinding.Value"/> as a subject.
            </summary>
        </member>
        <member name="M:Avalonia.Data.InstancedBinding.OneTime(System.Object,Avalonia.Data.BindingPriority)">
            <summary>
            Creates a new one-time binding with a fixed value.
            </summary>
            <param name="value">The value.</param>
            <param name="priority">The priority of the binding.</param>
            <returns>An <see cref="T:Avalonia.Data.InstancedBinding"/> instance.</returns>
        </member>
        <member name="M:Avalonia.Data.InstancedBinding.OneTime(System.IObservable{System.Object},Avalonia.Data.BindingPriority)">
            <summary>
            Creates a new one-time binding.
            </summary>
            <param name="observable">The source observable.</param>
            <param name="priority">The priority of the binding.</param>
            <returns>An <see cref="T:Avalonia.Data.InstancedBinding"/> instance.</returns>
        </member>
        <member name="M:Avalonia.Data.InstancedBinding.OneWay(System.IObservable{System.Object},Avalonia.Data.BindingPriority)">
            <summary>
            Creates a new one-way binding.
            </summary>
            <param name="observable">The source observable.</param>
            <param name="priority">The priority of the binding.</param>
            <returns>An <see cref="T:Avalonia.Data.InstancedBinding"/> instance.</returns>
        </member>
        <member name="M:Avalonia.Data.InstancedBinding.OneWayToSource(System.Reactive.Subjects.ISubject{System.Object},Avalonia.Data.BindingPriority)">
            <summary>
            Creates a new one-way to source binding.
            </summary>
            <param name="subject">The binding source.</param>
            <param name="priority">The priority of the binding.</param>
            <returns>An <see cref="T:Avalonia.Data.InstancedBinding"/> instance.</returns>
        </member>
        <member name="M:Avalonia.Data.InstancedBinding.TwoWay(System.Reactive.Subjects.ISubject{System.Object},Avalonia.Data.BindingPriority)">
            <summary>
            Creates a new two-way binding.
            </summary>
            <param name="subject">The binding source.</param>
            <param name="priority">The priority of the binding.</param>
            <returns>An <see cref="T:Avalonia.Data.InstancedBinding"/> instance.</returns>
        </member>
        <member name="M:Avalonia.Data.InstancedBinding.WithPriority(Avalonia.Data.BindingPriority)">
            <summary>
            Creates a copy of the <see cref="T:Avalonia.Data.InstancedBinding"/> with a different priority.
            </summary>
            <param name="priority">The priority of the binding.</param>
            <returns>An <see cref="T:Avalonia.Data.InstancedBinding"/> instance.</returns>
        </member>
        <member name="T:Avalonia.Diagnostics.AvaloniaObjectExtensions">
            <summary>
            Defines diagnostic extensions on <see cref="T:Avalonia.AvaloniaObject"/>s.
            </summary>
        </member>
        <member name="M:Avalonia.Diagnostics.AvaloniaObjectExtensions.GetDiagnostic(Avalonia.AvaloniaObject,Avalonia.AvaloniaProperty)">
            <summary>
            Gets a diagnostic for a <see cref="T:Avalonia.AvaloniaProperty"/> on a <see cref="T:Avalonia.AvaloniaObject"/>.
            </summary>
            <param name="o">The object.</param>
            <param name="property">The property.</param>
            <returns>
            A <see cref="T:Avalonia.Diagnostics.AvaloniaPropertyValue"/> that can be used to diagnose the state of the
            property on the object.
            </returns>
        </member>
        <member name="T:Avalonia.Diagnostics.AvaloniaPropertyValue">
            <summary>
            Holds diagnostic-related information about the value of a <see cref="T:Avalonia.AvaloniaProperty"/>
            on a <see cref="T:Avalonia.AvaloniaObject"/>.
            </summary>
        </member>
        <member name="M:Avalonia.Diagnostics.AvaloniaPropertyValue.#ctor(Avalonia.AvaloniaProperty,System.Object,Avalonia.Data.BindingPriority,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Avalonia.Diagnostics.AvaloniaPropertyValue"/> class.
            </summary>
            <param name="property">The property.</param>
            <param name="value">The current property value.</param>
            <param name="priority">The priority of the current value.</param>
            <param name="diagnostic">A diagnostic string.</param>
        </member>
        <member name="P:Avalonia.Diagnostics.AvaloniaPropertyValue.Property">
            <summary>
            Gets the property.
            </summary>
        </member>
        <member name="P:Avalonia.Diagnostics.AvaloniaPropertyValue.Value">
            <summary>
            Gets the current property value.
            </summary>
        </member>
        <member name="P:Avalonia.Diagnostics.AvaloniaPropertyValue.Priority">
            <summary>
            Gets the priority of the current value.
            </summary>
        </member>
        <member name="P:Avalonia.Diagnostics.AvaloniaPropertyValue.Diagnostic">
            <summary>
            Gets a diagnostic string.
            </summary>
        </member>
        <member name="T:Avalonia.Diagnostics.IAvaloniaObjectDebug">
            <summary>
            Provides a debug interface into <see cref="T:Avalonia.AvaloniaObject"/>.
            </summary>
        </member>
        <member name="M:Avalonia.Diagnostics.IAvaloniaObjectDebug.GetPropertyChangedSubscribers">
            <summary>
            Gets the subscriber list for the <see cref="E:Avalonia.IAvaloniaObject.PropertyChanged"/>
            event.
            </summary>
            <returns>
            The subscribers or null if no subscribers.
            </returns>
        </member>
        <member name="T:Avalonia.Diagnostics.INotifyCollectionChangedDebug">
            <summary>
            Provides a debug interface into <see cref="T:System.Collections.Specialized.INotifyCollectionChanged"/> subscribers on
            <see cref="T:Avalonia.Collections.AvaloniaList`1"/>
            </summary>
        </member>
        <member name="M:Avalonia.Diagnostics.INotifyCollectionChangedDebug.GetCollectionChangedSubscribers">
            <summary>
            Gets the subscriber list for the <see cref="E:System.Collections.Specialized.INotifyCollectionChanged.CollectionChanged"/>
            event.
            </summary>
            <returns>
            The subscribers or null if no subscribers.
            </returns>
        </member>
        <member name="T:Avalonia.DirectProperty`2">
            <summary>
            A direct avalonia property.
            </summary>
            <typeparam name="TOwner">The class that registered the property.</typeparam>
            <typeparam name="TValue">The type of the property's value.</typeparam>
            <remarks>
            Direct avalonia properties are backed by a field on the object, but exposed via the
            <see cref="T:Avalonia.AvaloniaProperty"/> system. They hold a getter and an optional setter which
            allows the avalonia property system to read and write the current value.
            </remarks>
        </member>
        <member name="M:Avalonia.DirectProperty`2.#ctor(System.String,System.Func{`0,`1},System.Action{`0,`1},Avalonia.DirectPropertyMetadata{`1})">
            <summary>
            Initializes a new instance of the <see cref="T:Avalonia.DirectProperty`2"/> class.
            </summary>
            <param name="name">The name of the property.</param>
            <param name="getter">Gets the current value of the property.</param>
            <param name="setter">Sets the value of the property. May be null.</param>
            <param name="metadata">The property metadata.</param>
        </member>
        <member name="M:Avalonia.DirectProperty`2.#ctor(Avalonia.AvaloniaProperty{`1},System.Func{`0,`1},System.Action{`0,`1},Avalonia.DirectPropertyMetadata{`1})">
            <summary>
            Initializes a new instance of the <see cref="T:Avalonia.AvaloniaProperty"/> class.
            </summary>
            <param name="source">The property to copy.</param>
            <param name="getter">Gets the current value of the property.</param>
            <param name="setter">Sets the value of the property. May be null.</param>
            <param name="metadata">Optional overridden metadata.</param>
        </member>
        <member name="P:Avalonia.DirectProperty`2.IsDirect">
            <inheritdoc/>
        </member>
        <member name="P:Avalonia.DirectProperty`2.IsReadOnly">
            <inheritdoc/>
        </member>
        <member name="P:Avalonia.DirectProperty`2.Getter">
            <summary>
            Gets the getter function.
            </summary>
        </member>
        <member name="P:Avalonia.DirectProperty`2.Setter">
            <summary>
            Gets the setter function.
            </summary>
        </member>
        <member name="P:Avalonia.DirectProperty`2.Avalonia#IDirectPropertyAccessor#Owner">
            <inheritdoc/>
        </member>
        <member name="M:Avalonia.DirectProperty`2.AddOwner``1(System.Func{``0,`1},System.Action{``0,`1},`1,Avalonia.Data.BindingMode,System.Boolean)">
            <summary>
            Registers the direct property on another type.
            </summary>
            <typeparam name="TNewOwner">The type of the additional owner.</typeparam>
            <param name="getter">Gets the current value of the property.</param>
            <param name="setter">Sets the value of the property.</param>
            <param name="unsetValue">
            The value to use when the property is set to <see cref="F:Avalonia.AvaloniaProperty.UnsetValue"/>
            </param>
            <param name="defaultBindingMode">The default binding mode for the property.</param>
            <param name="enableDataValidation">
            Whether the property is interested in data validation.
            </param>
            <returns>The property.</returns>
        </member>
        <member name="M:Avalonia.DirectProperty`2.Avalonia#IDirectPropertyAccessor#GetValue(Avalonia.IAvaloniaObject)">
            <inheritdoc/>
        </member>
        <member name="M:Avalonia.DirectProperty`2.Avalonia#IDirectPropertyAccessor#SetValue(Avalonia.IAvaloniaObject,System.Object)">
            <inheritdoc/>
        </member>
        <member name="T:Avalonia.DirectPropertyMetadata`1">
            <summary>
            Metadata for direct avalonia properties.
            </summary>
        </member>
        <member name="M:Avalonia.DirectPropertyMetadata`1.#ctor(`0,Avalonia.Data.BindingMode,System.Nullable{System.Boolean})">
            <summary>
            Initializes a new instance of the <see cref="T:Avalonia.StyledPropertyMetadata`1"/> class.
            </summary>
            <param name="unsetValue">
            The value to use when the property is set to <see cref="F:Avalonia.AvaloniaProperty.UnsetValue"/>
            </param>
            <param name="defaultBindingMode">The default binding mode.</param>
            <param name="enableDataValidation">
            Whether the property is interested in data validation.
            </param>
        </member>
        <member name="P:Avalonia.DirectPropertyMetadata`1.UnsetValue">
            <summary>
            Gets the value to use when the property is set to <see cref="F:Avalonia.AvaloniaProperty.UnsetValue"/>.
            </summary>
        </member>
        <member name="P:Avalonia.DirectPropertyMetadata`1.EnableDataValidation">
            <summary>
            Gets a value indicating whether the property is interested in data validation.
            </summary>
            <remarks>
            Data validation is validation performed at the target of a binding, for example in a
            view model using the INotifyDataErrorInfo interface. Only certain properties on a
            control (such as a TextBox's Text property) will be interested in recieving data
            validation messages so this feature must be explicitly enabled by setting this flag.
            </remarks>
        </member>
        <member name="P:Avalonia.DirectPropertyMetadata`1.Avalonia#IDirectPropertyMetadata#UnsetValue">
            <inheritdoc/>
        </member>
        <member name="M:Avalonia.DirectPropertyMetadata`1.Merge(Avalonia.PropertyMetadata,Avalonia.AvaloniaProperty)">
            <inheritdoc/>
        </member>
        <member name="T:Avalonia.EnumExtensions">
            <summary>
            Provides extension methods for enums.
            </summary>
        </member>
        <member name="T:Avalonia.IAvaloniaObject">
            <summary>
            Interface for getting/setting <see cref="T:Avalonia.AvaloniaProperty"/> values on an object.
            </summary>
        </member>
        <member name="E:Avalonia.IAvaloniaObject.PropertyChanged">
            <summary>
            Raised when a <see cref="T:Avalonia.AvaloniaProperty"/> value changes on this object.
            </summary>
        </member>
        <member name="E:Avalonia.IAvaloniaObject.InheritablePropertyChanged">
            <summary>
            Raised when an inheritable <see cref="T:Avalonia.AvaloniaProperty"/> value changes on this object.
            </summary>
        </member>
        <member name="M:Avalonia.IAvaloniaObject.GetValue(Avalonia.AvaloniaProperty)">
            <summary>
            Gets a <see cref="T:Avalonia.AvaloniaProperty"/> value.
            </summary>
            <param name="property">The property.</param>
            <returns>The value.</returns>
        </member>
        <member name="M:Avalonia.IAvaloniaObject.GetValue``1(Avalonia.AvaloniaProperty{``0})">
            <summary>
            Gets a <see cref="T:Avalonia.AvaloniaProperty"/> value.
            </summary>
            <typeparam name="T">The type of the property.</typeparam>
            <param name="property">The property.</param>
            <returns>The value.</returns>
        </member>
        <member name="M:Avalonia.IAvaloniaObject.IsAnimating(Avalonia.AvaloniaProperty)">
            <summary>
            Checks whether a <see cref="T:Avalonia.AvaloniaProperty"/> is animating.
            </summary>
            <param name="property">The property.</param>
            <returns>True if the property is animating, otherwise false.</returns>
        </member>
        <member name="M:Avalonia.IAvaloniaObject.IsSet(Avalonia.AvaloniaProperty)">
            <summary>
            Checks whether a <see cref="T:Avalonia.AvaloniaProperty"/> is set on this object.
            </summary>
            <param name="property">The property.</param>
            <returns>True if the property is set, otherwise false.</returns>
        </member>
        <member name="M:Avalonia.IAvaloniaObject.SetValue(Avalonia.AvaloniaProperty,System.Object,Avalonia.Data.BindingPriority)">
            <summary>
            Sets a <see cref="T:Avalonia.AvaloniaProperty"/> value.
            </summary>
            <param name="property">The property.</param>
            <param name="value">The value.</param>
            <param name="priority">The priority of the value.</param>
        </member>
        <member name="M:Avalonia.IAvaloniaObject.SetValue``1(Avalonia.AvaloniaProperty{``0},``0,Avalonia.Data.BindingPriority)">
            <summary>
            Sets a <see cref="T:Avalonia.AvaloniaProperty"/> value.
            </summary>
            <typeparam name="T">The type of the property.</typeparam>
            <param name="property">The property.</param>
            <param name="value">The value.</param>
            <param name="priority">The priority of the value.</param>
        </member>
        <member name="M:Avalonia.IAvaloniaObject.Bind(Avalonia.AvaloniaProperty,System.IObservable{System.Object},Avalonia.Data.BindingPriority)">
            <summary>
            Binds a <see cref="T:Avalonia.AvaloniaProperty"/> to an observable.
            </summary>
            <param name="property">The property.</param>
            <param name="source">The observable.</param>
            <param name="priority">The priority of the binding.</param>
            <returns>
            A disposable which can be used to terminate the binding.
            </returns>
        </member>
        <member name="M:Avalonia.IAvaloniaObject.Bind``1(Avalonia.AvaloniaProperty{``0},System.IObservable{``0},Avalonia.Data.BindingPriority)">
            <summary>
            Binds a <see cref="T:Avalonia.AvaloniaProperty"/> to an observable.
            </summary>
            <typeparam name="T">The type of the property.</typeparam>
            <param name="property">The property.</param>
            <param name="source">The observable.</param>
            <param name="priority">The priority of the binding.</param>
            <returns>
            A disposable which can be used to terminate the binding.
            </returns>
        </member>
        <member name="T:Avalonia.IDescription">
            <summary>
            Interface for objects with a <see cref="P:Avalonia.IDescription.Description"/>.
            </summary>
        </member>
        <member name="P:Avalonia.IDescription.Description">
            <summary>
            Gets the description of the object.
            </summary>
            <value>
            The description of the object.
            </value>
        </member>
        <member name="T:Avalonia.IDirectPropertyAccessor">
            <summary>
            Provides a runtime interface for getting and setting 
            <see cref="T:Avalonia.DirectProperty`2"/> values.
            </summary>
        </member>
        <member name="P:Avalonia.IDirectPropertyAccessor.IsReadOnly">
            <summary>
            Gets a value indicating whether the property is read-only.
            </summary>
        </member>
        <member name="P:Avalonia.IDirectPropertyAccessor.Owner">
            <summary>
            Gets the class that registered the property.
            </summary>
        </member>
        <member name="M:Avalonia.IDirectPropertyAccessor.GetValue(Avalonia.IAvaloniaObject)">
            <summary>
            Gets the value of the property on the instance.
            </summary>
            <param name="instance">The instance.</param>
            <returns>The property value.</returns>
        </member>
        <member name="M:Avalonia.IDirectPropertyAccessor.SetValue(Avalonia.IAvaloniaObject,System.Object)">
            <summary>
            Sets the value of the property on the instance.
            </summary>
            <param name="instance">The instance.</param>
            <param name="value">The value.</param>
        </member>
        <member name="T:Avalonia.IDirectPropertyMetadata">
            <summary>
            Untyped interface to <see cref="T:Avalonia.DirectPropertyMetadata`1"/>
            </summary>
        </member>
        <member name="P:Avalonia.IDirectPropertyMetadata.UnsetValue">
            <summary>
            Gets the to use when the property is set to <see cref="F:Avalonia.AvaloniaProperty.UnsetValue"/>.
            </summary>
        </member>
        <member name="P:Avalonia.IDirectPropertyMetadata.EnableDataValidation">
            <summary>
            Gets a value indicating whether the property is interested in data validation.
            </summary>
        </member>
        <member name="T:Avalonia.IPriorityValueOwner">
            <summary>
            An owner of a <see cref="T:Avalonia.PriorityValue"/>.
            </summary>
        </member>
        <member name="M:Avalonia.IPriorityValueOwner.Changed(Avalonia.AvaloniaProperty,System.Int32,System.Object,System.Object)">
            <summary>
            Called when a <see cref="T:Avalonia.PriorityValue"/>'s value changes.
            </summary>
            <param name="property">The the property that has changed.</param>
            <param name="priority">The priority of the value.</param>
            <param name="oldValue">The old value.</param>
            <param name="newValue">The new value.</param>
        </member>
        <member name="M:Avalonia.IPriorityValueOwner.BindingNotificationReceived(Avalonia.AvaloniaProperty,Avalonia.Data.BindingNotification)">
            <summary>
            Called when a <see cref="T:Avalonia.Data.BindingNotification"/> is received by a 
            <see cref="T:Avalonia.PriorityValue"/>.
            </summary>
            <param name="property">The the property that has changed.</param>
            <param name="notification">The notification.</param>
        </member>
        <member name="M:Avalonia.IPriorityValueOwner.GetNonDirectDeferredSetter(Avalonia.AvaloniaProperty)">
            <summary>
            Returns deferred setter for given non-direct property.
            </summary>
            <param name="property">Property.</param>
            <returns>Deferred setter for given property.</returns>
        </member>
        <member name="M:Avalonia.IPriorityValueOwner.LogError(Avalonia.AvaloniaProperty,System.Exception)">
            <summary>
            Logs a binding error.
            </summary>
            <param name="property">The property the error occurred on.</param>
            <param name="e">The binding error.</param>
        </member>
        <member name="M:Avalonia.IPriorityValueOwner.VerifyAccess">
            <summary>
            Ensures that the current thread is the UI thread.
            </summary>
        </member>
        <member name="T:Avalonia.IStyledPropertyAccessor">
            <summary>
            Provides a runtime interface for interfacing with <see cref="T:Avalonia.StyledProperty`1"/>.
            </summary>
        </member>
        <member name="M:Avalonia.IStyledPropertyAccessor.GetDefaultValue(System.Type)">
            <summary>
            Gets the default value for the property for the specified type.
            </summary>
            <param name="type">The type.</param>
            <returns>
            The default value.
            </returns>
        </member>
        <member name="M:Avalonia.IStyledPropertyAccessor.GetValidationFunc(System.Type)">
            <summary>
            Gets a validation function for the property on the specified type.
            </summary>
            <param name="type">The type.</param>
            <returns>
            The validation function, or null if no validation function exists.
            </returns>
        </member>
        <member name="T:Avalonia.IStyledPropertyMetadata">
            <summary>
            Untyped interface to <see cref="T:Avalonia.StyledPropertyMetadata`1"/>
            </summary>
        </member>
        <member name="P:Avalonia.IStyledPropertyMetadata.DefaultValue">
            <summary>
            Gets the default value for the property.
            </summary>
        </member>
        <member name="P:Avalonia.IStyledPropertyMetadata.Validate">
            <summary>
            Gets the property's validation function.
            </summary>
        </member>
        <member name="T:Avalonia.Logging.ILogSink">
            <summary>
            Defines a sink for Avalonia logging messages.
            </summary>
        </member>
        <member name="M:Avalonia.Logging.ILogSink.IsEnabled(Avalonia.Logging.LogEventLevel)">
            <summary>
            Checks if given log level is enabled.
            </summary>
            <param name="level">The log event level.</param>
            <returns><see langword="true"/> if given log level is enabled.</returns>
        </member>
        <member name="M:Avalonia.Logging.ILogSink.Log(Avalonia.Logging.LogEventLevel,System.String,System.Object,System.String)">
            <summary>
            Logs an event.
            </summary>
            <param name="level">The log event level.</param>
            <param name="area">The area that the event originates.</param>
            <param name="source">The object from which the event originates.</param>
            <param name="messageTemplate">The message template.</param>
        </member>
        <member name="M:Avalonia.Logging.ILogSink.Log``1(Avalonia.Logging.LogEventLevel,System.String,System.Object,System.String,``0)">
            <summary>
            Logs an event.
            </summary>
            <param name="level">The log event level.</param>
            <param name="area">The area that the event originates.</param>
            <param name="source">The object from which the event originates.</param>
            <param name="messageTemplate">The message template.</param>
            <param name="propertyValue0">Message property value.</param>
        </member>
        <member name="M:Avalonia.Logging.ILogSink.Log``2(Avalonia.Logging.LogEventLevel,System.String,System.Object,System.String,``0,``1)">
            <summary>
            Logs an event.
            </summary>
            <param name="level">The log event level.</param>
            <param name="area">The area that the event originates.</param>
            <param name="source">The object from which the event originates.</param>
            <param name="messageTemplate">The message template.</param>
            <param name="propertyValue0">Message property value.</param>
            <param name="propertyValue1">Message property value.</param>
        </member>
        <member name="M:Avalonia.Logging.ILogSink.Log``3(Avalonia.Logging.LogEventLevel,System.String,System.Object,System.String,``0,``1,``2)">
            <summary>
            Logs an event.
            </summary>
            <param name="level">The log event level.</param>
            <param name="area">The area that the event originates.</param>
            <param name="source">The object from which the event originates.</param>
            <param name="messageTemplate">The message template.</param>
            <param name="propertyValue0">Message property value.</param>
            <param name="propertyValue1">Message property value.</param>
            <param name="propertyValue2">Message property value.</param>
        </member>
        <member name="M:Avalonia.Logging.ILogSink.Log(Avalonia.Logging.LogEventLevel,System.String,System.Object,System.String,System.Object[])">
            <summary>
            Logs a new event.
            </summary>
            <param name="level">The log event level.</param>
            <param name="area">The area that the event originates.</param>
            <param name="source">The object from which the event originates.</param>
            <param name="messageTemplate">The message template.</param>
            <param name="propertyValues">The message property values.</param>
        </member>
        <member name="T:Avalonia.Logging.LogArea">
            <summary>
            Specifies the area in which a log event occurred.
            </summary>
        </member>
        <member name="F:Avalonia.Logging.LogArea.Property">
            <summary>
            The log event comes from the property system.
            </summary>
        </member>
        <member name="F:Avalonia.Logging.LogArea.Binding">
            <summary>
            The log event comes from the binding system.
            </summary>
        </member>
        <member name="F:Avalonia.Logging.LogArea.Animations">
            <summary>
            The log event comes from the animations system.
            </summary>
        </member>
        <member name="F:Avalonia.Logging.LogArea.Visual">
            <summary>
            The log event comes from the visual system.
            </summary>
        </member>
        <member name="F:Avalonia.Logging.LogArea.Layout">
            <summary>
            The log event comes from the layout system.
            </summary>
        </member>
        <member name="F:Avalonia.Logging.LogArea.Control">
            <summary>
            The log event comes from the control system.
            </summary>
        </member>
        <member name="T:Avalonia.Logging.LogEventLevel">
            <summary>
            Specifies the meaning and relative importance of a log event.
            </summary>
        </member>
        <member name="F:Avalonia.Logging.LogEventLevel.Verbose">
            <summary>
            Anything and everything you might want to know about a running block of code.
            </summary>
        </member>
        <member name="F:Avalonia.Logging.LogEventLevel.Debug">
            <summary>
            Internal system events that aren't necessarily observable from the outside.
            </summary>
        </member>
        <member name="F:Avalonia.Logging.LogEventLevel.Information">
            <summary>
            The lifeblood of operational intelligence - things happen.
            </summary>
        </member>
        <member name="F:Avalonia.Logging.LogEventLevel.Warning">
            <summary>
            Service is degraded or endangered.
            </summary>
        </member>
        <member name="F:Avalonia.Logging.LogEventLevel.Error">
            <summary>
            Functionality is unavailable, invariants are broken or data is lost.
            </summary>
        </member>
        <member name="F:Avalonia.Logging.LogEventLevel.Fatal">
            <summary>
            If you have a pager, it goes off when one of these occurs.
            </summary>
        </member>
        <member name="T:Avalonia.Logging.Logger">
            <summary>
            Logs avalonia messages.
            </summary>
        </member>
        <member name="P:Avalonia.Logging.Logger.Sink">
            <summary>
            Gets or sets the application-defined sink that receives the messages.
            </summary>
        </member>
        <member name="M:Avalonia.Logging.Logger.IsEnabled(Avalonia.Logging.LogEventLevel)">
            <summary>
            Checks if given log level is enabled.
            </summary>
            <param name="level">The log event level.</param>
            <returns><see langword="true"/> if given log level is enabled.</returns>
        </member>
        <member name="M:Avalonia.Logging.Logger.TryGet(Avalonia.Logging.LogEventLevel)">
            <summary>
            Returns parametrized logging sink if given log level is enabled.
            </summary>
            <param name="level">The log event level.</param>
            <returns>Log sink or <see langword="null"/> if log level is not enabled.</returns>
        </member>
        <member name="M:Avalonia.Logging.Logger.TryGet(Avalonia.Logging.LogEventLevel,Avalonia.Logging.ParametrizedLogger@)">
            <summary>
            Returns parametrized logging sink if given log level is enabled.
            </summary>
            <param name="level">The log event level.</param>
            <param name="outLogger">Log sink that is valid only if method returns <see langword="true"/>.</param>
            <returns><see langword="true"/> if logger was obtained successfully.</returns>
        </member>
        <member name="T:Avalonia.Logging.ParametrizedLogger">
            <summary>
            Logger sink parametrized for given logging level.
            </summary>
        </member>
        <member name="P:Avalonia.Logging.ParametrizedLogger.IsValid">
            <summary>
            Checks if this logger can be used.
            </summary>
        </member>
        <member name="M:Avalonia.Logging.ParametrizedLogger.Log(System.String,System.Object,System.String)">
            <summary>
            Logs an event.
            </summary>
            <param name="area">The area that the event originates.</param>
            <param name="source">The object from which the event originates.</param>
            <param name="messageTemplate">The message template.</param>
        </member>
        <member name="M:Avalonia.Logging.ParametrizedLogger.Log``1(System.String,System.Object,System.String,``0)">
            <summary>
            Logs an event.
            </summary>
            <param name="area">The area that the event originates.</param>
            <param name="source">The object from which the event originates.</param>
            <param name="messageTemplate">The message template.</param>
            <param name="propertyValue0">Message property value.</param>
        </member>
        <member name="M:Avalonia.Logging.ParametrizedLogger.Log``2(System.String,System.Object,System.String,``0,``1)">
            <summary>
            Logs an event.
            </summary>
            <param name="area">The area that the event originates.</param>
            <param name="source">The object from which the event originates.</param>
            <param name="messageTemplate">The message template.</param>
            <param name="propertyValue0">Message property value.</param>
            <param name="propertyValue1">Message property value.</param>
        </member>
        <member name="M:Avalonia.Logging.ParametrizedLogger.Log``3(System.String,System.Object,System.String,``0,``1,``2)">
            <summary>
            Logs an event.
            </summary>
            <param name="area">The area that the event originates.</param>
            <param name="source">The object from which the event originates.</param>
            <param name="messageTemplate">The message template.</param>
            <param name="propertyValue0">Message property value.</param>
            <param name="propertyValue1">Message property value.</param>
            <param name="propertyValue2">Message property value.</param>
        </member>
        <member name="M:Avalonia.Logging.ParametrizedLogger.Log``4(System.String,System.Object,System.String,``0,``1,``2,``3)">
            <summary>
            Logs an event.
            </summary>
            <param name="area">The area that the event originates.</param>
            <param name="source">The object from which the event originates.</param>
            <param name="messageTemplate">The message template.</param>
            <param name="propertyValue0">Message property value.</param>
            <param name="propertyValue1">Message property value.</param>
            <param name="propertyValue2">Message property value.</param>
            <param name="propertyValue3">Message property value.</param>
        </member>
        <member name="M:Avalonia.Logging.ParametrizedLogger.Log``5(System.String,System.Object,System.String,``0,``1,``2,``3,``4)">
            <summary>
            Logs an event.
            </summary>
            <param name="area">The area that the event originates.</param>
            <param name="source">The object from which the event originates.</param>
            <param name="messageTemplate">The message template.</param>
            <param name="propertyValue0">Message property value.</param>
            <param name="propertyValue1">Message property value.</param>
            <param name="propertyValue2">Message property value.</param>
            <param name="propertyValue3">Message property value.</param>
            <param name="propertyValue4">Message property value.</param>
        </member>
        <member name="M:Avalonia.Logging.ParametrizedLogger.Log``6(System.String,System.Object,System.String,``0,``1,``2,``3,``4,``5)">
            <summary>
            Logs an event.
            </summary>
            <param name="area">The area that the event originates.</param>
            <param name="source">The object from which the event originates.</param>
            <param name="messageTemplate">The message template.</param>
            <param name="propertyValue0">Message property value.</param>
            <param name="propertyValue1">Message property value.</param>
            <param name="propertyValue2">Message property value.</param>
            <param name="propertyValue3">Message property value.</param>
            <param name="propertyValue4">Message property value.</param>
            <param name="propertyValue5">Message property value.</param>
        </member>
        <member name="T:Avalonia.Metadata.AmbientAttribute">
            <summary>
            Defines the ambient class/property 
            </summary>
        </member>
        <member name="T:Avalonia.Metadata.ContentAttribute">
            <summary>
            Defines the property that contains the object's content in markup.
            </summary>
        </member>
        <member name="T:Avalonia.Metadata.DependsOnAttribute">
            <summary>
            Indicates that the property depends on the value of another property in markup.
            </summary>
        </member>
        <member name="M:Avalonia.Metadata.DependsOnAttribute.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Avalonia.Metadata.DependsOnAttribute"/> class.
            </summary>
            <param name="propertyName">
            The name of the property that this property depends on.
            </param>
        </member>
        <member name="P:Avalonia.Metadata.DependsOnAttribute.Name">
            <summary>
            Gets the name of the property that this property depends on.
            </summary>
        </member>
        <member name="T:Avalonia.Metadata.TemplateContentAttribute">
            <summary>
            Defines the property that contains the object's content in markup.
            </summary>
        </member>
        <member name="T:Avalonia.Metadata.XmlnsDefinitionAttribute">
            <summary>
            Maps an XML namespace to a CLR namespace for use in XAML.
            </summary>
        </member>
        <member name="M:Avalonia.Metadata.XmlnsDefinitionAttribute.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Avalonia.Metadata.XmlnsDefinitionAttribute"/> class.
            </summary>
            <param name="xmlNamespace">The URL of the XML namespace.</param>
            <param name="clrNamespace">The CLR namespace.</param>
        </member>
        <member name="P:Avalonia.Metadata.XmlnsDefinitionAttribute.XmlNamespace">
            <summary>
            Gets or sets the URL of the XML namespace.
            </summary>
        </member>
        <member name="P:Avalonia.Metadata.XmlnsDefinitionAttribute.ClrNamespace">
            <summary>
            Gets or sets the CLR namespace.
            </summary>
        </member>
        <member name="T:Avalonia.Platform.IAssetLoader">
            <summary>
            Loads assets compiled into the application binary.
            </summary>
        </member>
        <member name="M:Avalonia.Platform.IAssetLoader.SetDefaultAssembly(System.Reflection.Assembly)">
            <summary>
            We need a way to override the default assembly selected by the host platform
            because right now it is selecting the wrong one for PCL based Apps. The 
            AssetLoader needs a refactor cause right now it lives in 3+ platforms which 
            can all be loaded on Windows. 
            </summary>
            <param name="assembly"></param>
        </member>
        <member name="M:Avalonia.Platform.IAssetLoader.Exists(System.Uri,System.Uri)">
            <summary>
            Checks if an asset with the specified URI exists.
            </summary>
            <param name="uri">The URI.</param>
            <param name="baseUri">
            A base URI to use if <paramref name="uri"/> is relative.
            </param>
            <returns>True if the asset could be found; otherwise false.</returns>
        </member>
        <member name="M:Avalonia.Platform.IAssetLoader.Open(System.Uri,System.Uri)">
            <summary>
            Opens the asset with the requested URI.
            </summary>
            <param name="uri">The URI.</param>
            <param name="baseUri">
            A base URI to use if <paramref name="uri"/> is relative.
            </param>
            <returns>A stream containing the asset contents.</returns>
            <exception cref="T:System.IO.FileNotFoundException">
            The asset could not be found.
            </exception>
        </member>
        <member name="M:Avalonia.Platform.IAssetLoader.OpenAndGetAssembly(System.Uri,System.Uri)">
            <summary>
            Opens the asset with the requested URI and returns the asset stream and the
            assembly containing the asset.
            </summary>
            <param name="uri">The URI.</param>
            <param name="baseUri">
            A base URI to use if <paramref name="uri"/> is relative.
            </param>
            <returns>
            The stream containing the asset contents together with the assembly.
            </returns>
            <exception cref="T:System.IO.FileNotFoundException">
            The asset could not be found.
            </exception>
        </member>
        <member name="M:Avalonia.Platform.IAssetLoader.GetAssembly(System.Uri,System.Uri)">
            <summary>
            Extracts assembly information from URI
            </summary>
            <param name="uri">The URI.</param>
            <param name="baseUri">
            A base URI to use if <paramref name="uri"/> is relative.
            </param>
            <returns>Assembly associated with the Uri</returns>
        </member>
        <member name="M:Avalonia.Platform.IAssetLoader.GetAssets(System.Uri,System.Uri)">
            <summary>
            Gets all assets of a folder and subfolders that match specified uri.
            </summary>
            <param name="uri">The URI.</param>
            <param name="baseUri">The base URI.</param>
            <returns>All matching assets as a tuple of the absolute path to the asset and the assembly containing the asset</returns>
        </member>
        <member name="T:Avalonia.Platform.IPlatformHandle">
            <summary>
            Represents a platform-specific handle.
            </summary>
        </member>
        <member name="P:Avalonia.Platform.IPlatformHandle.Handle">
            <summary>
            Gets the handle.
            </summary>
        </member>
        <member name="P:Avalonia.Platform.IPlatformHandle.HandleDescriptor">
            <summary>
            Gets an optional string that describes what <see cref="P:Avalonia.Platform.IPlatformHandle.Handle"/> represents.
            </summary>
        </member>
        <member name="T:Avalonia.Platform.IPlatformThreadingInterface">
            <summary>
            Provides platform-specific services relating to threading.
            </summary>
        </member>
        <member name="M:Avalonia.Platform.IPlatformThreadingInterface.StartTimer(Avalonia.Threading.DispatcherPriority,System.TimeSpan,System.Action)">
            <summary>
            Starts a timer.
            </summary>
            <param name="priority"></param>
            <param name="interval">The interval.</param>
            <param name="tick">The action to call on each tick.</param>
            <returns>An <see cref="T:System.IDisposable"/> used to stop the timer.</returns>
        </member>
        <member name="T:Avalonia.Platform.PlatformHandle">
            <summary>
            Represents a platform-specific handle.
            </summary>
        </member>
        <member name="M:Avalonia.Platform.PlatformHandle.#ctor(System.IntPtr,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Avalonia.Platform.PlatformHandle"/> class.
            </summary>
            <param name="handle">The handle.</param>
            <param name="descriptor">
            An optional string that describes what <paramref name="handle"/> represents.
            </param>
        </member>
        <member name="P:Avalonia.Platform.PlatformHandle.Handle">
            <summary>
            Gets the handle.
            </summary>
        </member>
        <member name="P:Avalonia.Platform.PlatformHandle.HandleDescriptor">
            <summary>
            Gets an optional string that describes what <see cref="P:Avalonia.Platform.PlatformHandle.Handle"/> represents.
            </summary>
        </member>
        <member name="T:Avalonia.PriorityBindingEntry">
            <summary>
            A registered binding in a <see cref="T:Avalonia.PriorityValue"/>.
            </summary>
        </member>
        <member name="M:Avalonia.PriorityBindingEntry.#ctor(Avalonia.PriorityLevel,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Avalonia.PriorityBindingEntry"/> class.
            </summary>
            <param name="owner">The owner.</param>
            <param name="index">
            The binding index. Later bindings should have higher indexes.
            </param>
        </member>
        <member name="P:Avalonia.PriorityBindingEntry.Observable">
            <summary>
            Gets the observable associated with the entry.
            </summary>
        </member>
        <member name="P:Avalonia.PriorityBindingEntry.Description">
            <summary>
            Gets a description of the binding.
            </summary>
        </member>
        <member name="P:Avalonia.PriorityBindingEntry.Index">
            <summary>
            Gets the binding entry index. Later bindings will have higher indexes.
            </summary>
        </member>
        <member name="P:Avalonia.PriorityBindingEntry.HasCompleted">
            <summary>
            Gets a value indicating whether the binding has completed.
            </summary>
        </member>
        <member name="P:Avalonia.PriorityBindingEntry.Value">
            <summary>
            The current value of the binding.
            </summary>
        </member>
        <member name="M:Avalonia.PriorityBindingEntry.Start(System.IObservable{System.Object})">
            <summary>
            Starts listening to the binding.
            </summary>
            <param name="binding">The binding.</param>
        </member>
        <member name="M:Avalonia.PriorityBindingEntry.Dispose">
            <summary>
            Ends the binding subscription.
            </summary>
        </member>
        <member name="T:Avalonia.PriorityLevel">
            <summary>
            Stores bindings for a priority level in a <see cref="T:Avalonia.PriorityValue"/>.
            </summary>
            <remarks>
            <para>
            Each priority level in a <see cref="T:Avalonia.PriorityValue"/> has a current <see cref="P:Avalonia.PriorityLevel.Value"/>,
            a list of <see cref="P:Avalonia.PriorityLevel.Bindings"/> and a <see cref="P:Avalonia.PriorityLevel.DirectValue"/>. When there are no
            bindings present, or all bindings return <see cref="F:Avalonia.AvaloniaProperty.UnsetValue"/> then
            <code>Value</code> will equal <code>DirectValue</code>.
            </para>
            <para>
            When there are bindings present, then the latest added binding that doesn't return
            <code>UnsetValue</code> will take precedence. The active binding is returned by the
            <see cref="P:Avalonia.PriorityLevel.ActiveBindingIndex"/> property (which refers to the active binding's
            <see cref="P:Avalonia.PriorityBindingEntry.Index"/> property rather than the index in
            <code>Bindings</code>).
            </para>
            <para>
            If <code>DirectValue</code> is set while a binding is active, then it will replace the
            current value until the active binding fires again.
            </para>
            </remarks>
        </member>
        <member name="M:Avalonia.PriorityLevel.#ctor(Avalonia.PriorityValue,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Avalonia.PriorityLevel"/> class.
            </summary>
            <param name="owner">The owner.</param>
            <param name="priority">The priority.</param>
        </member>
        <member name="P:Avalonia.PriorityLevel.Owner">
            <summary>
            Gets the owner of the level.
            </summary>
        </member>
        <member name="P:Avalonia.PriorityLevel.Priority">
            <summary>
            Gets the priority of this level.
            </summary>
        </member>
        <member name="P:Avalonia.PriorityLevel.DirectValue">
            <summary>
            Gets or sets the direct value for this priority level.
            </summary>
        </member>
        <member name="P:Avalonia.PriorityLevel.Value">
            <summary>
            Gets the current binding for the priority level.
            </summary>
        </member>
        <member name="P:Avalonia.PriorityLevel.ActiveBindingIndex">
            <summary>
            Gets the <see cref="P:Avalonia.PriorityBindingEntry.Index"/> value of the active binding, or -1
            if no binding is active.
            </summary>
        </member>
        <member name="P:Avalonia.PriorityLevel.Bindings">
            <summary>
            Gets the bindings for the priority level.
            </summary>
        </member>
        <member name="M:Avalonia.PriorityLevel.Add(System.IObservable{System.Object})">
            <summary>
            Adds a binding.
            </summary>
            <param name="binding">The binding to add.</param>
            <returns>A disposable used to remove the binding.</returns>
        </member>
        <member name="M:Avalonia.PriorityLevel.Changed(Avalonia.PriorityBindingEntry)">
            <summary>
            Invoked when an entry in <see cref="P:Avalonia.PriorityLevel.Bindings"/> changes value.
            </summary>
            <param name="entry">The entry that changed.</param>
        </member>
        <member name="M:Avalonia.PriorityLevel.Completed(Avalonia.PriorityBindingEntry)">
            <summary>
            Invoked when an entry in <see cref="P:Avalonia.PriorityLevel.Bindings"/> completes.
            </summary>
            <param name="entry">The entry that completed.</param>
        </member>
        <member name="M:Avalonia.PriorityLevel.Error(Avalonia.PriorityBindingEntry,Avalonia.Data.BindingNotification)">
            <summary>
            Invoked when an entry in <see cref="P:Avalonia.PriorityLevel.Bindings"/> encounters a recoverable error.
            </summary>
            <param name="entry">The entry that completed.</param>
            <param name="error">The error.</param>
        </member>
        <member name="M:Avalonia.PriorityLevel.ActivateFirstBinding">
            <summary>
            Activates the first binding that has a value.
            </summary>
        </member>
        <member name="T:Avalonia.PriorityValue">
            <summary>
            Maintains a list of prioritized bindings together with a current value.
            </summary>
            <remarks>
            Bindings, in the form of <see cref="T:System.IObservable`1"/>s are added to the object using
            the <see cref="M:Avalonia.PriorityValue.Add(System.IObservable{System.Object},System.Int32)"/> method. With the observable is passed a priority, where lower values
            represent higher priorities. The current <see cref="P:Avalonia.PriorityValue.Value"/> is selected from the highest
            priority binding that doesn't return <see cref="F:Avalonia.AvaloniaProperty.UnsetValue"/>. Where there
            are multiple bindings registered with the same priority, the most recently added binding
            has a higher priority. Each time the value changes, the 
            <see cref="M:Avalonia.IPriorityValueOwner.Changed(Avalonia.AvaloniaProperty,System.Int32,System.Object,System.Object)"/> method on the 
            owner object is fired with the old and new values.
            </remarks>
        </member>
        <member name="M:Avalonia.PriorityValue.#ctor(Avalonia.IPriorityValueOwner,Avalonia.AvaloniaProperty,System.Type,System.Func{System.Object,System.Object})">
            <summary>
            Initializes a new instance of the <see cref="T:Avalonia.PriorityValue"/> class.
            </summary>
            <param name="owner">The owner of the object.</param>
            <param name="property">The property that the value represents.</param>
            <param name="valueType">The value type.</param>
            <param name="validate">An optional validation function.</param>
        </member>
        <member name="P:Avalonia.PriorityValue.IsAnimating">
            <summary>
            Gets a value indicating whether the property is animating.
            </summary>
        </member>
        <member name="P:Avalonia.PriorityValue.Owner">
            <summary>
            Gets the owner of the value.
            </summary>
        </member>
        <member name="P:Avalonia.PriorityValue.Property">
            <summary>
            Gets the property that the value represents.
            </summary>
        </member>
        <member name="P:Avalonia.PriorityValue.Value">
            <summary>
            Gets the current value.
            </summary>
        </member>
        <member name="P:Avalonia.PriorityValue.ValuePriority">
            <summary>
            Gets the priority of the binding that is currently active.
            </summary>
        </member>
        <member name="M:Avalonia.PriorityValue.Add(System.IObservable{System.Object},System.Int32)">
            <summary>
            Adds a new binding.
            </summary>
            <param name="binding">The binding.</param>
            <param name="priority">The binding priority.</param>
            <returns>
            A disposable that will remove the binding.
            </returns>
        </member>
        <member name="M:Avalonia.PriorityValue.SetValue(System.Object,System.Int32)">
            <summary>
            Sets the value for a specified priority.
            </summary>
            <param name="value">The value.</param>
            <param name="priority">The priority</param>
        </member>
        <member name="M:Avalonia.PriorityValue.GetBindings">
            <summary>
            Gets the currently active bindings on this object.
            </summary>
            <returns>An enumerable collection of bindings.</returns>
        </member>
        <member name="M:Avalonia.PriorityValue.GetDiagnostic">
            <summary>
            Returns diagnostic string that can help the user debug the bindings in effect on
            this object.
            </summary>
            <returns>A diagnostic string.</returns>
        </member>
        <member name="M:Avalonia.PriorityValue.LevelValueChanged(Avalonia.PriorityLevel)">
            <summary>
            Called when the value for a priority level changes.
            </summary>
            <param name="level">The priority level of the changed entry.</param>
        </member>
        <member name="M:Avalonia.PriorityValue.LevelError(Avalonia.PriorityLevel,Avalonia.Data.BindingNotification)">
            <summary>
            Called when a priority level encounters an error.
            </summary>
            <param name="level">The priority level of the changed entry.</param>
            <param name="error">The binding error.</param>
        </member>
        <member name="M:Avalonia.PriorityValue.Revalidate">
            <summary>
            Causes a revalidation of the value.
            </summary>
        </member>
        <member name="M:Avalonia.PriorityValue.GetLevel(System.Int32)">
            <summary>
            Gets the <see cref="T:Avalonia.PriorityLevel"/> with the specified priority, creating it if it
            doesn't already exist.
            </summary>
            <param name="priority">The priority.</param>
            <returns>The priority level.</returns>
        </member>
        <member name="M:Avalonia.PriorityValue.UpdateValue(System.Object,System.Int32)">
            <summary>
            Updates the current <see cref="P:Avalonia.PriorityValue.Value"/> and notifies all subscribers.
            </summary>
            <param name="value">The value to set.</param>
            <param name="priority">The priority level that the value came from.</param>
        </member>
        <member name="T:Avalonia.PropertyMetadata">
            <summary>
            Base class for avalonia property metadata.
            </summary>
        </member>
        <member name="M:Avalonia.PropertyMetadata.#ctor(Avalonia.Data.BindingMode)">
            <summary>
            Initializes a new instance of the <see cref="T:Avalonia.PropertyMetadata"/> class.
            </summary>
            <param name="defaultBindingMode">The default binding mode.</param>
        </member>
        <member name="P:Avalonia.PropertyMetadata.DefaultBindingMode">
            <summary>
            Gets the default binding mode for the property.
            </summary>
        </member>
        <member name="M:Avalonia.PropertyMetadata.Merge(Avalonia.PropertyMetadata,Avalonia.AvaloniaProperty)">
            <summary>
            Merges the metadata with the base metadata.
            </summary>
            <param name="baseMetadata">The base metadata to merge.</param>
            <param name="property">The property to which the metadata is being applied.</param>
        </member>
        <member name="T:Avalonia.Reactive.LightweightObservableBase`1">
            <summary>
            Lightweight base class for observable implementations.
            </summary>
            <typeparam name="T">The observable type.</typeparam>
            <remarks>
            <see cref="T:System.Reactive.ObservableBase`1"/> is rather heavyweight in terms of allocations and memory
            usage. This class provides a more lightweight base for some internal observable types
            in the Avalonia framework.
            </remarks>
        </member>
        <member name="T:Avalonia.Reactive.ObservableEx">
            <summary>
            Provides common observable methods not found in standard Rx framework.
            </summary>
        </member>
        <member name="M:Avalonia.Reactive.ObservableEx.SingleValue``1(``0)">
            <summary>
            Returns an observable that fires once with the specified value and never completes.
            </summary>
            <typeparam name="T">The type of the value.</typeparam>
            <param name="value">The value.</param>
            <returns>The observable.</returns>
        </member>
        <member name="T:Avalonia.StyledProperty`1">
            <summary>
            A styled avalonia property.
            </summary>
        </member>
        <member name="M:Avalonia.StyledProperty`1.#ctor(System.String,System.Type,Avalonia.StyledPropertyMetadata{`0},System.Boolean,System.Action{Avalonia.IAvaloniaObject,System.Boolean})">
            <summary>
            Initializes a new instance of the <see cref="T:Avalonia.StyledPropertyBase`1"/> class.
            </summary>
            <param name="name">The name of the property.</param>
            <param name="ownerType">The type of the class that registers the property.</param>
            <param name="metadata">The property metadata.</param>
            <param name="inherits">Whether the property inherits its value.</param>
            <param name="notifying">A <see cref="P:Avalonia.AvaloniaProperty.Notifying"/> callback.</param>
        </member>
        <member name="M:Avalonia.StyledProperty`1.#ctor(Avalonia.StyledPropertyBase{`0},System.Type)">
            <summary>
            Initializes a new instance of the <see cref="T:Avalonia.StyledPropertyBase`1"/> class.
            </summary>
            <param name="source">The property to add the owner to.</param>
            <param name="ownerType">The type of the class that registers the property.</param>
        </member>
        <member name="M:Avalonia.StyledProperty`1.AddOwner``1">
            <summary>
            Registers the property on another type.
            </summary>
            <typeparam name="TOwner">The type of the additional owner.</typeparam>
            <returns>The property.</returns>        
        </member>
        <member name="T:Avalonia.StyledPropertyBase`1">
            <summary>
            Base class for styled properties.
            </summary>
        </member>
        <member name="M:Avalonia.StyledPropertyBase`1.#ctor(System.String,System.Type,Avalonia.StyledPropertyMetadata{`0},System.Boolean,System.Action{Avalonia.IAvaloniaObject,System.Boolean})">
            <summary>
            Initializes a new instance of the <see cref="T:Avalonia.StyledPropertyBase`1"/> class.
            </summary>
            <param name="name">The name of the property.</param>
            <param name="ownerType">The type of the class that registers the property.</param>
            <param name="metadata">The property metadata.</param>
            <param name="inherits">Whether the property inherits its value.</param>
            <param name="notifying">A <see cref="P:Avalonia.AvaloniaProperty.Notifying"/> callback.</param>
        </member>
        <member name="M:Avalonia.StyledPropertyBase`1.#ctor(Avalonia.StyledPropertyBase{`0},System.Type)">
            <summary>
            Initializes a new instance of the <see cref="T:Avalonia.StyledPropertyBase`1"/> class.
            </summary>
            <param name="source">The property to add the owner to.</param>
            <param name="ownerType">The type of the class that registers the property.</param>
        </member>
        <member name="P:Avalonia.StyledPropertyBase`1.Inherits">
            <summary>
            Gets a value indicating whether the property inherits its value.
            </summary>
            <value>
            A value indicating whether the property inherits its value.
            </value>
        </member>
        <member name="M:Avalonia.StyledPropertyBase`1.GetDefaultValue(System.Type)">
            <summary>
            Gets the default value for the property on the specified type.
            </summary>
            <param name="type">The type.</param>
            <returns>The default value.</returns>
        </member>
        <member name="M:Avalonia.StyledPropertyBase`1.GetMetadata(System.Type)">
            <summary>
            Gets the property metadata for the specified type.
            </summary>
            <param name="type">The type.</param>
            <returns>
            The property metadata.
            </returns>
        </member>
        <member name="M:Avalonia.StyledPropertyBase`1.OverrideDefaultValue``1(`0)">
            <summary>
            Overrides the default value for the property on the specified type.
            </summary>
            <typeparam name="T">The type.</typeparam>
            <param name="defaultValue">The default value.</param>
        </member>
        <member name="M:Avalonia.StyledPropertyBase`1.OverrideDefaultValue(System.Type,`0)">
            <summary>
            Overrides the default value for the property on the specified type.
            </summary>
            <param name="type">The type.</param>
            <param name="defaultValue">The default value.</param>
        </member>
        <member name="M:Avalonia.StyledPropertyBase`1.OverrideMetadata``1(Avalonia.StyledPropertyMetadata{`0})">
            <summary>
            Overrides the metadata for the property on the specified type.
            </summary>
            <typeparam name="T">The type.</typeparam>
            <param name="metadata">The metadata.</param>
        </member>
        <member name="M:Avalonia.StyledPropertyBase`1.OverrideMetadata(System.Type,Avalonia.StyledPropertyMetadata{`0})">
            <summary>
            Overrides the metadata for the property on the specified type.
            </summary>
            <param name="type">The type.</param>
            <param name="metadata">The metadata.</param>
        </member>
        <member name="M:Avalonia.StyledPropertyBase`1.OverrideValidation``1(System.Func{``0,`0,`0})">
            <summary>
            Overrides the validation function for the specified type.
            </summary>
            <typeparam name="THost">The type.</typeparam>
            <param name="validate">The validation function.</param>
        </member>
        <member name="M:Avalonia.StyledPropertyBase`1.ToString">
            <summary>
            Gets the string representation of the property.
            </summary>
            <returns>The property's string representation.</returns>
        </member>
        <member name="M:Avalonia.StyledPropertyBase`1.Avalonia#IStyledPropertyAccessor#GetValidationFunc(System.Type)">
            <inheritdoc/>
        </member>
        <member name="M:Avalonia.StyledPropertyBase`1.Avalonia#IStyledPropertyAccessor#GetDefaultValue(System.Type)">
            <inheritdoc/>
        </member>
        <member name="T:Avalonia.StyledPropertyMetadata`1">
            <summary>
            Metadata for styled avalonia properties.
            </summary>
        </member>
        <member name="M:Avalonia.StyledPropertyMetadata`1.#ctor(`0,System.Func{Avalonia.IAvaloniaObject,`0,`0},Avalonia.Data.BindingMode)">
            <summary>
            Initializes a new instance of the <see cref="T:Avalonia.StyledPropertyMetadata`1"/> class.
            </summary>
            <param name="defaultValue">The default value of the property.</param>
            <param name="validate">A validation function.</param>
            <param name="defaultBindingMode">The default binding mode.</param>
        </member>
        <member name="P:Avalonia.StyledPropertyMetadata`1.DefaultValue">
            <summary>
            Gets the default value for the property.
            </summary>
        </member>
        <member name="P:Avalonia.StyledPropertyMetadata`1.Validate">
            <summary>
            Gets the validation callback.
            </summary>
        </member>
        <member name="M:Avalonia.StyledPropertyMetadata`1.Merge(Avalonia.PropertyMetadata,Avalonia.AvaloniaProperty)">
            <inheritdoc/>
        </member>
        <member name="T:Avalonia.Threading.AvaloniaScheduler">
            <summary>
            A reactive scheduler that uses Avalonia's <see cref="T:Avalonia.Threading.Dispatcher"/>.
            </summary>
        </member>
        <member name="F:Avalonia.Threading.AvaloniaScheduler.Instance">
            <summary>
            The instance of the <see cref="T:Avalonia.Threading.AvaloniaScheduler"/>.
            </summary>
        </member>
        <member name="M:Avalonia.Threading.AvaloniaScheduler.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Avalonia.Threading.AvaloniaScheduler"/> class.
            </summary>
        </member>
        <member name="M:Avalonia.Threading.AvaloniaScheduler.Schedule``1(``0,System.TimeSpan,System.Func{System.Reactive.Concurrency.IScheduler,``0,System.IDisposable})">
            <inheritdoc/>
        </member>
        <member name="T:Avalonia.Threading.AvaloniaSynchronizationContext">
            <summary>
            SynchronizationContext to be used on main thread
            </summary>
        </member>
        <member name="P:Avalonia.Threading.AvaloniaSynchronizationContext.AutoInstall">
            <summary>
            Controls if SynchronizationContext should be installed in InstallIfNeeded. Used by Designer.
            </summary>
        </member>
        <member name="M:Avalonia.Threading.AvaloniaSynchronizationContext.InstallIfNeeded">
            <summary>
            Installs synchronization context in current thread
            </summary>
        </member>
        <member name="M:Avalonia.Threading.AvaloniaSynchronizationContext.Post(System.Threading.SendOrPostCallback,System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:Avalonia.Threading.AvaloniaSynchronizationContext.Send(System.Threading.SendOrPostCallback,System.Object)">
            <inheritdoc/>
        </member>
        <member name="T:Avalonia.Threading.Dispatcher">
            <summary>
            Provides services for managing work items on a thread.
            </summary>
            <remarks>
            In Avalonia, there is usually only a single <see cref="T:Avalonia.Threading.Dispatcher"/> in the application -
            the one for the UI thread, retrieved via the <see cref="P:Avalonia.Threading.Dispatcher.UIThread"/> property.
            </remarks>
        </member>
        <member name="M:Avalonia.Threading.Dispatcher.CheckAccess">
            <summary>
            Checks that the current thread is the UI thread.
            </summary>
        </member>
        <member name="M:Avalonia.Threading.Dispatcher.VerifyAccess">
            <summary>
            Checks that the current thread is the UI thread and throws if not.
            </summary>
            <exception cref="T:System.InvalidOperationException">
            The current thread is not the UI thread.
            </exception>
        </member>
        <member name="M:Avalonia.Threading.Dispatcher.MainLoop(System.Threading.CancellationToken)">
            <summary>
            Runs the dispatcher's main loop.
            </summary>
            <param name="cancellationToken">
            A cancellation token used to exit the main loop.
            </param>
        </member>
        <member name="M:Avalonia.Threading.Dispatcher.RunJobs">
            <summary>
            Runs continuations pushed on the loop.
            </summary>
        </member>
        <member name="M:Avalonia.Threading.Dispatcher.RunJobs(Avalonia.Threading.DispatcherPriority)">
            <summary>
            Use this method to ensure that more prioritized tasks are executed
            </summary>
            <param name="minimumPriority"></param>
        </member>
        <member name="M:Avalonia.Threading.Dispatcher.InvokeAsync(System.Action,Avalonia.Threading.DispatcherPriority)">
            <inheritdoc/>
        </member>
        <member name="M:Avalonia.Threading.Dispatcher.InvokeAsync``1(System.Func{``0},Avalonia.Threading.DispatcherPriority)">
            <inheritdoc/>
        </member>
        <member name="M:Avalonia.Threading.Dispatcher.InvokeAsync(System.Func{System.Threading.Tasks.Task},Avalonia.Threading.DispatcherPriority)">
            <inheritdoc/>
        </member>
        <member name="M:Avalonia.Threading.Dispatcher.InvokeAsync``1(System.Func{System.Threading.Tasks.Task{``0}},Avalonia.Threading.DispatcherPriority)">
            <inheritdoc/>
        </member>
        <member name="M:Avalonia.Threading.Dispatcher.Post(System.Action,Avalonia.Threading.DispatcherPriority)">
            <inheritdoc/>
        </member>
        <member name="M:Avalonia.Threading.Dispatcher.EnsurePriority(Avalonia.Threading.DispatcherPriority)">
            <summary>
            This is needed for platform backends that don't have internal priority system (e. g. win32)
            To ensure that there are no jobs with higher priority
            </summary>
            <param name="currentPriority"></param>
        </member>
        <member name="M:Avalonia.Threading.Dispatcher.UpdateServices">
            <summary>
            Allows unit tests to change the platform threading interface.
            </summary>
        </member>
        <member name="T:Avalonia.Threading.DispatcherPriority">
            <summary>
            Defines the priorities with which jobs can be invoked on a <see cref="T:Avalonia.Threading.Dispatcher"/>.
            </summary>
        </member>
        <member name="F:Avalonia.Threading.DispatcherPriority.MinValue">
            <summary>
            Minimum possible priority
            </summary>
        </member>
        <member name="F:Avalonia.Threading.DispatcherPriority.SystemIdle">
            <summary>
            The job will be processed when the system is idle.
            </summary>
        </member>
        <member name="F:Avalonia.Threading.DispatcherPriority.ApplicationIdle">
            <summary>
            The job will be processed when the application sis idle.
            </summary>
        </member>
        <member name="F:Avalonia.Threading.DispatcherPriority.ContextIdle">
            <summary>
            The job will be processed after background operations have completed.
            </summary>
        </member>
        <member name="F:Avalonia.Threading.DispatcherPriority.Background">
            <summary>
            The job will be processed after other non-idle operations have completed.
            </summary>
        </member>
        <member name="F:Avalonia.Threading.DispatcherPriority.Input">
            <summary>
            The job will be processed with the same priority as input.
            </summary>
        </member>
        <member name="F:Avalonia.Threading.DispatcherPriority.Loaded">
            <summary>
            The job will be processed after layout and render but before input.
            </summary>
        </member>
        <member name="F:Avalonia.Threading.DispatcherPriority.Render">
            <summary>
            The job will be processed with the same priority as render.
            </summary>
        </member>
        <member name="F:Avalonia.Threading.DispatcherPriority.Layout">
            <summary>
            The job will be processed with the same priority as render.
            </summary>
        </member>
        <member name="F:Avalonia.Threading.DispatcherPriority.DataBind">
            <summary>
            The job will be processed with the same priority as data binding.
            </summary>
        </member>
        <member name="F:Avalonia.Threading.DispatcherPriority.Normal">
            <summary>
            The job will be processed with normal priority.
            </summary>
        </member>
        <member name="F:Avalonia.Threading.DispatcherPriority.Send">
            <summary>
            The job will be processed before other asynchronous operations.
            </summary>
        </member>
        <member name="F:Avalonia.Threading.DispatcherPriority.MaxValue">
            <summary>
            Maximum possible priority
            </summary>
        </member>
        <member name="T:Avalonia.Threading.DispatcherTimer">
            <summary>
            A timer that uses a <see cref="T:Avalonia.Threading.Dispatcher"/> to fire at a specified interval.
            </summary>
        </member>
        <member name="M:Avalonia.Threading.DispatcherTimer.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Avalonia.Threading.DispatcherTimer"/> class.
            </summary>
        </member>
        <member name="M:Avalonia.Threading.DispatcherTimer.#ctor(Avalonia.Threading.DispatcherPriority)">
            <summary>
            Initializes a new instance of the <see cref="T:Avalonia.Threading.DispatcherTimer"/> class.
            </summary>
            <param name="priority">The priority to use.</param>
        </member>
        <member name="M:Avalonia.Threading.DispatcherTimer.#ctor(System.TimeSpan,Avalonia.Threading.DispatcherPriority,System.EventHandler)">
            <summary>
            Initializes a new instance of the <see cref="T:Avalonia.Threading.DispatcherTimer"/> class.
            </summary>
            <param name="interval">The interval at which to tick.</param>
            <param name="priority">The priority to use.</param>
            <param name="callback">The event to call when the timer ticks.</param>
        </member>
        <member name="M:Avalonia.Threading.DispatcherTimer.Finalize">
            <summary>
            Finalizes an instance of the <see cref="T:Avalonia.Threading.DispatcherTimer"/> class.
            </summary>
        </member>
        <member name="E:Avalonia.Threading.DispatcherTimer.Tick">
            <summary>
            Raised when the timer ticks.
            </summary>
        </member>
        <member name="P:Avalonia.Threading.DispatcherTimer.Interval">
            <summary>
            Gets or sets the interval at which the timer ticks.
            </summary>
        </member>
        <member name="P:Avalonia.Threading.DispatcherTimer.IsEnabled">
            <summary>
            Gets or sets a value indicating whether the timer is running.
            </summary>
        </member>
        <member name="P:Avalonia.Threading.DispatcherTimer.Tag">
            <summary>
            Gets or sets user-defined data associated with the timer.
            </summary>
        </member>
        <member name="M:Avalonia.Threading.DispatcherTimer.Run(System.Func{System.Boolean},System.TimeSpan,Avalonia.Threading.DispatcherPriority)">
            <summary>
            Starts a new timer.
            </summary>
            <param name="action">
            The method to call on timer tick. If the method returns false, the timer will stop.
            </param>
            <param name="interval">The interval at which to tick.</param>
            <param name="priority">The priority to use.</param>
            <returns>An <see cref="T:System.IDisposable"/> used to cancel the timer.</returns>
        </member>
        <member name="M:Avalonia.Threading.DispatcherTimer.RunOnce(System.Action,System.TimeSpan,Avalonia.Threading.DispatcherPriority)">
            <summary>
            Runs a method once, after the specified interval.
            </summary>
            <param name="action">
            The method to call after the interval has elapsed.
            </param>
            <param name="interval">The interval after which to call the method.</param>
            <param name="priority">The priority to use.</param>
            <returns>An <see cref="T:System.IDisposable"/> used to cancel the timer.</returns>
        </member>
        <member name="M:Avalonia.Threading.DispatcherTimer.Start">
            <summary>
            Starts the timer.
            </summary>
        </member>
        <member name="M:Avalonia.Threading.DispatcherTimer.Stop">
            <summary>
            Stops the timer.
            </summary>
        </member>
        <member name="M:Avalonia.Threading.DispatcherTimer.InternalTick">
            <summary>
            Raises the <see cref="E:Avalonia.Threading.DispatcherTimer.Tick"/> event on the dispatcher thread.
            </summary>
        </member>
        <member name="T:Avalonia.Threading.IDispatcher">
            <summary>
            Dispatches jobs to a thread.
            </summary>
        </member>
        <member name="M:Avalonia.Threading.IDispatcher.CheckAccess">
            <summary>
            Determines whether the calling thread is the thread associated with this <see cref="T:Avalonia.Threading.IDispatcher"/>.
            </summary>
            <returns>True if he calling thread is the thread associated with the dispatched, otherwise false.</returns>
        </member>
        <member name="M:Avalonia.Threading.IDispatcher.VerifyAccess">
            <summary>
            Throws an exception if the calling thread is not the thread associated with this <see cref="T:Avalonia.Threading.IDispatcher"/>.
            </summary>
        </member>
        <member name="M:Avalonia.Threading.IDispatcher.Post(System.Action,Avalonia.Threading.DispatcherPriority)">
            <summary>
            Invokes a method on the dispatcher thread.
            </summary>
            <param name="action">The method.</param>
            <param name="priority">The priority with which to invoke the method.</param>
            <returns>A task that can be used to track the method's execution.</returns>
        </member>
        <member name="M:Avalonia.Threading.IDispatcher.InvokeAsync(System.Action,Avalonia.Threading.DispatcherPriority)">
            <summary>
            Posts an action that will be invoked on the dispatcher thread.
            </summary>
            <param name="action">The method.</param>
            <param name="priority">The priority with which to invoke the method.</param>
        </member>
        <member name="M:Avalonia.Threading.IDispatcher.InvokeAsync``1(System.Func{``0},Avalonia.Threading.DispatcherPriority)">
            <summary>
            Posts a function that will be invoked on the dispatcher thread.
            </summary>
            <param name="function">The method.</param>
            <param name="priority">The priority with which to invoke the method.</param>
        </member>
        <member name="M:Avalonia.Threading.IDispatcher.InvokeAsync(System.Func{System.Threading.Tasks.Task},Avalonia.Threading.DispatcherPriority)">
            <summary>
            Queues the specified work to run on the dispatcher thread and returns a proxy for the
            task returned by <paramref name="function"/>.
            </summary>
            <param name="function">The work to execute asynchronously.</param>
            <param name="priority">The priority with which to invoke the method.</param>
            <returns>A task that represents a proxy for the task returned by <paramref name="function"/>.</returns>
        </member>
        <member name="M:Avalonia.Threading.IDispatcher.InvokeAsync``1(System.Func{System.Threading.Tasks.Task{``0}},Avalonia.Threading.DispatcherPriority)">
            <summary>
            Queues the specified work to run on the dispatcher thread and returns a proxy for the
            task returned by <paramref name="function"/>.
            </summary>
            <param name="function">The work to execute asynchronously.</param>
            <param name="priority">The priority with which to invoke the method.</param>
            <returns>A task that represents a proxy for the task returned by <paramref name="function"/>.</returns>
        </member>
        <member name="T:Avalonia.Threading.JobRunner">
            <summary>
            A main loop in a <see cref="T:Avalonia.Threading.Dispatcher"/>.
            </summary>
        </member>
        <member name="M:Avalonia.Threading.JobRunner.RunJobs(System.Nullable{Avalonia.Threading.DispatcherPriority})">
            <summary>
            Runs continuations pushed on the loop.
            </summary>
            <param name="priority">Priority to execute jobs for. Pass null if platform doesn't have internal priority system</param>
        </member>
        <member name="M:Avalonia.Threading.JobRunner.InvokeAsync(System.Action,Avalonia.Threading.DispatcherPriority)">
            <summary>
            Invokes a method on the main loop.
            </summary>
            <param name="action">The method.</param>
            <param name="priority">The priority with which to invoke the method.</param>
            <returns>A task that can be used to track the method's execution.</returns>
        </member>
        <member name="M:Avalonia.Threading.JobRunner.InvokeAsync``1(System.Func{``0},Avalonia.Threading.DispatcherPriority)">
            <summary>
            Invokes a method on the main loop.
            </summary>
            <param name="function">The method.</param>
            <param name="priority">The priority with which to invoke the method.</param>
            <returns>A task that can be used to track the method's execution.</returns>
        </member>
        <member name="M:Avalonia.Threading.JobRunner.Post(System.Action,Avalonia.Threading.DispatcherPriority)">
            <summary>
            Post action that will be invoked on main thread
            </summary>
            <param name="action">The method.</param>
            
            <param name="priority">The priority with which to invoke the method.</param>
        </member>
        <member name="M:Avalonia.Threading.JobRunner.UpdateServices">
            <summary>
            Allows unit tests to change the platform threading interface.
            </summary>
        </member>
        <member name="P:Avalonia.Threading.JobRunner.IJob.Priority">
            <summary>
            Gets the job priority.
            </summary>
        </member>
        <member name="M:Avalonia.Threading.JobRunner.IJob.Run">
            <summary>
            Runs the job.
            </summary>
        </member>
        <member name="T:Avalonia.Threading.JobRunner.Job">
            <summary>
            A job to run.
            </summary>
        </member>
        <member name="F:Avalonia.Threading.JobRunner.Job._action">
            <summary>
            The method to call.
            </summary>
        </member>
        <member name="F:Avalonia.Threading.JobRunner.Job._taskCompletionSource">
            <summary>
            The task completion source.
            </summary>
        </member>
        <member name="M:Avalonia.Threading.JobRunner.Job.#ctor(System.Action,Avalonia.Threading.DispatcherPriority,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Avalonia.Threading.JobRunner.Job"/> class.
            </summary>
            <param name="action">The method to call.</param>
            <param name="priority">The job priority.</param>
            <param name="throwOnUiThread">Do not wrap exception in TaskCompletionSource</param>
        </member>
        <member name="P:Avalonia.Threading.JobRunner.Job.Priority">
            <inheritdoc/>
        </member>
        <member name="P:Avalonia.Threading.JobRunner.Job.Task">
            <summary>
            The task.
            </summary>
        </member>
        <member name="M:Avalonia.Threading.JobRunner.Job.Avalonia#Threading#JobRunner#IJob#Run">
            <inheritdoc/>
        </member>
        <member name="T:Avalonia.Threading.JobRunner.Job`1">
            <summary>
            A job to run.
            </summary>
        </member>
        <member name="M:Avalonia.Threading.JobRunner.Job`1.#ctor(System.Func{`0},Avalonia.Threading.DispatcherPriority)">
            <summary>
            Initializes a new instance of the <see cref="T:Avalonia.Threading.JobRunner.Job"/> class.
            </summary>
            <param name="function">The method to call.</param>
            <param name="priority">The job priority.</param>
        </member>
        <member name="P:Avalonia.Threading.JobRunner.Job`1.Priority">
            <inheritdoc/>
        </member>
        <member name="P:Avalonia.Threading.JobRunner.Job`1.Task">
            <summary>
            The task.
            </summary>
        </member>
        <member name="M:Avalonia.Threading.JobRunner.Job`1.Avalonia#Threading#JobRunner#IJob#Run">
            <inheritdoc/>
        </member>
        <member name="T:Avalonia.Utilities.AvaloniaPropertyValueStore`1">
            <summary>
            Stores values with <see cref="T:Avalonia.AvaloniaProperty"/> as key.
            </summary>
            <typeparam name="TValue">Stored value type.</typeparam>
        </member>
        <member name="T:Avalonia.Utilities.DeferredSetter`1">
            <summary>
            A utility class to enable deferring assignment until after property-changed notifications are sent.
            Used to fix #855.
            </summary>
            <typeparam name="TSetRecord">The type of value with which to track the delayed assignment.</typeparam>
        </member>
        <member name="T:Avalonia.Utilities.DeferredSetter`1.NotifyDisposable">
            <summary>
            Disposable that marks the property as currently notifying.
            When disposed, marks the property as done notifying.
            </summary>
        </member>
        <member name="T:Avalonia.Utilities.ISetAndNotifyHandler`1">
            <summary>
            Handler for set and notify requests.
            </summary>
            <typeparam name="TValue">Value type.</typeparam>
        </member>
        <member name="M:Avalonia.Utilities.ISetAndNotifyHandler`1.HandleSetAndNotify(Avalonia.AvaloniaProperty,`0@,`0)">
            <summary>
            Handles deferred setter requests to set a value.
            </summary>
            <param name="property">Property being set.</param>
            <param name="backing">Backing field reference.</param>
            <param name="value">New value.</param>
        </member>
        <member name="T:Avalonia.Utilities.IWeakSubscriber`1">
            <summary>
            Defines a listener to a event subscribed vis the <see cref="T:Avalonia.Utilities.WeakSubscriptionManager"/>.
            </summary>
            <typeparam name="T">The type of the event arguments.</typeparam>
        </member>
        <member name="M:Avalonia.Utilities.IWeakSubscriber`1.OnEvent(System.Object,`0)">
            <summary>
            Invoked when the subscribed event is raised.
            </summary>
            <param name="sender">The event sender.</param>
            <param name="e">The event arguments.</param>
        </member>
        <member name="T:Avalonia.Utilities.MathUtilities">
            <summary>
            Provides math utilities not provided in System.Math.
            </summary>
        </member>
        <member name="M:Avalonia.Utilities.MathUtilities.AreClose(System.Double,System.Double)">
            <summary>
            AreClose - Returns whether or not two doubles are "close".  That is, whether or 
            not they are within epsilon of each other.
            </summary> 
            <param name="value1"> The first double to compare. </param>
            <param name="value2"> The second double to compare. </param>
        </member>
        <member name="M:Avalonia.Utilities.MathUtilities.LessThan(System.Double,System.Double)">
            <summary>
            LessThan - Returns whether or not the first double is less than the second double.
            That is, whether or not the first is strictly less than *and* not within epsilon of
            the other number.
            </summary>
            <param name="value1"> The first double to compare. </param>
            <param name="value2"> The second double to compare. </param>
        </member>
        <member name="M:Avalonia.Utilities.MathUtilities.GreaterThan(System.Double,System.Double)">
            <summary>
            GreaterThan - Returns whether or not the first double is greater than the second double.
            That is, whether or not the first is strictly greater than *and* not within epsilon of
            the other number.
            </summary>
            <param name="value1"> The first double to compare. </param>
            <param name="value2"> The second double to compare. </param>
        </member>
        <member name="M:Avalonia.Utilities.MathUtilities.LessThanOrClose(System.Double,System.Double)">
            <summary>
            LessThanOrClose - Returns whether or not the first double is less than or close to
            the second double.  That is, whether or not the first is strictly less than or within
            epsilon of the other number.
            </summary>
            <param name="value1"> The first double to compare. </param>
            <param name="value2"> The second double to compare. </param>
        </member>
        <member name="M:Avalonia.Utilities.MathUtilities.GreaterThanOrClose(System.Double,System.Double)">
            <summary>
            GreaterThanOrClose - Returns whether or not the first double is greater than or close to
            the second double.  That is, whether or not the first is strictly greater than or within
            epsilon of the other number.
            </summary>
            <param name="value1"> The first double to compare. </param>
            <param name="value2"> The second double to compare. </param>
        </member>
        <member name="M:Avalonia.Utilities.MathUtilities.IsOne(System.Double)">
            <summary>
            IsOne - Returns whether or not the double is "close" to 1.  Same as AreClose(double, 1),
            but this is faster.
            </summary>
            <param name="value"> The double to compare to 1. </param>
        </member>
        <member name="M:Avalonia.Utilities.MathUtilities.IsZero(System.Double)">
            <summary>
            IsZero - Returns whether or not the double is "close" to 0.  Same as AreClose(double, 0),
            but this is faster.
            </summary>
            <param name="value"> The double to compare to 0. </param>
        </member>
        <member name="M:Avalonia.Utilities.MathUtilities.Clamp(System.Double,System.Double,System.Double)">
            <summary>
            Clamps a value between a minimum and maximum value.
            </summary>
            <param name="val">The value.</param>
            <param name="min">The minimum value.</param>
            <param name="max">The maximum value.</param>
            <returns>The clamped value.</returns>
        </member>
        <member name="M:Avalonia.Utilities.MathUtilities.RoundLayoutValue(System.Double,System.Double)">
            <summary>
            Calculates the value to be used for layout rounding at high DPI.
            </summary>
            <param name="value">Input value to be rounded.</param>
            <param name="dpiScale">Ratio of screen's DPI to layout DPI</param>
            <returns>Adjusted value that will produce layout rounding on screen at high dpi.</returns>
            <remarks>This is a layout helper method. It takes DPI into account and also does not return
            the rounded value if it is unacceptable for layout, e.g. Infinity or NaN. It's a helper associated with
            UseLayoutRounding  property and should not be used as a general rounding utility.</remarks>
        </member>
        <member name="M:Avalonia.Utilities.MathUtilities.Clamp(System.Int32,System.Int32,System.Int32)">
            <summary>
            Clamps a value between a minimum and maximum value.
            </summary>
            <param name="val">The value.</param>
            <param name="min">The minimum value.</param>
            <param name="max">The maximum value.</param>
            <returns>The clamped value.</returns>
        </member>
        <member name="T:Avalonia.Utilities.IRef`1">
            <summary>
            A ref-counted wrapper for a disposable object.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="P:Avalonia.Utilities.IRef`1.Item">
            <summary>
            The item that is being ref-counted.
            </summary>
        </member>
        <member name="M:Avalonia.Utilities.IRef`1.Clone">
            <summary>
            Create another reference to this object and increment the refcount.
            </summary>
            <returns>A new reference to this object.</returns>
        </member>
        <member name="M:Avalonia.Utilities.IRef`1.CloneAs``1">
            <summary>
            Create another reference to the same object, but cast the object to a different type.
            </summary>
            <typeparam name="TResult">The type of the new reference.</typeparam>
            <returns>A reference to the value as the new type but sharing the refcount.</returns>
        </member>
        <member name="P:Avalonia.Utilities.IRef`1.RefCount">
            <summary>
            The current refcount of the object tracked in this reference. For debugging/unit test use only.
            </summary>
        </member>
        <member name="M:Avalonia.Utilities.RefCountable.Create``1(``0)">
            <summary>
            Create a reference counted object wrapping the given item.
            </summary>
            <typeparam name="T">The type of item.</typeparam>
            <param name="item">The item to refcount.</param>
            <returns>The refcounted reference to the item.</returns>
        </member>
        <member name="M:Avalonia.Utilities.RefCountable.CreateUnownedNotClonable``1(``0)">
            <summary>
            Create an non-owning non-clonable reference to an item.
            </summary>
            <typeparam name="T">The type of item.</typeparam>
            <param name="item">The item.</param>
            <returns>A temporary reference that cannot be cloned that doesn't own the element.</returns>
        </member>
        <member name="T:Avalonia.Utilities.SingleOrDictionary`2">
            <summary>
            Stores either a single key value pair or constructs a dictionary when more than one value is stored.
            </summary>
            <typeparam name="TKey">The type of the key.</typeparam>
            <typeparam name="TValue">The type of the value.</typeparam>
        </member>
        <member name="T:Avalonia.Utilities.SingleOrQueue`1">
            <summary>
            FIFO Queue optimized for holding zero or one items.
            </summary>
            <typeparam name="T">The type of items held in the queue.</typeparam>
        </member>
        <member name="T:Avalonia.Utilities.SynchronousCompletionAsyncResult`1">
            <summary>
            A task-like operation that is guaranteed to finish continuations synchronously,
            can be used for parametrized one-shot events
            </summary>
        </member>
        <member name="T:Avalonia.Utilities.SynchronousCompletionAsyncResultSource`1">
            <summary>
            Source for incomplete SynchronousCompletionAsyncResult
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="T:Avalonia.Utilities.TypeUtilities">
            <summary>
            Provides utilities for working with types at runtime.
            </summary>
        </member>
        <member name="M:Avalonia.Utilities.TypeUtilities.AcceptsNull(System.Type)">
            <summary>
            Returns a value indicating whether null can be assigned to the specified type.
            </summary>
            <param name="type">The type.</param>
            <returns>True if the type accepts null values; otherwise false.</returns>
        </member>
        <member name="M:Avalonia.Utilities.TypeUtilities.TryConvert(System.Type,System.Object,System.Globalization.CultureInfo,System.Object@)">
            <summary>
            Try to convert a value to a type by any means possible.
            </summary>
            <param name="to">The type to cast to.</param>
            <param name="value">The value to cast.</param>
            <param name="culture">The culture to use.</param>
            <param name="result">If successful, contains the cast value.</param>
            <returns>True if the cast was successful, otherwise false.</returns>
        </member>
        <member name="M:Avalonia.Utilities.TypeUtilities.TryConvertImplicit(System.Type,System.Object,System.Object@)">
            <summary>
            Try to convert a value to a type using the implicit conversions allowed by the C#
            language.
            </summary>
            <param name="to">The type to cast to.</param>
            <param name="value">The value to cast.</param>
            <param name="result">If successful, contains the cast value.</param>
            <returns>True if the cast was successful, otherwise false.</returns>
        </member>
        <member name="M:Avalonia.Utilities.TypeUtilities.ConvertOrDefault(System.Object,System.Type,System.Globalization.CultureInfo)">
            <summary>
            Convert a value to a type by any means possible, returning the default for that type
            if the value could not be converted.
            </summary>
            <param name="value">The value to cast.</param>
            <param name="type">The type to cast to..</param>
            <param name="culture">The culture to use.</param>
            <returns>A value of <paramref name="type"/>.</returns>
        </member>
        <member name="M:Avalonia.Utilities.TypeUtilities.ConvertImplicitOrDefault(System.Object,System.Type)">
            <summary>
            Convert a value to a type using the implicit conversions allowed by the C# language or
            return the default for the type if the value could not be converted.
            </summary>
            <param name="value">The value to cast.</param>
            <param name="type">The type to cast to..</param>
            <returns>A value of <paramref name="type"/>.</returns>
        </member>
        <member name="M:Avalonia.Utilities.TypeUtilities.Default(System.Type)">
            <summary>
            Gets the default value for the specified type.
            </summary>
            <param name="type">The type.</param>
            <returns>The default value.</returns>
        </member>
        <member name="M:Avalonia.Utilities.TypeUtilities.IsNumeric(System.Type)">
            <summary>
            Determines if a type is numeric.  Nullable numeric types are considered numeric.
            </summary>
            <returns>
            True if the type is numeric; otherwise false.
            </returns>
            <remarks>
            Boolean is not considered numeric.
            </remarks>
        </member>
        <member name="T:Avalonia.Utilities.WeakEventHandlerManager">
            <summary>
            Manages subscriptions to events using weak listeners.
            </summary>
        </member>
        <member name="M:Avalonia.Utilities.WeakEventHandlerManager.Subscribe``3(``0,System.String,System.EventHandler{``1})">
            <summary>
            Subscribes to an event on an object using a weak subscription.
            </summary>
            <typeparam name="TTarget">The type of the target.</typeparam>
            <typeparam name="TEventArgs">The type of the event arguments.</typeparam>
            <typeparam name="TSubscriber">The type of the subscriber.</typeparam>
            <param name="target">The event source.</param>
            <param name="eventName">The name of the event.</param>
            <param name="subscriber">The subscriber.</param>
        </member>
        <member name="M:Avalonia.Utilities.WeakEventHandlerManager.Unsubscribe``2(System.Object,System.String,System.EventHandler{``0})">
            <summary>
            Unsubscribes from an event.
            </summary>
            <typeparam name="TEventArgs">The type of the event arguments.</typeparam>
            <typeparam name="TSubscriber">The type of the subscriber.</typeparam>
            <param name="target">The event source.</param>
            <param name="eventName">The name of the event.</param>
            <param name="subscriber">The subscriber.</param>
        </member>
        <member name="T:Avalonia.Utilities.WeakObservable">
            <summary>
            Provides extension methods for working with weak event handlers.
            </summary>
        </member>
        <member name="M:Avalonia.Utilities.WeakObservable.FromEventPattern``2(``0,System.String)">
            <summary>
            Converts a .NET event conforming to the standard .NET event pattern into an observable
            sequence, subscribing weakly.
            </summary>
            <typeparam name="TTarget">The type of target.</typeparam>
            <typeparam name="TEventArgs">The type of the event args.</typeparam>
            <param name="target">Object instance that exposes the event to convert.</param>
            <param name="eventName">Name of the event to convert.</param>
            <returns></returns>
        </member>
        <member name="T:Avalonia.Utilities.WeakSubscriptionManager">
            <summary>
            Manages subscriptions to events using weak listeners.
            </summary>
        </member>
        <member name="M:Avalonia.Utilities.WeakSubscriptionManager.Subscribe``2(``0,System.String,Avalonia.Utilities.IWeakSubscriber{``1})">
            <summary>
            Subscribes to an event on an object using a weak subscription.
            </summary>
            <typeparam name="TTarget">The type of the target.</typeparam>
            <typeparam name="TEventArgs">The type of the event arguments.</typeparam>
            <param name="target">The event source.</param>
            <param name="eventName">The name of the event.</param>
            <param name="subscriber">The subscriber.</param>
        </member>
        <member name="M:Avalonia.Utilities.WeakSubscriptionManager.Unsubscribe``1(System.Object,System.String,Avalonia.Utilities.IWeakSubscriber{``0})">
            <summary>
            Unsubscribes from an event.
            </summary>
            <typeparam name="T">The type of the event arguments.</typeparam>
            <param name="target">The event source.</param>
            <param name="eventName">The name of the event.</param>
            <param name="subscriber">The subscriber.</param>
        </member>
    </members>
</doc>
