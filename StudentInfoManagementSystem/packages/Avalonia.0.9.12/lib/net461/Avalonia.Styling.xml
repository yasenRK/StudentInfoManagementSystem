<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Avalonia.Styling</name>
    </assembly>
    <members>
        <member name="T:Avalonia.Controls.Classes">
            <summary>
            Holds a collection of style classes for an <see cref="T:Avalonia.IStyledElement"/>.
            </summary>
            <remarks>
            Similar to CSS, each control may have any number of styling classes applied.
            </remarks>
        </member>
        <member name="M:Avalonia.Controls.Classes.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Avalonia.Controls.Classes"/> class.
            </summary>
        </member>
        <member name="M:Avalonia.Controls.Classes.#ctor(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Initializes a new instance of the <see cref="T:Avalonia.Controls.Classes"/> class.
            </summary>
            <param name="items">The initial items.</param>
        </member>
        <member name="M:Avalonia.Controls.Classes.#ctor(System.String[])">
            <summary>
            Initializes a new instance of the <see cref="T:Avalonia.Controls.Classes"/> class.
            </summary>
            <param name="items">The initial items.</param>
        </member>
        <member name="M:Avalonia.Controls.Classes.Parse(System.String)">
            <summary>
            Parses a classes string.
            </summary>
            <param name="s">The string.</param>
            <returns>The <see cref="T:Avalonia.Controls.Classes"/>.</returns>
        </member>
        <member name="M:Avalonia.Controls.Classes.Add(System.String)">
            <summary>
            Adds a style class to the collection.
            </summary>
            <param name="name">The class name.</param>
            <remarks>
            Only standard classes may be added via this method. To add pseudoclasses (classes
            beginning with a ':' character) use the protected <see cref="P:Avalonia.StyledElement.PseudoClasses"/>
            property.
            </remarks>
        </member>
        <member name="M:Avalonia.Controls.Classes.AddRange(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Adds a style classes to the collection.
            </summary>
            <param name="names">The class names.</param>
            <remarks>
            Only standard classes may be added via this method. To add pseudoclasses (classes
            beginning with a ':' character) use the protected <see cref="P:Avalonia.StyledElement.PseudoClasses"/>
            property.
            </remarks>
        </member>
        <member name="M:Avalonia.Controls.Classes.Clear">
            <summary>
            Remvoes all non-pseudoclasses from the collection.
            </summary>
        </member>
        <member name="M:Avalonia.Controls.Classes.Insert(System.Int32,System.String)">
            <summary>
            Inserts a style class into the collection.
            </summary>
            <param name="index">The index to insert the class at.</param>
            <param name="name">The class name.</param>
            <remarks>
            Only standard classes may be added via this method. To add pseudoclasses (classes
            beginning with a ':' character) use the protected <see cref="P:Avalonia.StyledElement.PseudoClasses"/>
            property.
            </remarks>
        </member>
        <member name="M:Avalonia.Controls.Classes.InsertRange(System.Int32,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Inserts style classes into the collection.
            </summary>
            <param name="index">The index to insert the class at.</param>
            <param name="names">The class names.</param>
            <remarks>
            Only standard classes may be added via this method. To add pseudoclasses (classes
            beginning with a ':' character) use the protected <see cref="P:Avalonia.StyledElement.PseudoClasses"/>
            property.
            </remarks>
        </member>
        <member name="M:Avalonia.Controls.Classes.Remove(System.String)">
            <summary>
            Removes a style class from the collection.
            </summary>
            <param name="name">The class name.</param>
            <remarks>
            Only standard classes may be removed via this method. To remove pseudoclasses (classes
            beginning with a ':' character) use the protected <see cref="P:Avalonia.StyledElement.PseudoClasses"/>
            property.
            </remarks>
        </member>
        <member name="M:Avalonia.Controls.Classes.RemoveAll(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Removes style classes from the collection.
            </summary>
            <param name="names">The class name.</param>
            <remarks>
            Only standard classes may be removed via this method. To remove pseudoclasses (classes
            beginning with a ':' character) use the protected <see cref="P:Avalonia.StyledElement.PseudoClasses"/>
            property.
            </remarks>
        </member>
        <member name="M:Avalonia.Controls.Classes.RemoveAt(System.Int32)">
            <summary>
            Removes a style class from the collection.
            </summary>
            <param name="index">The index of the class in the collection.</param>
            <remarks>
            Only standard classes may be removed via this method. To remove pseudoclasses (classes
            beginning with a ':' character) use the protected <see cref="P:Avalonia.StyledElement.PseudoClasses"/>
            property.
            </remarks>
        </member>
        <member name="M:Avalonia.Controls.Classes.RemoveRange(System.Int32,System.Int32)">
            <summary>
            Removes style classes from the collection.
            </summary>
            <param name="index">The first index to remove.</param>
            <param name="count">The number of items to remove.</param>
        </member>
        <member name="M:Avalonia.Controls.Classes.Replace(System.Collections.Generic.IList{System.String})">
            <summary>
            Removes all non-pseudoclasses in the collection and adds a new set.
            </summary>
            <param name="source">The new contents of the collection.</param>
        </member>
        <member name="M:Avalonia.Controls.Classes.Avalonia#Controls#IPseudoClasses#Add(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:Avalonia.Controls.Classes.Avalonia#Controls#IPseudoClasses#Remove(System.String)">
            <inheritdoc/>
        </member>
        <member name="T:Avalonia.Controls.INameScope">
            <summary>
            Defines a name scope.
            </summary>
        </member>
        <member name="M:Avalonia.Controls.INameScope.Register(System.String,System.Object)">
            <summary>
            Registers an element in the name scope.
            </summary>
            <param name="name">The element name.</param>
            <param name="element">The element.</param>
        </member>
        <member name="M:Avalonia.Controls.INameScope.FindAsync(System.String)">
            <summary>
            Finds a named element in the name scope, waits for the scope to be completely populated before returning null
            Returned task is configured to run any continuations synchronously.
            </summary>
            <param name="name">The name.</param>
            <returns>The element, or null if the name was not found.</returns>
        </member>
        <member name="M:Avalonia.Controls.INameScope.Find(System.String)">
            <summary>
            Finds a named element in the name scope, returns immediately, doesn't traverse the name scope stack
            </summary>
            <param name="name">The name.</param>
            <returns>The element, or null if the name was not found.</returns>
        </member>
        <member name="M:Avalonia.Controls.INameScope.Complete">
            <summary>
            Marks the name scope as completed, no further registrations will be allowed
            </summary>
        </member>
        <member name="P:Avalonia.Controls.INameScope.IsCompleted">
            <summary>
            Returns whether further registrations are allowed on the scope
            </summary>
        </member>
        <member name="T:Avalonia.Controls.IPseudoClasses">
            <summary>
            Exposes an interface for setting pseudoclasses on a <see cref="T:Avalonia.Controls.Classes"/> collection.
            </summary>
        </member>
        <member name="M:Avalonia.Controls.IPseudoClasses.Add(System.String)">
            <summary>
            Adds a pseudoclass to the collection.
            </summary>
            <param name="name">The pseudoclass name.</param>
        </member>
        <member name="M:Avalonia.Controls.IPseudoClasses.Remove(System.String)">
            <summary>
            Removes a pseudoclass from the collection.
            </summary>
            <param name="name">The pseudoclass name.</param>
        </member>
        <member name="T:Avalonia.Controls.IResourceDictionary">
            <summary>
            An indexed dictionary of resources.
            </summary>
        </member>
        <member name="P:Avalonia.Controls.IResourceDictionary.MergedDictionaries">
            <summary>
            Gets a collection of child resource dictionaries.
            </summary>
        </member>
        <member name="T:Avalonia.Controls.IResourceNode">
            <summary>
            Represents resource provider in a tree.
            </summary>
        </member>
        <member name="P:Avalonia.Controls.IResourceNode.ResourceParent">
            <summary>
            Gets the parent resource node, if any.
            </summary>
        </member>
        <member name="T:Avalonia.Controls.IResourceProvider">
            <summary>
            Represents an object that can be queried for resources.
            </summary>
        </member>
        <member name="E:Avalonia.Controls.IResourceProvider.ResourcesChanged">
            <summary>
            Raised when resources in the provider are changed.
            </summary>
        </member>
        <member name="P:Avalonia.Controls.IResourceProvider.HasResources">
            <summary>
            Gets a value indicating whether the element has resources.
            </summary>
        </member>
        <member name="M:Avalonia.Controls.IResourceProvider.TryGetResource(System.Object,System.Object@)">
            <summary>
            Tries to find a resource within the provider.
            </summary>
            <param name="key">The resource key.</param>
            <param name="value">
            When this method returns, contains the value associated with the specified key,
            if the key is found; otherwise, null.
            </param>
            <returns>
            True if the resource if found, otherwise false.
            </returns>
        </member>
        <member name="T:Avalonia.Controls.ISetInheritanceParent">
            <summary>
            Defines an interface through which a <see cref="T:Avalonia.StyledElement"/>'s inheritance parent can be set.
            </summary>
            <remarks>
            You should not usually need to use this interface - it is for advanced scenarios only.
            Additionally, <see cref="T:Avalonia.Controls.ISetLogicalParent"/> also sets the inheritance parent; this
            interface is only needed where the logical and inheritance parents differ.
            </remarks>
        </member>
        <member name="M:Avalonia.Controls.ISetInheritanceParent.SetParent(Avalonia.IAvaloniaObject)">
            <summary>
            Sets the control's inheritance parent.
            </summary>
            <param name="parent">The parent.</param>
        </member>
        <member name="T:Avalonia.Controls.ISetLogicalParent">
            <summary>
            Defines an interface through which a <see cref="T:Avalonia.StyledElement"/>'s logical parent can be set.
            </summary>
            <remarks>
            You should not usually need to use this interface - it is for advanced scenarios only.
            </remarks>
        </member>
        <member name="M:Avalonia.Controls.ISetLogicalParent.SetParent(Avalonia.LogicalTree.ILogical)">
            <summary>
            Sets the control's parent.
            </summary>
            <param name="parent">The parent.</param>
        </member>
        <member name="T:Avalonia.Controls.ISetResourceParent">
            <summary>
            Defines an interface through which an <see cref="T:Avalonia.Controls.IResourceNode"/>'s parent can be set.
            </summary>
            <remarks>
            You should not usually need to use this interface - it is for internal use only.
            </remarks>
        </member>
        <member name="M:Avalonia.Controls.ISetResourceParent.SetParent(Avalonia.Controls.IResourceNode)">
            <summary>
            Sets the resource parent.
            </summary>
            <param name="parent">The parent.</param>
        </member>
        <member name="M:Avalonia.Controls.ISetResourceParent.ParentResourcesChanged(Avalonia.Controls.ResourcesChangedEventArgs)">
            <summary>
            Notifies the resource node that a change has been made to the resources in its parent.
            </summary>
            <param name="e">The event args.</param>
            <remarks>
            This method will be called automatically by the framework, you should not need to call
            this method yourself.
            </remarks>
        </member>
        <member name="T:Avalonia.Controls.NameScope">
            <summary>
            Implements a name scope.
            </summary>
        </member>
        <member name="F:Avalonia.Controls.NameScope.NameScopeProperty">
            <summary>
            Defines the NameScope attached property.
            </summary>
        </member>
        <member name="P:Avalonia.Controls.NameScope.IsCompleted">
            <inheritdoc/>
        </member>
        <member name="M:Avalonia.Controls.NameScope.GetNameScope(Avalonia.StyledElement)">
            <summary>
            Gets the value of the attached <see cref="F:Avalonia.Controls.NameScope.NameScopeProperty"/> on a styled element.
            </summary>
            <param name="styled">The styled element.</param>
            <returns>The value of the NameScope attached property.</returns>
        </member>
        <member name="M:Avalonia.Controls.NameScope.SetNameScope(Avalonia.StyledElement,Avalonia.Controls.INameScope)">
            <summary>
            Sets the value of the attached <see cref="F:Avalonia.Controls.NameScope.NameScopeProperty"/> on a styled element.
            </summary>
            <param name="styled">The styled element.</param>
            <param name="value">The value to set.</param>
        </member>
        <member name="M:Avalonia.Controls.NameScope.Register(System.String,System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Avalonia.Controls.NameScope.Find(System.String)">
            <inheritdoc />
        </member>
        <member name="T:Avalonia.Controls.NameScopeExtensions">
            <summary>
            Extension methods for <see cref="T:Avalonia.Controls.INameScope"/>.
            </summary>
        </member>
        <member name="M:Avalonia.Controls.NameScopeExtensions.Find``1(Avalonia.Controls.INameScope,System.String)">
            <summary>
            Finds a named element in an <see cref="T:Avalonia.Controls.INameScope"/>.
            </summary>
            <typeparam name="T">The element type.</typeparam>
            <param name="nameScope">The name scope.</param>
            <param name="name">The name.</param>
            <returns>The named element or null if not found.</returns>
        </member>
        <member name="M:Avalonia.Controls.NameScopeExtensions.Find``1(Avalonia.LogicalTree.ILogical,System.String)">
            <summary>
            Finds a named element in an <see cref="T:Avalonia.Controls.INameScope"/>.
            </summary>
            <typeparam name="T">The element type.</typeparam>
            <param name="anchor">The control to take the name scope from.</param>
            <param name="name">The name.</param>
            <returns>The named element or null if not found.</returns>
        </member>
        <member name="M:Avalonia.Controls.NameScopeExtensions.Get``1(Avalonia.Controls.INameScope,System.String)">
            <summary>
            Gets a named element from an <see cref="T:Avalonia.Controls.INameScope"/> or throws if no element of the
            requested name was found.
            </summary>
            <typeparam name="T">The element type.</typeparam>
            <param name="nameScope">The name scope.</param>
            <param name="name">The name.</param>
            <returns>The named element.</returns>
        </member>
        <member name="M:Avalonia.Controls.NameScopeExtensions.Get``1(Avalonia.LogicalTree.ILogical,System.String)">
            <summary>
            Gets a named element from an <see cref="T:Avalonia.Controls.INameScope"/> or throws if no element of the
            requested name was found.
            </summary>
            <typeparam name="T">The element type.</typeparam>
            <param name="anchor">The control to take the name scope from.</param>
            <param name="name">The name.</param>
            <returns>The named element.</returns>
        </member>
        <member name="M:Avalonia.Controls.NameScopeLocator.Track(Avalonia.Controls.INameScope,System.String)">
            <summary>
            Tracks a named control relative to another control.
            </summary>
            <param name="scope">The scope relative from which the object should be resolved.</param>
            <param name="name">The name of the object to find.</param>
        </member>
        <member name="T:Avalonia.Controls.ResourceDictionary">
            <summary>
            An indexed dictionary of resources.
            </summary>
        </member>
        <member name="M:Avalonia.Controls.ResourceDictionary.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Avalonia.Controls.ResourceDictionary"/> class.
            </summary>
        </member>
        <member name="E:Avalonia.Controls.ResourceDictionary.ResourcesChanged">
            <inheritdoc/>
        </member>
        <member name="P:Avalonia.Controls.ResourceDictionary.MergedDictionaries">
            <inheritdoc/>
        </member>
        <member name="P:Avalonia.Controls.ResourceDictionary.Avalonia#Controls#IResourceProvider#HasResources">
            <inheritdoc/>
        </member>
        <member name="P:Avalonia.Controls.ResourceDictionary.Avalonia#Controls#IResourceNode#ResourceParent">
            <inheritdoc/>
        </member>
        <member name="M:Avalonia.Controls.ResourceDictionary.Avalonia#Controls#ISetResourceParent#ParentResourcesChanged(Avalonia.Controls.ResourcesChangedEventArgs)">
            <inheritdoc/>
        </member>
        <member name="M:Avalonia.Controls.ResourceDictionary.Avalonia#Controls#ISetResourceParent#SetParent(Avalonia.Controls.IResourceNode)">
            <inheritdoc/>
        </member>
        <member name="M:Avalonia.Controls.ResourceDictionary.TryGetResource(System.Object,System.Object@)">
            <inheritdoc/>
        </member>
        <member name="M:Avalonia.Controls.ResourceNodeExtensions.FindResource(Avalonia.Controls.IResourceNode,System.Object)">
            <summary>
            Finds the specified resource by searching up the logical tree and then global styles.
            </summary>
            <param name="control">The control.</param>
            <param name="key">The resource key.</param>
            <returns>The resource, or <see cref="F:Avalonia.AvaloniaProperty.UnsetValue"/> if not found.</returns>
        </member>
        <member name="M:Avalonia.Controls.ResourceNodeExtensions.TryFindResource(Avalonia.Controls.IResourceNode,System.Object,System.Object@)">
            <summary>
            Tries to the specified resource by searching up the logical tree and then global styles.
            </summary>
            <param name="control">The control.</param>
            <param name="key">The resource key.</param>
            <param name="value">On return, contains the resource if found, otherwise null.</param>
            <returns>True if the resource was found; otherwise false.</returns>
        </member>
        <member name="T:Avalonia.IDataContextProvider">
            <summary>
            Defines an element with a data context that can be used for binding.
            </summary>
        </member>
        <member name="P:Avalonia.IDataContextProvider.DataContext">
            <summary>
            Gets or sets the element's data context.
            </summary>
        </member>
        <member name="T:Avalonia.INamed">
            <summary>
            Interface for named elements.
            </summary>
        </member>
        <member name="P:Avalonia.INamed.Name">
            <summary>
            Gets the element name.
            </summary>
        </member>
        <member name="E:Avalonia.IStyledElement.Initialized">
            <summary>
            Occurs when the control has finished initialization.
            </summary>
        </member>
        <member name="P:Avalonia.IStyledElement.IsInitialized">
            <summary>
            Gets a value that indicates whether the element has finished initialization.
            </summary>
        </member>
        <member name="P:Avalonia.IStyledElement.Classes">
            <summary>
            Gets or sets the control's styling classes.
            </summary>
        </member>
        <member name="P:Avalonia.IStyledElement.Parent">
            <summary>
            Gets the control's logical parent.
            </summary>
        </member>
        <member name="T:Avalonia.LogicalTree.ControlLocator">
            <summary>
            Locates controls relative to other controls.
            </summary>
        </member>
        <member name="T:Avalonia.LogicalTree.ILogical">
            <summary>
            Represents a node in the logical tree.
            </summary>
        </member>
        <member name="E:Avalonia.LogicalTree.ILogical.AttachedToLogicalTree">
            <summary>
            Raised when the control is attached to a rooted logical tree.
            </summary>
        </member>
        <member name="E:Avalonia.LogicalTree.ILogical.DetachedFromLogicalTree">
            <summary>
            Raised when the control is detached from a rooted logical tree.
            </summary>
        </member>
        <member name="P:Avalonia.LogicalTree.ILogical.IsAttachedToLogicalTree">
            <summary>
            Gets a value indicating whether the element is attached to a rooted logical tree.
            </summary>
        </member>
        <member name="P:Avalonia.LogicalTree.ILogical.LogicalParent">
            <summary>
            Gets the logical parent.
            </summary>
        </member>
        <member name="P:Avalonia.LogicalTree.ILogical.LogicalChildren">
            <summary>
            Gets the logical children.
            </summary>
        </member>
        <member name="M:Avalonia.LogicalTree.ILogical.NotifyAttachedToLogicalTree(Avalonia.LogicalTree.LogicalTreeAttachmentEventArgs)">
            <summary>
            Notifies the control that it is being attached to a rooted logical tree.
            </summary>
            <param name="e">The event args.</param>
            <remarks>
            This method will be called automatically by the framework, you should not need to call
            this method yourself.
            </remarks>
        </member>
        <member name="M:Avalonia.LogicalTree.ILogical.NotifyDetachedFromLogicalTree(Avalonia.LogicalTree.LogicalTreeAttachmentEventArgs)">
            <summary>
            Notifies the control that it is being detached from a rooted logical tree.
            </summary>
            <param name="e">The event args.</param>
            <remarks>
            This method will be called automatically by the framework, you should not need to call
            this method yourself.
            </remarks>
        </member>
        <member name="M:Avalonia.LogicalTree.ILogical.NotifyResourcesChanged(Avalonia.Controls.ResourcesChangedEventArgs)">
            <summary>
            Notifies the control that a change has been made to resources that apply to it.
            </summary>
            <param name="e">The event args.</param>
            <remarks>
            This method will be called automatically by the framework, you should not need to call
            this method yourself.
            </remarks>
        </member>
        <member name="T:Avalonia.LogicalTree.LogicalTreeAttachmentEventArgs">
            <summary>
            Holds the event arguments for the <see cref="E:Avalonia.LogicalTree.ILogical.AttachedToLogicalTree"/> and 
            <see cref="E:Avalonia.LogicalTree.ILogical.DetachedFromLogicalTree"/> events.
            </summary>
        </member>
        <member name="M:Avalonia.LogicalTree.LogicalTreeAttachmentEventArgs.#ctor(Avalonia.Styling.IStyleHost)">
            <summary>
            Initializes a new instance of the <see cref="T:Avalonia.LogicalTree.LogicalTreeAttachmentEventArgs"/> class.
            </summary>
            <param name="root">The root of the logical tree.</param>
        </member>
        <member name="P:Avalonia.LogicalTree.LogicalTreeAttachmentEventArgs.Root">
            <summary>
            Gets the root of the logical tree that the control is being attached to or detached from.
            </summary>
        </member>
        <member name="T:Avalonia.StyledElement">
            <summary>
            Extends an <see cref="T:Avalonia.Animation.Animatable"/> with the following features:
            
            - An inherited <see cref="P:Avalonia.StyledElement.DataContext"/>.
            - Implements <see cref="T:Avalonia.Styling.IStyleable"/> to allow styling to work on the styled element.
            - Implements <see cref="T:Avalonia.LogicalTree.ILogical"/> to form part of a logical tree.
            - A collection of class strings for custom styling.
            </summary>
        </member>
        <member name="F:Avalonia.StyledElement.DataContextProperty">
            <summary>
            Defines the <see cref="P:Avalonia.StyledElement.DataContext"/> property.
            </summary>
        </member>
        <member name="F:Avalonia.StyledElement.NameProperty">
            <summary>
            Defines the <see cref="P:Avalonia.StyledElement.Name"/> property.
            </summary>
        </member>
        <member name="F:Avalonia.StyledElement.ParentProperty">
            <summary>
            Defines the <see cref="P:Avalonia.StyledElement.Parent"/> property.
            </summary>
        </member>
        <member name="F:Avalonia.StyledElement.TemplatedParentProperty">
            <summary>
            Defines the <see cref="P:Avalonia.StyledElement.TemplatedParent"/> property.
            </summary>
        </member>
        <member name="M:Avalonia.StyledElement.#cctor">
            <summary>
            Initializes static members of the <see cref="T:Avalonia.StyledElement"/> class.
            </summary>
        </member>
        <member name="M:Avalonia.StyledElement.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Avalonia.StyledElement"/> class.
            </summary>
        </member>
        <member name="E:Avalonia.StyledElement.AttachedToLogicalTree">
            <summary>
            Raised when the styled element is attached to a rooted logical tree.
            </summary>
        </member>
        <member name="E:Avalonia.StyledElement.DetachedFromLogicalTree">
            <summary>
            Raised when the styled element is detached from a rooted logical tree.
            </summary>
        </member>
        <member name="E:Avalonia.StyledElement.DataContextChanged">
            <summary>
            Occurs when the <see cref="P:Avalonia.StyledElement.DataContext"/> property changes.
            </summary>
            <remarks>
            This event will be raised when the <see cref="P:Avalonia.StyledElement.DataContext"/> property has changed and
            all subscribers to that change have been notified.
            </remarks>
        </member>
        <member name="E:Avalonia.StyledElement.Initialized">
            <summary>
            Occurs when the styled element has finished initialization.
            </summary>
            <remarks>
            The Initialized event indicates that all property values on the styled element have been set.
            When loading the styled element from markup, it occurs when 
            <see cref="M:System.ComponentModel.ISupportInitialize.EndInit"/> is called *and* the styled element
            is attached to a rooted logical tree. When the styled element is created by code and
            <see cref="T:System.ComponentModel.ISupportInitialize"/> is not used, it is called when the styled element is attached
            to the visual tree.
            </remarks>
        </member>
        <member name="E:Avalonia.StyledElement.ResourcesChanged">
            <summary>
            Occurs when a resource in this styled element or a parent styled element has changed.
            </summary>
        </member>
        <member name="P:Avalonia.StyledElement.Name">
            <summary>
            Gets or sets the name of the styled element.
            </summary>
            <remarks>
            An element's name is used to uniquely identify an element within the element's name
            scope. Once the element is added to a logical tree, its name cannot be changed.
            </remarks>
        </member>
        <member name="P:Avalonia.StyledElement.Classes">
            <summary>
            Gets or sets the styled element's classes.
            </summary>
            <remarks>
            <para>
            Classes can be used to apply user-defined styling to styled elements, or to allow styled elements
            that share a common purpose to be easily selected.
            </para>
            <para>
            Even though this property can be set, the setter is only intended for use in object
            initializers. Assigning to this property does not change the underlying collection,
            it simply clears the existing collection and adds the contents of the assigned
            collection.
            </para>
            </remarks>
        </member>
        <member name="P:Avalonia.StyledElement.DataContext">
            <summary>
            Gets or sets the control's data context.
            </summary>
            <remarks>
            The data context is an inherited property that specifies the default object that will
            be used for data binding.
            </remarks>
        </member>
        <member name="P:Avalonia.StyledElement.IsInitialized">
            <summary>
            Gets a value that indicates whether the element has finished initialization.
            </summary>
            <remarks>
            For more information about when IsInitialized is set, see the <see cref="E:Avalonia.StyledElement.Initialized"/>
            event.
            </remarks>
        </member>
        <member name="P:Avalonia.StyledElement.Styles">
            <summary>
            Gets the styles for the styled element.
            </summary>
            <remarks>
            Styles for the entire application are added to the Application.Styles collection, but
            each styled element may in addition define its own styles which are applied to the styled element
            itself and its children.
            </remarks>
        </member>
        <member name="P:Avalonia.StyledElement.Resources">
            <summary>
            Gets or sets the styled element's resource dictionary.
            </summary>
        </member>
        <member name="P:Avalonia.StyledElement.TemplatedParent">
            <summary>
            Gets the styled element whose lookless template this styled element is part of.
            </summary>
        </member>
        <member name="P:Avalonia.StyledElement.LogicalChildren">
            <summary>
            Gets the styled element's logical children.
            </summary>
        </member>
        <member name="P:Avalonia.StyledElement.PseudoClasses">
            <summary>
            Gets the <see cref="P:Avalonia.StyledElement.Classes"/> collection in a form that allows adding and removing
            pseudoclasses.
            </summary>
        </member>
        <member name="P:Avalonia.StyledElement.Avalonia#LogicalTree#ILogical#IsAttachedToLogicalTree">
            <summary>
            Gets a value indicating whether the element is attached to a rooted logical tree.
            </summary>
        </member>
        <member name="P:Avalonia.StyledElement.Parent">
            <summary>
            Gets the styled element's logical parent.
            </summary>
        </member>
        <member name="P:Avalonia.StyledElement.Avalonia#LogicalTree#ILogical#LogicalParent">
            <summary>
            Gets the styled element's logical parent.
            </summary>
        </member>
        <member name="P:Avalonia.StyledElement.Avalonia#LogicalTree#ILogical#LogicalChildren">
            <summary>
            Gets the styled element's logical children.
            </summary>
        </member>
        <member name="P:Avalonia.StyledElement.Avalonia#Controls#IResourceProvider#HasResources">
            <inheritdoc/>
        </member>
        <member name="P:Avalonia.StyledElement.Avalonia#Controls#IResourceNode#ResourceParent">
            <inheritdoc/>
        </member>
        <member name="P:Avalonia.StyledElement.Avalonia#Styling#IStyleable#Classes">
            <inheritdoc/>
        </member>
        <member name="P:Avalonia.StyledElement.Avalonia#Styling#IStyleable#StyleKey">
            <summary>
            Gets the type by which the styled element is styled.
            </summary>
            <remarks>
            Usually controls are styled by their own type, but there are instances where you want
            a styled element to be styled by its base type, e.g. creating SpecialButton that
            derives from Button and adds extra functionality but is still styled as a regular
            Button.
            </remarks>
        </member>
        <member name="P:Avalonia.StyledElement.Avalonia#Styling#IStyleable#StyleDetach">
            <inheritdoc/>
        </member>
        <member name="P:Avalonia.StyledElement.Avalonia#Styling#IStyleHost#IsStylesInitialized">
            <inheritdoc/>
        </member>
        <member name="P:Avalonia.StyledElement.Avalonia#Styling#IStyleHost#StylingParent">
            <inheritdoc/>
        </member>
        <member name="M:Avalonia.StyledElement.BeginInit">
            <inheritdoc/>
        </member>
        <member name="M:Avalonia.StyledElement.EndInit">
            <inheritdoc/>
        </member>
        <member name="M:Avalonia.StyledElement.Avalonia#LogicalTree#ILogical#NotifyAttachedToLogicalTree(Avalonia.LogicalTree.LogicalTreeAttachmentEventArgs)">
            <inheritdoc/>
        </member>
        <member name="M:Avalonia.StyledElement.Avalonia#LogicalTree#ILogical#NotifyDetachedFromLogicalTree(Avalonia.LogicalTree.LogicalTreeAttachmentEventArgs)">
            <inheritdoc/>
        </member>
        <member name="M:Avalonia.StyledElement.Avalonia#LogicalTree#ILogical#NotifyResourcesChanged(Avalonia.Controls.ResourcesChangedEventArgs)">
            <inheritdoc/>
        </member>
        <member name="M:Avalonia.StyledElement.Avalonia#Controls#IResourceProvider#TryGetResource(System.Object,System.Object@)">
            <inheritdoc/>
        </member>
        <member name="M:Avalonia.StyledElement.Avalonia#Controls#ISetLogicalParent#SetParent(Avalonia.LogicalTree.ILogical)">
            <summary>
            Sets the styled element's logical parent.
            </summary>
            <param name="parent">The parent.</param>
        </member>
        <member name="M:Avalonia.StyledElement.Avalonia#Controls#ISetInheritanceParent#SetParent(Avalonia.IAvaloniaObject)">
            <summary>
            Sets the styled element's inheritance parent.
            </summary>
            <param name="parent">The parent.</param>
        </member>
        <member name="M:Avalonia.StyledElement.PseudoClass(Avalonia.AvaloniaProperty{System.Boolean},System.String)">
            <summary>
            Adds a pseudo-class to be set when a property is true.
            </summary>
            <param name="property">The property.</param>
            <param name="className">The pseudo-class.</param>
        </member>
        <member name="M:Avalonia.StyledElement.PseudoClass``1(Avalonia.AvaloniaProperty{System.Boolean},System.String)">
            <summary>
            Adds a pseudo-class to be set when a property is true.
            </summary>
            <typeparam name="TOwner">The type to apply the pseudo-class to.</typeparam>
            <param name="property">The property.</param>
            <param name="className">The pseudo-class.</param>
        </member>
        <member name="M:Avalonia.StyledElement.PseudoClass``1(Avalonia.AvaloniaProperty{``0},System.Func{``0,System.Boolean},System.String)">
            <summary>
            Adds a pseudo-class to be set when a property equals a certain value.
            </summary>
            <typeparam name="TProperty">The type of the property.</typeparam>
            <param name="property">The property.</param>
            <param name="selector">Returns a boolean value based on the property value.</param>
            <param name="className">The pseudo-class.</param>
        </member>
        <member name="M:Avalonia.StyledElement.PseudoClass``2(Avalonia.AvaloniaProperty{``1},System.Func{``1,System.Boolean},System.String)">
            <summary>
            Adds a pseudo-class to be set when a property equals a certain value.
            </summary>
            <typeparam name="TProperty">The type of the property.</typeparam>
            <typeparam name="TOwner">The type to apply the pseudo-class to.</typeparam>
            <param name="property">The property.</param>
            <param name="selector">Returns a boolean value based on the property value.</param>
            <param name="className">The pseudo-class.</param>
        </member>
        <member name="M:Avalonia.StyledElement.OnAttachedToLogicalTree(Avalonia.LogicalTree.LogicalTreeAttachmentEventArgs)">
            <summary>
            Called when the styled element is added to a rooted logical tree.
            </summary>
            <param name="e">The event args.</param>
        </member>
        <member name="M:Avalonia.StyledElement.OnDetachedFromLogicalTree(Avalonia.LogicalTree.LogicalTreeAttachmentEventArgs)">
            <summary>
            Called when the styled element is removed from a rooted logical tree.
            </summary>
            <param name="e">The event args.</param>
        </member>
        <member name="M:Avalonia.StyledElement.OnDataContextChanged(System.EventArgs)">
            <summary>
            Called when the <see cref="P:Avalonia.StyledElement.DataContext"/> property changes.
            </summary>
            <param name="e">The event args.</param>
        </member>
        <member name="M:Avalonia.StyledElement.OnDataContextBeginUpdate">
            <summary>
            Called when the <see cref="P:Avalonia.StyledElement.DataContext"/> begins updating.
            </summary>
        </member>
        <member name="M:Avalonia.StyledElement.OnDataContextEndUpdate">
            <summary>
            Called when the <see cref="P:Avalonia.StyledElement.DataContext"/> finishes updating.
            </summary>
        </member>
        <member name="M:Avalonia.StyledElement.OnInitialized">
            <summary>
            Called when the control finishes initialization.
            </summary>
        </member>
        <member name="T:Avalonia.Styling.ActivatedObservable">
            <summary>
            An observable which is switched on or off according to an activator observable.
            </summary>
            <remarks>
            An <see cref="T:Avalonia.Styling.ActivatedObservable"/> has two inputs: an activator observable and a 
            <see cref="P:Avalonia.Styling.ActivatedObservable.Source"/> observable which produces the activated value. When the activator 
            produces true, the <see cref="T:Avalonia.Styling.ActivatedObservable"/> will produce the current activated 
            value. When the activator produces false it will produce
            <see cref="F:Avalonia.AvaloniaProperty.UnsetValue"/>.
            </remarks>
        </member>
        <member name="M:Avalonia.Styling.ActivatedObservable.#ctor(System.IObservable{System.Boolean},System.IObservable{System.Object},System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Avalonia.Styling.ActivatedObservable"/> class.
            </summary>
            <param name="activator">The activator.</param>
            <param name="source">An observable that produces the activated value.</param>
            <param name="description">The binding description.</param>
        </member>
        <member name="P:Avalonia.Styling.ActivatedObservable.Source">
            <summary>
            Gets an observable which produces the <see cref="T:Avalonia.Styling.ActivatedValue"/>.
            </summary>
        </member>
        <member name="T:Avalonia.Styling.ActivatedSubject">
            <summary>
            A subject which is switched on or off according to an activator observable.
            </summary>
            <remarks>
            An <see cref="T:Avalonia.Styling.ActivatedSubject"/> extends <see cref="T:Avalonia.Styling.ActivatedObservable"/> to
            be an <see cref="T:System.Reactive.Subjects.ISubject`1"/>. When the object is active then values
            received via <see cref="M:Avalonia.Styling.ActivatedSubject.OnNext(System.Object)"/> will be passed to the source subject.
            </remarks>
        </member>
        <member name="M:Avalonia.Styling.ActivatedSubject.#ctor(System.IObservable{System.Boolean},System.Reactive.Subjects.ISubject{System.Object},System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Avalonia.Styling.ActivatedSubject"/> class.
            </summary>
            <param name="activator">The activator.</param>
            <param name="source">An observable that produces the activated value.</param>
            <param name="description">The binding description.</param>
        </member>
        <member name="P:Avalonia.Styling.ActivatedSubject.Source">
            <summary>
            Gets the underlying subject.
            </summary>
        </member>
        <member name="T:Avalonia.Styling.ActivatedValue">
            <summary>
            An value which is switched on or off according to an activator observable.
            </summary>
            <remarks>
            An <see cref="T:Avalonia.Styling.ActivatedValue"/> has two inputs: an activator observable and an
            <see cref="P:Avalonia.Styling.ActivatedValue.Value"/>. When the activator produces true, the 
            <see cref="T:Avalonia.Styling.ActivatedValue"/> will produce the current value. When the activator 
            produces false it will produce <see cref="F:Avalonia.AvaloniaProperty.UnsetValue"/>.
            </remarks>
        </member>
        <member name="M:Avalonia.Styling.ActivatedValue.#ctor(System.IObservable{System.Boolean},System.Object,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Avalonia.Styling.ActivatedObservable"/> class.
            </summary>
            <param name="activator">The activator.</param>
            <param name="value">The activated value.</param>
            <param name="description">The binding description.</param>
        </member>
        <member name="P:Avalonia.Styling.ActivatedValue.Activator">
            <summary>
            Gets the activator observable.
            </summary>
        </member>
        <member name="P:Avalonia.Styling.ActivatedValue.Description">
            <summary>
            Gets a description of the binding.
            </summary>
        </member>
        <member name="P:Avalonia.Styling.ActivatedValue.IsActive">
            <summary>
            Gets a value indicating whether the activator is active.
            </summary>
        </member>
        <member name="P:Avalonia.Styling.ActivatedValue.Value">
            <summary>
            Gets the value that will be produced when <see cref="P:Avalonia.Styling.ActivatedValue.IsActive"/> is true.
            </summary>
        </member>
        <member name="P:Avalonia.Styling.ChildSelector.InTemplate">
            <inheritdoc/>
        </member>
        <member name="P:Avalonia.Styling.ChildSelector.IsCombinator">
            <inheritdoc/>
        </member>
        <member name="P:Avalonia.Styling.ChildSelector.TargetType">
            <inheritdoc/>
        </member>
        <member name="P:Avalonia.Styling.DescendantSelector.IsCombinator">
            <inheritdoc/>
        </member>
        <member name="P:Avalonia.Styling.DescendantSelector.InTemplate">
            <inheritdoc/>
        </member>
        <member name="P:Avalonia.Styling.DescendantSelector.TargetType">
            <inheritdoc/>
        </member>
        <member name="T:Avalonia.Styling.IGlobalStyles">
            <summary>
            Defines the style host that provides styles global to the application.
            </summary>
        </member>
        <member name="T:Avalonia.Styling.ISetter">
            <summary>
            Represents a setter for a <see cref="T:Avalonia.Styling.Style"/>.
            </summary>
        </member>
        <member name="M:Avalonia.Styling.ISetter.Apply(Avalonia.Styling.IStyle,Avalonia.Styling.IStyleable,System.IObservable{System.Boolean})">
            <summary>
            Applies the setter to a control.
            </summary>
            <param name="style">The style that is being applied.</param>
            <param name="control">The control.</param>
            <param name="activator">An optional activator.</param>
        </member>
        <member name="T:Avalonia.Styling.ISetterValue">
            <summary>
            Customizes the behavior of a class when added as a value to an <see cref="T:Avalonia.Styling.ISetter"/>.
            </summary>
        </member>
        <member name="M:Avalonia.Styling.ISetterValue.Initialize(Avalonia.Styling.ISetter)">
            <summary>
            Notifies that the object has been added as a setter value.
            </summary>
        </member>
        <member name="T:Avalonia.Styling.IStyle">
            <summary>
            Defines the interface for styles.
            </summary>
        </member>
        <member name="M:Avalonia.Styling.IStyle.Attach(Avalonia.Styling.IStyleable,Avalonia.Styling.IStyleHost)">
            <summary>
            Attaches the style to a control if the style's selector matches.
            </summary>
            <param name="control">The control to attach to.</param>
            <param name="container">
            The control that contains this style. May be null.
            </param>
            <returns>
            True if the style can match a control of type <paramref name="control"/>
            (even if it does not match this control specifically); false if the style
            can never match.
            </returns>
        </member>
        <member name="T:Avalonia.Styling.IStyleable">
            <summary>
            Interface for styleable elements.
            </summary>
        </member>
        <member name="P:Avalonia.Styling.IStyleable.StyleDetach">
            <summary>
            Signaled when the control's style should be removed.
            </summary>
        </member>
        <member name="P:Avalonia.Styling.IStyleable.Classes">
            <summary>
            Gets the list of classes for the control.
            </summary>
        </member>
        <member name="P:Avalonia.Styling.IStyleable.StyleKey">
            <summary>
            Gets the type by which the control is styled.
            </summary>
        </member>
        <member name="P:Avalonia.Styling.IStyleable.TemplatedParent">
            <summary>
            Gets the template parent of this element if the control comes from a template.
            </summary>
        </member>
        <member name="T:Avalonia.Styling.IStyleHost">
            <summary>
            Defines an element that has a <see cref="P:Avalonia.Styling.IStyleHost.Styles"/> collection.
            </summary>
        </member>
        <member name="P:Avalonia.Styling.IStyleHost.IsStylesInitialized">
            <summary>
            Gets a value indicating whether <see cref="P:Avalonia.Styling.IStyleHost.Styles"/> is initialized.
            </summary>
            <remarks>
            The <see cref="P:Avalonia.Styling.IStyleHost.Styles"/> property may be lazily initialized, if so this property
            indicates whether it has been initialized.
            </remarks>
        </member>
        <member name="P:Avalonia.Styling.IStyleHost.Styles">
            <summary>
            Gets the styles for the element.
            </summary>
        </member>
        <member name="P:Avalonia.Styling.IStyleHost.StylingParent">
            <summary>
            Gets the parent style host element.
            </summary>
        </member>
        <member name="T:Avalonia.Styling.IStyleRoot">
            <summary>
            Denotes the root <see cref="T:Avalonia.Styling.IStyleHost"/> in a tree.
            </summary>
        </member>
        <member name="T:Avalonia.Styling.NotSelector">
            <summary>
            The `:not()` style selector.
            </summary>
        </member>
        <member name="M:Avalonia.Styling.NotSelector.#ctor(Avalonia.Styling.Selector,Avalonia.Styling.Selector)">
            <summary>
            Initializes a new instance of the <see cref="T:Avalonia.Styling.NotSelector"/> class.
            </summary>
            <param name="previous">The previous selector.</param>
            <param name="argument">The selector to be not-ed.</param>
        </member>
        <member name="P:Avalonia.Styling.NotSelector.InTemplate">
            <inheritdoc/>
        </member>
        <member name="P:Avalonia.Styling.NotSelector.IsCombinator">
            <inheritdoc/>
        </member>
        <member name="P:Avalonia.Styling.NotSelector.TargetType">
            <inheritdoc/>
        </member>
        <member name="M:Avalonia.Styling.NotSelector.ToString">
            <inheritdoc/>
        </member>
        <member name="T:Avalonia.Styling.OrSelector">
            <summary>
            The OR style selector.
            </summary>
        </member>
        <member name="M:Avalonia.Styling.OrSelector.#ctor(System.Collections.Generic.IReadOnlyList{Avalonia.Styling.Selector})">
            <summary>
            Initializes a new instance of the <see cref="T:Avalonia.Styling.OrSelector"/> class.
            </summary>
            <param name="selectors">The selectors to OR.</param>
        </member>
        <member name="P:Avalonia.Styling.OrSelector.InTemplate">
            <inheritdoc/>
        </member>
        <member name="P:Avalonia.Styling.OrSelector.IsCombinator">
            <inheritdoc/>
        </member>
        <member name="P:Avalonia.Styling.OrSelector.TargetType">
            <inheritdoc/>
        </member>
        <member name="M:Avalonia.Styling.OrSelector.ToString">
            <inheritdoc/>
        </member>
        <member name="T:Avalonia.Styling.PropertyEqualsSelector">
            <summary>
            A selector that matches the common case of a type and/or name followed by a collection of
            style classes and pseudoclasses.
            </summary>
        </member>
        <member name="P:Avalonia.Styling.PropertyEqualsSelector.InTemplate">
            <inheritdoc/>
        </member>
        <member name="P:Avalonia.Styling.PropertyEqualsSelector.IsCombinator">
            <inheritdoc/>
        </member>
        <member name="P:Avalonia.Styling.PropertyEqualsSelector.Name">
            <summary>
            Gets the name of the control to match.
            </summary>
        </member>
        <member name="P:Avalonia.Styling.PropertyEqualsSelector.TargetType">
            <inheritdoc/>
        </member>
        <member name="M:Avalonia.Styling.PropertyEqualsSelector.ToString">
            <inheritdoc/>
        </member>
        <member name="M:Avalonia.Styling.PropertyEqualsSelector.Evaluate(Avalonia.Styling.IStyleable,System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="T:Avalonia.Styling.Selector">
            <summary>
            A selector in a <see cref="T:Avalonia.Styling.Style"/>.
            </summary>
        </member>
        <member name="P:Avalonia.Styling.Selector.InTemplate">
            <summary>
            Gets a value indicating whether either this selector or a previous selector has moved
            into a template.
            </summary>
        </member>
        <member name="P:Avalonia.Styling.Selector.IsCombinator">
            <summary>
            Gets a value indicating whether this selector is a combinator.
            </summary>
            <remarks>
            A combinator is a selector such as Child or Descendent which links simple selectors.
            </remarks>
        </member>
        <member name="P:Avalonia.Styling.Selector.TargetType">
            <summary>
            Gets the target type of the selector, if available.
            </summary>
        </member>
        <member name="M:Avalonia.Styling.Selector.Match(Avalonia.Styling.IStyleable,System.Boolean)">
            <summary>
            Tries to match the selector with a control.
            </summary>
            <param name="control">The control.</param>
            <param name="subscribe">
            Whether the match should subscribe to changes in order to track the match over time,
            or simply return an immediate result.
            </param>
            <returns>A <see cref="T:Avalonia.Styling.SelectorMatch"/>.</returns>
        </member>
        <member name="M:Avalonia.Styling.Selector.Evaluate(Avalonia.Styling.IStyleable,System.Boolean)">
            <summary>
            Evaluates the selector for a match.
            </summary>
            <param name="control">The control.</param>
            <param name="subscribe">
            Whether the match should subscribe to changes in order to track the match over time,
            or simply return an immediate result.
            </param>
            <returns>A <see cref="T:Avalonia.Styling.SelectorMatch"/>.</returns>
        </member>
        <member name="M:Avalonia.Styling.Selector.MovePrevious">
            <summary>
            Moves to the previous selector.
            </summary>
        </member>
        <member name="T:Avalonia.Styling.SelectorMatchResult">
            <summary>
            Describes how a <see cref="T:Avalonia.Styling.SelectorMatch"/> matches a control and its type.
            </summary>
        </member>
        <member name="F:Avalonia.Styling.SelectorMatchResult.NeverThisType">
            <summary>
            The selector never matches this type.
            </summary>
        </member>
        <member name="F:Avalonia.Styling.SelectorMatchResult.NeverThisInstance">
            <summary>
            The selector never matches this instance, but can match this type.
            </summary>
        </member>
        <member name="F:Avalonia.Styling.SelectorMatchResult.AlwaysThisType">
            <summary>
            The selector always matches this type.
            </summary>
        </member>
        <member name="F:Avalonia.Styling.SelectorMatchResult.AlwaysThisInstance">
            <summary>
            The selector always matches this instance, but doesn't always match this type.
            </summary>
        </member>
        <member name="F:Avalonia.Styling.SelectorMatchResult.Sometimes">
            <summary>
            The selector matches this instance based on the <see cref="P:Avalonia.Styling.SelectorMatch.Activator"/>.
            </summary>
        </member>
        <member name="T:Avalonia.Styling.SelectorMatch">
            <summary>
            Holds the result of a <see cref="T:Avalonia.Styling.Selector"/> match.
            </summary>
            <remarks>
            A selector match describes whether and how a <see cref="T:Avalonia.Styling.Selector"/> matches a control, and
            in addition whether the selector can ever match a control of the same type.
            </remarks>
        </member>
        <member name="F:Avalonia.Styling.SelectorMatch.NeverThisType">
            <summary>
            A selector match with the result of <see cref="F:Avalonia.Styling.SelectorMatchResult.NeverThisType"/>.
            </summary>
        </member>
        <member name="F:Avalonia.Styling.SelectorMatch.NeverThisInstance">
            <summary>
            A selector match with the result of <see cref="F:Avalonia.Styling.SelectorMatchResult.NeverThisInstance"/>.
            </summary>
        </member>
        <member name="F:Avalonia.Styling.SelectorMatch.AlwaysThisType">
            <summary>
            A selector match with the result of <see cref="F:Avalonia.Styling.SelectorMatchResult.AlwaysThisType"/>.
            </summary>
        </member>
        <member name="F:Avalonia.Styling.SelectorMatch.AlwaysThisInstance">
            <summary>
            Gets a selector match with the result of <see cref="F:Avalonia.Styling.SelectorMatchResult.AlwaysThisInstance"/>.
            </summary>
        </member>
        <member name="M:Avalonia.Styling.SelectorMatch.#ctor(System.IObservable{System.Boolean})">
            <summary>
            Initializes a new instance of the <see cref="T:Avalonia.Styling.SelectorMatch"/> class with a 
            <see cref="F:Avalonia.Styling.SelectorMatchResult.Sometimes"/> result.
            </summary>
            <param name="match">The match activator.</param>
        </member>
        <member name="P:Avalonia.Styling.SelectorMatch.IsMatch">
            <summary>
            Gets a value indicating whether the match was positive.
            </summary>
        </member>
        <member name="P:Avalonia.Styling.SelectorMatch.Result">
            <summary>
            Gets the result of the match.
            </summary>
        </member>
        <member name="P:Avalonia.Styling.SelectorMatch.Activator">
            <summary>
            Gets an observable which tracks the selector match, in the case of selectors that can
            change over time.
            </summary>
        </member>
        <member name="T:Avalonia.Styling.Selectors">
            <summary>
            Extension methods for <see cref="T:Avalonia.Styling.Selector"/>.
            </summary>
        </member>
        <member name="M:Avalonia.Styling.Selectors.Child(Avalonia.Styling.Selector)">
            <summary>
            Returns a selector which matches a previous selector's child.
            </summary>
            <param name="previous">The previous selector.</param>
            <returns>The selector.</returns>
        </member>
        <member name="M:Avalonia.Styling.Selectors.Class(Avalonia.Styling.Selector,System.String)">
            <summary>
            Returns a selector which matches a control's style class.
            </summary>
            <param name="previous">The previous selector.</param>
            <param name="name">The name of the style class.</param>
            <returns>The selector.</returns>
        </member>
        <member name="M:Avalonia.Styling.Selectors.Descendant(Avalonia.Styling.Selector)">
            <summary>
            Returns a selector which matches a descendant of a previous selector.
            </summary>
            <param name="previous">The previous selector.</param>
            <returns>The selector.</returns>
        </member>
        <member name="M:Avalonia.Styling.Selectors.Is(Avalonia.Styling.Selector,System.Type)">
            <summary>
            Returns a selector which matches a type or a derived type.
            </summary>
            <param name="previous">The previous selector.</param>
            <param name="type">The type.</param>
            <returns>The selector.</returns>
        </member>
        <member name="M:Avalonia.Styling.Selectors.Is``1(Avalonia.Styling.Selector)">
            <summary>
            Returns a selector which matches a type or a derived type.
            </summary>
            <typeparam name="T">The type.</typeparam>
            <param name="previous">The previous selector.</param>
            <returns>The selector.</returns>
        </member>
        <member name="M:Avalonia.Styling.Selectors.Name(Avalonia.Styling.Selector,System.String)">
            <summary>
            Returns a selector which matches a control's Name.
            </summary>
            <param name="previous">The previous selector.</param>
            <param name="name">The name.</param>
            <returns>The selector.</returns>
        </member>
        <member name="M:Avalonia.Styling.Selectors.Not(Avalonia.Styling.Selector,System.Func{Avalonia.Styling.Selector,Avalonia.Styling.Selector})">
            <summary>
            Returns a selector which inverts the results of selector argument.
            </summary>
            <param name="previous">The previous selector.</param>
            <param name="argument">The selector to be not-ed.</param>
            <returns>The selector.</returns>
        </member>
        <member name="M:Avalonia.Styling.Selectors.Not(Avalonia.Styling.Selector,Avalonia.Styling.Selector)">
            <summary>
            Returns a selector which inverts the results of selector argument.
            </summary>
            <param name="previous">The previous selector.</param>
            <param name="argument">The selector to be not-ed.</param>
            <returns>The selector.</returns>
        </member>
        <member name="M:Avalonia.Styling.Selectors.OfType(Avalonia.Styling.Selector,System.Type)">
            <summary>
            Returns a selector which matches a type.
            </summary>
            <param name="previous">The previous selector.</param>
            <param name="type">The type.</param>
            <returns>The selector.</returns>
        </member>
        <member name="M:Avalonia.Styling.Selectors.OfType``1(Avalonia.Styling.Selector)">
            <summary>
            Returns a selector which matches a type.
            </summary>
            <typeparam name="T">The type.</typeparam>
            <param name="previous">The previous selector.</param>
            <returns>The selector.</returns>
        </member>
        <member name="M:Avalonia.Styling.Selectors.Or(Avalonia.Styling.Selector[])">
            <summary>
            Returns a selector which ORs selectors.
            </summary>
            <param name="selectors">The selectors to be OR'd.</param>
            <returns>The selector.</returns>
        </member>
        <member name="M:Avalonia.Styling.Selectors.Or(System.Collections.Generic.IReadOnlyList{Avalonia.Styling.Selector})">
            <summary>
            Returns a selector which ORs selectors.
            </summary>
            <param name="selectors">The selectors to be OR'd.</param>
            <returns>The selector.</returns>
        </member>
        <member name="M:Avalonia.Styling.Selectors.PropertyEquals``1(Avalonia.Styling.Selector,Avalonia.AvaloniaProperty{``0},System.Object)">
            <summary>
            Returns a selector which matches a control with the specified property value.
            </summary>
            <typeparam name="T">The property type.</typeparam>
            <param name="previous">The previous selector.</param>
            <param name="property">The property.</param>
            <param name="value">The property value.</param>
            <returns>The selector.</returns>
        </member>
        <member name="M:Avalonia.Styling.Selectors.PropertyEquals(Avalonia.Styling.Selector,Avalonia.AvaloniaProperty,System.Object)">
            <summary>
            Returns a selector which matches a control with the specified property value.
            </summary>
            <param name="previous">The previous selector.</param>
            <param name="property">The property.</param>
            <param name="value">The property value.</param>
            <returns>The selector.</returns>
        </member>
        <member name="M:Avalonia.Styling.Selectors.Template(Avalonia.Styling.Selector)">
            <summary>
            Returns a selector which enters a lookless control's template.
            </summary>
            <param name="previous">The previous selector.</param>
            <returns>The selector.</returns>
        </member>
        <member name="T:Avalonia.Styling.Setter">
            <summary>
            A setter for a <see cref="T:Avalonia.Styling.Style"/>.
            </summary>
            <remarks>
            A <see cref="T:Avalonia.Styling.Setter"/> is used to set a <see cref="T:Avalonia.AvaloniaProperty"/> value on a
            <see cref="T:Avalonia.AvaloniaObject"/> depending on a condition.
            </remarks>
        </member>
        <member name="M:Avalonia.Styling.Setter.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Avalonia.Styling.Setter"/> class.
            </summary>
        </member>
        <member name="M:Avalonia.Styling.Setter.#ctor(Avalonia.AvaloniaProperty,System.Object)">
            <summary>
            Initializes a new instance of the <see cref="T:Avalonia.Styling.Setter"/> class.
            </summary>
            <param name="property">The property to set.</param>
            <param name="value">The property value.</param>
        </member>
        <member name="P:Avalonia.Styling.Setter.Property">
            <summary>
            Gets or sets the property to set.
            </summary>
        </member>
        <member name="P:Avalonia.Styling.Setter.Value">
            <summary>
            Gets or sets the property value.
            </summary>
        </member>
        <member name="M:Avalonia.Styling.Setter.Apply(Avalonia.Styling.IStyle,Avalonia.Styling.IStyleable,System.IObservable{System.Boolean})">
            <summary>
            Applies the setter to a control.
            </summary>
            <param name="style">The style that is being applied.</param>
            <param name="control">The control.</param>
            <param name="activator">An optional activator.</param>
        </member>
        <member name="T:Avalonia.Styling.Style">
            <summary>
            Defines a style.
            </summary>
        </member>
        <member name="M:Avalonia.Styling.Style.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Avalonia.Styling.Style"/> class.
            </summary>
        </member>
        <member name="M:Avalonia.Styling.Style.#ctor(System.Func{Avalonia.Styling.Selector,Avalonia.Styling.Selector})">
            <summary>
            Initializes a new instance of the <see cref="T:Avalonia.Styling.Style"/> class.
            </summary>
            <param name="selector">The style selector.</param>
        </member>
        <member name="E:Avalonia.Styling.Style.ResourcesChanged">
            <inheritdoc/>
        </member>
        <member name="P:Avalonia.Styling.Style.Resources">
            <summary>
            Gets or sets a dictionary of style resources.
            </summary>
        </member>
        <member name="P:Avalonia.Styling.Style.Selector">
            <summary>
            Gets or sets the style's selector.
            </summary>
        </member>
        <member name="P:Avalonia.Styling.Style.Setters">
            <summary>
            Gets or sets the style's setters.
            </summary>
        </member>
        <member name="P:Avalonia.Styling.Style.Avalonia#Controls#IResourceNode#ResourceParent">
            <inheritdoc/>
        </member>
        <member name="P:Avalonia.Styling.Style.Avalonia#Controls#IResourceProvider#HasResources">
            <inheritdoc/>
        </member>
        <member name="M:Avalonia.Styling.Style.Attach(Avalonia.Styling.IStyleable,Avalonia.Styling.IStyleHost)">
            <inheritdoc/>
        </member>
        <member name="M:Avalonia.Styling.Style.TryGetResource(System.Object,System.Object@)">
            <inheritdoc/>
        </member>
        <member name="M:Avalonia.Styling.Style.ToString">
            <summary>
            Returns a string representation of the style.
            </summary>
            <returns>A string representation of the style.</returns>
        </member>
        <member name="M:Avalonia.Styling.Style.Avalonia#Controls#ISetResourceParent#ParentResourcesChanged(Avalonia.Controls.ResourcesChangedEventArgs)">
            <inheritdoc/>
        </member>
        <member name="M:Avalonia.Styling.Style.Avalonia#Controls#ISetResourceParent#SetParent(Avalonia.Controls.IResourceNode)">
            <inheritdoc/>
        </member>
        <member name="M:Avalonia.Styling.Style.ControlDetach(Avalonia.Styling.IStyleable)">
            <summary>
            Called when a control's <see cref="P:Avalonia.Styling.IStyleable.StyleDetach"/> is signaled to remove
            all applied styles.
            </summary>
            <param name="control">The control.</param>
        </member>
        <member name="T:Avalonia.Styling.Styles">
            <summary>
            A style that consists of a number of child styles.
            </summary>
        </member>
        <member name="E:Avalonia.Styling.Styles.ResourcesChanged">
            <inheritdoc/>
        </member>
        <member name="P:Avalonia.Styling.Styles.Count">
            <inheritdoc/>
        </member>
        <member name="P:Avalonia.Styling.Styles.HasResources">
            <inheritdoc/>
        </member>
        <member name="P:Avalonia.Styling.Styles.Resources">
            <summary>
            Gets or sets a dictionary of style resources.
            </summary>
        </member>
        <member name="P:Avalonia.Styling.Styles.Avalonia#Controls#IResourceNode#ResourceParent">
            <inheritdoc/>
        </member>
        <member name="P:Avalonia.Styling.Styles.System#Collections#Generic#ICollection{Avalonia#Styling#IStyle}#IsReadOnly">
            <inheritdoc/>
        </member>
        <member name="P:Avalonia.Styling.Styles.System#Collections#Generic#IReadOnlyList{Avalonia#Styling#IStyle}#Item(System.Int32)">
            <inheritdoc/>
        </member>
        <member name="P:Avalonia.Styling.Styles.Item(System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:Avalonia.Styling.Styles.Attach(Avalonia.Styling.IStyleable,Avalonia.Styling.IStyleHost)">
            <summary>
            Attaches the style to a control if the style's selector matches.
            </summary>
            <param name="control">The control to attach to.</param>
            <param name="container">
            The control that contains this style. May be null.
            </param>
        </member>
        <member name="M:Avalonia.Styling.Styles.TryGetResource(System.Object,System.Object@)">
            <inheritdoc/>
        </member>
        <member name="M:Avalonia.Styling.Styles.AddRange(System.Collections.Generic.IEnumerable{Avalonia.Styling.IStyle})">
            <inheritdoc/>
        </member>
        <member name="M:Avalonia.Styling.Styles.InsertRange(System.Int32,System.Collections.Generic.IEnumerable{Avalonia.Styling.IStyle})">
            <inheritdoc/>
        </member>
        <member name="M:Avalonia.Styling.Styles.Move(System.Int32,System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:Avalonia.Styling.Styles.MoveRange(System.Int32,System.Int32,System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:Avalonia.Styling.Styles.RemoveAll(System.Collections.Generic.IEnumerable{Avalonia.Styling.IStyle})">
            <inheritdoc/>
        </member>
        <member name="M:Avalonia.Styling.Styles.RemoveRange(System.Int32,System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:Avalonia.Styling.Styles.IndexOf(Avalonia.Styling.IStyle)">
            <inheritdoc/>
        </member>
        <member name="M:Avalonia.Styling.Styles.Insert(System.Int32,Avalonia.Styling.IStyle)">
            <inheritdoc/>
        </member>
        <member name="M:Avalonia.Styling.Styles.RemoveAt(System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:Avalonia.Styling.Styles.Add(Avalonia.Styling.IStyle)">
            <inheritdoc/>
        </member>
        <member name="M:Avalonia.Styling.Styles.Clear">
            <inheritdoc/>
        </member>
        <member name="M:Avalonia.Styling.Styles.Contains(Avalonia.Styling.IStyle)">
            <inheritdoc/>
        </member>
        <member name="M:Avalonia.Styling.Styles.CopyTo(Avalonia.Styling.IStyle[],System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:Avalonia.Styling.Styles.Remove(Avalonia.Styling.IStyle)">
            <inheritdoc/>
        </member>
        <member name="M:Avalonia.Styling.Styles.GetEnumerator">
            <inheritdoc/>
        </member>
        <member name="M:Avalonia.Styling.Styles.System#Collections#IEnumerable#GetEnumerator">
            <inheritdoc/>
        </member>
        <member name="M:Avalonia.Styling.Styles.Avalonia#Controls#ISetResourceParent#SetParent(Avalonia.Controls.IResourceNode)">
            <inheritdoc/>
        </member>
        <member name="M:Avalonia.Styling.Styles.Avalonia#Controls#ISetResourceParent#ParentResourcesChanged(Avalonia.Controls.ResourcesChangedEventArgs)">
            <inheritdoc/>
        </member>
        <member name="P:Avalonia.Styling.TemplateSelector.InTemplate">
            <inheritdoc/>
        </member>
        <member name="P:Avalonia.Styling.TemplateSelector.IsCombinator">
            <inheritdoc/>
        </member>
        <member name="P:Avalonia.Styling.TemplateSelector.TargetType">
            <inheritdoc/>
        </member>
        <member name="T:Avalonia.Styling.TypeNameAndClassSelector">
            <summary>
            A selector that matches the common case of a type and/or name followed by a collection of
            style classes and pseudoclasses.
            </summary>
        </member>
        <member name="P:Avalonia.Styling.TypeNameAndClassSelector.InTemplate">
            <inheritdoc/>
        </member>
        <member name="P:Avalonia.Styling.TypeNameAndClassSelector.Name">
            <summary>
            Gets the name of the control to match.
            </summary>
        </member>
        <member name="P:Avalonia.Styling.TypeNameAndClassSelector.TargetType">
            <inheritdoc/>
        </member>
        <member name="P:Avalonia.Styling.TypeNameAndClassSelector.IsCombinator">
            <inheritdoc/>
        </member>
        <member name="P:Avalonia.Styling.TypeNameAndClassSelector.IsConcreteType">
            <summary>
            Whether the selector matches the concrete <see cref="P:Avalonia.Styling.TypeNameAndClassSelector.TargetType"/> or any object which
            implements <see cref="P:Avalonia.Styling.TypeNameAndClassSelector.TargetType"/>.
            </summary>
        </member>
        <member name="P:Avalonia.Styling.TypeNameAndClassSelector.Classes">
            <summary>
            The style classes which the selector matches.
            </summary>
        </member>
        <member name="M:Avalonia.Styling.TypeNameAndClassSelector.ToString">
            <inheritdoc/>
        </member>
        <member name="M:Avalonia.Styling.TypeNameAndClassSelector.Evaluate(Avalonia.Styling.IStyleable,System.Boolean)">
            <inheritdoc/>
        </member>
    </members>
</doc>
